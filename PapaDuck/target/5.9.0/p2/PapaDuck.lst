
h:/IOT2/IOT2/PapaDuck/target/5.9.0/p2/PapaDuck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085f9000  085f9000  00009000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085f9018  085f9018  00009018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023f9c40  085f90a8  00009c40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   000063b0  023f9c48  085f90b0  00009c48  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  6 .data         000004b8  1007a7c0  085ff460  0001a7c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000384  1007ac78  1007ac78  0002ac78  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ff918  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 0000069c  085ff91c  085ff91c  0001f91c  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001f91c  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   001752b5  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00018cb4  00000000  00000000  001952b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    0004835a  00000000  00000000  001adf69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000035a0  00000000  00000000  001f62c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000c8f0  00000000  00000000  001f9863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00030a78  00000000  00000000  00206153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00056310  00000000  00000000  00236bcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f1e50  00000000  00000000  0028cedb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00009da8  00000000  00000000  0037ed2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085f9018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f9018:	4813      	ldr	r0, [pc, #76]	; (85f9068 <module_user_pre_init+0x50>)
 85f901a:	4914      	ldr	r1, [pc, #80]	; (85f906c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85f901c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f901e:	4288      	cmp	r0, r1
 85f9020:	d005      	beq.n	85f902e <module_user_pre_init+0x16>
 85f9022:	4a13      	ldr	r2, [pc, #76]	; (85f9070 <module_user_pre_init+0x58>)
 85f9024:	4282      	cmp	r2, r0
 85f9026:	d002      	beq.n	85f902e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85f9028:	4b12      	ldr	r3, [pc, #72]	; (85f9074 <module_user_pre_init+0x5c>)
 85f902a:	1a12      	subs	r2, r2, r0
 85f902c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85f902e:	4812      	ldr	r0, [pc, #72]	; (85f9078 <module_user_pre_init+0x60>)
 85f9030:	4a12      	ldr	r2, [pc, #72]	; (85f907c <module_user_pre_init+0x64>)
 85f9032:	2100      	movs	r1, #0
 85f9034:	4b12      	ldr	r3, [pc, #72]	; (85f9080 <module_user_pre_init+0x68>)
 85f9036:	1a12      	subs	r2, r2, r0
 85f9038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85f903a:	4812      	ldr	r0, [pc, #72]	; (85f9084 <module_user_pre_init+0x6c>)
 85f903c:	4912      	ldr	r1, [pc, #72]	; (85f9088 <module_user_pre_init+0x70>)
 85f903e:	4288      	cmp	r0, r1
 85f9040:	d005      	beq.n	85f904e <module_user_pre_init+0x36>
 85f9042:	4a12      	ldr	r2, [pc, #72]	; (85f908c <module_user_pre_init+0x74>)
 85f9044:	4282      	cmp	r2, r0
 85f9046:	d002      	beq.n	85f904e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85f9048:	4b0a      	ldr	r3, [pc, #40]	; (85f9074 <module_user_pre_init+0x5c>)
 85f904a:	1a12      	subs	r2, r2, r0
 85f904c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85f904e:	4810      	ldr	r0, [pc, #64]	; (85f9090 <module_user_pre_init+0x78>)
 85f9050:	4910      	ldr	r1, [pc, #64]	; (85f9094 <module_user_pre_init+0x7c>)
 85f9052:	4288      	cmp	r0, r1
 85f9054:	d005      	beq.n	85f9062 <module_user_pre_init+0x4a>
 85f9056:	4a10      	ldr	r2, [pc, #64]	; (85f9098 <module_user_pre_init+0x80>)
 85f9058:	4282      	cmp	r2, r0
 85f905a:	d002      	beq.n	85f9062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85f905c:	4b05      	ldr	r3, [pc, #20]	; (85f9074 <module_user_pre_init+0x5c>)
 85f905e:	1a12      	subs	r2, r2, r0
 85f9060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85f9062:	4801      	ldr	r0, [pc, #4]	; (85f9068 <module_user_pre_init+0x50>)
 85f9064:	bd08      	pop	{r3, pc}
 85f9066:	bf00      	nop
 85f9068:	1007a7c0 	.word	0x1007a7c0
 85f906c:	085ff460 	.word	0x085ff460
 85f9070:	1007ac78 	.word	0x1007ac78
 85f9074:	10110d2d 	.word	0x10110d2d
 85f9078:	1007ac78 	.word	0x1007ac78
 85f907c:	1007affc 	.word	0x1007affc
 85f9080:	10110ea1 	.word	0x10110ea1
 85f9084:	023f9c40 	.word	0x023f9c40
 85f9088:	085f90a8 	.word	0x085f90a8
 85f908c:	023f9c48 	.word	0x023f9c48
 85f9090:	023f9c48 	.word	0x023f9c48
 85f9094:	085f90b0 	.word	0x085f90b0
 85f9098:	023ffff8 	.word	0x023ffff8

085f909c <dynalib_preinit>:
 85f909c:	085f9019 00000000                       .._.....

Disassembly of section .psram_text:

023f9c48 <__aeabi_drsub>:
 23f9c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23f9c4c:	e002      	b.n	23f9c54 <__adddf3>
 23f9c4e:	bf00      	nop

023f9c50 <__aeabi_dsub>:
 23f9c50:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023f9c54 <__adddf3>:
 23f9c54:	b530      	push	{r4, r5, lr}
 23f9c56:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23f9c5a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23f9c5e:	ea94 0f05 	teq	r4, r5
 23f9c62:	bf08      	it	eq
 23f9c64:	ea90 0f02 	teqeq	r0, r2
 23f9c68:	bf1f      	itttt	ne
 23f9c6a:	ea54 0c00 	orrsne.w	ip, r4, r0
 23f9c6e:	ea55 0c02 	orrsne.w	ip, r5, r2
 23f9c72:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23f9c76:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23f9c7a:	f000 80e2 	beq.w	23f9e42 <__adddf3+0x1ee>
 23f9c7e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23f9c82:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23f9c86:	bfb8      	it	lt
 23f9c88:	426d      	neglt	r5, r5
 23f9c8a:	dd0c      	ble.n	23f9ca6 <__adddf3+0x52>
 23f9c8c:	442c      	add	r4, r5
 23f9c8e:	ea80 0202 	eor.w	r2, r0, r2
 23f9c92:	ea81 0303 	eor.w	r3, r1, r3
 23f9c96:	ea82 0000 	eor.w	r0, r2, r0
 23f9c9a:	ea83 0101 	eor.w	r1, r3, r1
 23f9c9e:	ea80 0202 	eor.w	r2, r0, r2
 23f9ca2:	ea81 0303 	eor.w	r3, r1, r3
 23f9ca6:	2d36      	cmp	r5, #54	; 0x36
 23f9ca8:	bf88      	it	hi
 23f9caa:	bd30      	pophi	{r4, r5, pc}
 23f9cac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23f9cb0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23f9cb4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23f9cb8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23f9cbc:	d002      	beq.n	23f9cc4 <__adddf3+0x70>
 23f9cbe:	4240      	negs	r0, r0
 23f9cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23f9cc4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23f9cc8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23f9ccc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23f9cd0:	d002      	beq.n	23f9cd8 <__adddf3+0x84>
 23f9cd2:	4252      	negs	r2, r2
 23f9cd4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23f9cd8:	ea94 0f05 	teq	r4, r5
 23f9cdc:	f000 80a7 	beq.w	23f9e2e <__adddf3+0x1da>
 23f9ce0:	f1a4 0401 	sub.w	r4, r4, #1
 23f9ce4:	f1d5 0e20 	rsbs	lr, r5, #32
 23f9ce8:	db0d      	blt.n	23f9d06 <__adddf3+0xb2>
 23f9cea:	fa02 fc0e 	lsl.w	ip, r2, lr
 23f9cee:	fa22 f205 	lsr.w	r2, r2, r5
 23f9cf2:	1880      	adds	r0, r0, r2
 23f9cf4:	f141 0100 	adc.w	r1, r1, #0
 23f9cf8:	fa03 f20e 	lsl.w	r2, r3, lr
 23f9cfc:	1880      	adds	r0, r0, r2
 23f9cfe:	fa43 f305 	asr.w	r3, r3, r5
 23f9d02:	4159      	adcs	r1, r3
 23f9d04:	e00e      	b.n	23f9d24 <__adddf3+0xd0>
 23f9d06:	f1a5 0520 	sub.w	r5, r5, #32
 23f9d0a:	f10e 0e20 	add.w	lr, lr, #32
 23f9d0e:	2a01      	cmp	r2, #1
 23f9d10:	fa03 fc0e 	lsl.w	ip, r3, lr
 23f9d14:	bf28      	it	cs
 23f9d16:	f04c 0c02 	orrcs.w	ip, ip, #2
 23f9d1a:	fa43 f305 	asr.w	r3, r3, r5
 23f9d1e:	18c0      	adds	r0, r0, r3
 23f9d20:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23f9d24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23f9d28:	d507      	bpl.n	23f9d3a <__adddf3+0xe6>
 23f9d2a:	f04f 0e00 	mov.w	lr, #0
 23f9d2e:	f1dc 0c00 	rsbs	ip, ip, #0
 23f9d32:	eb7e 0000 	sbcs.w	r0, lr, r0
 23f9d36:	eb6e 0101 	sbc.w	r1, lr, r1
 23f9d3a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23f9d3e:	d31b      	bcc.n	23f9d78 <__adddf3+0x124>
 23f9d40:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23f9d44:	d30c      	bcc.n	23f9d60 <__adddf3+0x10c>
 23f9d46:	0849      	lsrs	r1, r1, #1
 23f9d48:	ea5f 0030 	movs.w	r0, r0, rrx
 23f9d4c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23f9d50:	f104 0401 	add.w	r4, r4, #1
 23f9d54:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23f9d58:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23f9d5c:	f080 809a 	bcs.w	23f9e94 <__adddf3+0x240>
 23f9d60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23f9d64:	bf08      	it	eq
 23f9d66:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23f9d6a:	f150 0000 	adcs.w	r0, r0, #0
 23f9d6e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23f9d72:	ea41 0105 	orr.w	r1, r1, r5
 23f9d76:	bd30      	pop	{r4, r5, pc}
 23f9d78:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23f9d7c:	4140      	adcs	r0, r0
 23f9d7e:	eb41 0101 	adc.w	r1, r1, r1
 23f9d82:	3c01      	subs	r4, #1
 23f9d84:	bf28      	it	cs
 23f9d86:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23f9d8a:	d2e9      	bcs.n	23f9d60 <__adddf3+0x10c>
 23f9d8c:	f091 0f00 	teq	r1, #0
 23f9d90:	bf04      	itt	eq
 23f9d92:	4601      	moveq	r1, r0
 23f9d94:	2000      	moveq	r0, #0
 23f9d96:	fab1 f381 	clz	r3, r1
 23f9d9a:	bf08      	it	eq
 23f9d9c:	3320      	addeq	r3, #32
 23f9d9e:	f1a3 030b 	sub.w	r3, r3, #11
 23f9da2:	f1b3 0220 	subs.w	r2, r3, #32
 23f9da6:	da0c      	bge.n	23f9dc2 <__adddf3+0x16e>
 23f9da8:	320c      	adds	r2, #12
 23f9daa:	dd08      	ble.n	23f9dbe <__adddf3+0x16a>
 23f9dac:	f102 0c14 	add.w	ip, r2, #20
 23f9db0:	f1c2 020c 	rsb	r2, r2, #12
 23f9db4:	fa01 f00c 	lsl.w	r0, r1, ip
 23f9db8:	fa21 f102 	lsr.w	r1, r1, r2
 23f9dbc:	e00c      	b.n	23f9dd8 <__adddf3+0x184>
 23f9dbe:	f102 0214 	add.w	r2, r2, #20
 23f9dc2:	bfd8      	it	le
 23f9dc4:	f1c2 0c20 	rsble	ip, r2, #32
 23f9dc8:	fa01 f102 	lsl.w	r1, r1, r2
 23f9dcc:	fa20 fc0c 	lsr.w	ip, r0, ip
 23f9dd0:	bfdc      	itt	le
 23f9dd2:	ea41 010c 	orrle.w	r1, r1, ip
 23f9dd6:	4090      	lslle	r0, r2
 23f9dd8:	1ae4      	subs	r4, r4, r3
 23f9dda:	bfa2      	ittt	ge
 23f9ddc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23f9de0:	4329      	orrge	r1, r5
 23f9de2:	bd30      	popge	{r4, r5, pc}
 23f9de4:	ea6f 0404 	mvn.w	r4, r4
 23f9de8:	3c1f      	subs	r4, #31
 23f9dea:	da1c      	bge.n	23f9e26 <__adddf3+0x1d2>
 23f9dec:	340c      	adds	r4, #12
 23f9dee:	dc0e      	bgt.n	23f9e0e <__adddf3+0x1ba>
 23f9df0:	f104 0414 	add.w	r4, r4, #20
 23f9df4:	f1c4 0220 	rsb	r2, r4, #32
 23f9df8:	fa20 f004 	lsr.w	r0, r0, r4
 23f9dfc:	fa01 f302 	lsl.w	r3, r1, r2
 23f9e00:	ea40 0003 	orr.w	r0, r0, r3
 23f9e04:	fa21 f304 	lsr.w	r3, r1, r4
 23f9e08:	ea45 0103 	orr.w	r1, r5, r3
 23f9e0c:	bd30      	pop	{r4, r5, pc}
 23f9e0e:	f1c4 040c 	rsb	r4, r4, #12
 23f9e12:	f1c4 0220 	rsb	r2, r4, #32
 23f9e16:	fa20 f002 	lsr.w	r0, r0, r2
 23f9e1a:	fa01 f304 	lsl.w	r3, r1, r4
 23f9e1e:	ea40 0003 	orr.w	r0, r0, r3
 23f9e22:	4629      	mov	r1, r5
 23f9e24:	bd30      	pop	{r4, r5, pc}
 23f9e26:	fa21 f004 	lsr.w	r0, r1, r4
 23f9e2a:	4629      	mov	r1, r5
 23f9e2c:	bd30      	pop	{r4, r5, pc}
 23f9e2e:	f094 0f00 	teq	r4, #0
 23f9e32:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23f9e36:	bf06      	itte	eq
 23f9e38:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23f9e3c:	3401      	addeq	r4, #1
 23f9e3e:	3d01      	subne	r5, #1
 23f9e40:	e74e      	b.n	23f9ce0 <__adddf3+0x8c>
 23f9e42:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23f9e46:	bf18      	it	ne
 23f9e48:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23f9e4c:	d029      	beq.n	23f9ea2 <__adddf3+0x24e>
 23f9e4e:	ea94 0f05 	teq	r4, r5
 23f9e52:	bf08      	it	eq
 23f9e54:	ea90 0f02 	teqeq	r0, r2
 23f9e58:	d005      	beq.n	23f9e66 <__adddf3+0x212>
 23f9e5a:	ea54 0c00 	orrs.w	ip, r4, r0
 23f9e5e:	bf04      	itt	eq
 23f9e60:	4619      	moveq	r1, r3
 23f9e62:	4610      	moveq	r0, r2
 23f9e64:	bd30      	pop	{r4, r5, pc}
 23f9e66:	ea91 0f03 	teq	r1, r3
 23f9e6a:	bf1e      	ittt	ne
 23f9e6c:	2100      	movne	r1, #0
 23f9e6e:	2000      	movne	r0, #0
 23f9e70:	bd30      	popne	{r4, r5, pc}
 23f9e72:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23f9e76:	d105      	bne.n	23f9e84 <__adddf3+0x230>
 23f9e78:	0040      	lsls	r0, r0, #1
 23f9e7a:	4149      	adcs	r1, r1
 23f9e7c:	bf28      	it	cs
 23f9e7e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23f9e82:	bd30      	pop	{r4, r5, pc}
 23f9e84:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23f9e88:	bf3c      	itt	cc
 23f9e8a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23f9e8e:	bd30      	popcc	{r4, r5, pc}
 23f9e90:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23f9e94:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23f9e98:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23f9e9c:	f04f 0000 	mov.w	r0, #0
 23f9ea0:	bd30      	pop	{r4, r5, pc}
 23f9ea2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23f9ea6:	bf1a      	itte	ne
 23f9ea8:	4619      	movne	r1, r3
 23f9eaa:	4610      	movne	r0, r2
 23f9eac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23f9eb0:	bf1c      	itt	ne
 23f9eb2:	460b      	movne	r3, r1
 23f9eb4:	4602      	movne	r2, r0
 23f9eb6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23f9eba:	bf06      	itte	eq
 23f9ebc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23f9ec0:	ea91 0f03 	teqeq	r1, r3
 23f9ec4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23f9ec8:	bd30      	pop	{r4, r5, pc}
 23f9eca:	bf00      	nop

023f9ecc <__aeabi_ui2d>:
 23f9ecc:	f090 0f00 	teq	r0, #0
 23f9ed0:	bf04      	itt	eq
 23f9ed2:	2100      	moveq	r1, #0
 23f9ed4:	4770      	bxeq	lr
 23f9ed6:	b530      	push	{r4, r5, lr}
 23f9ed8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23f9edc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23f9ee0:	f04f 0500 	mov.w	r5, #0
 23f9ee4:	f04f 0100 	mov.w	r1, #0
 23f9ee8:	e750      	b.n	23f9d8c <__adddf3+0x138>
 23f9eea:	bf00      	nop

023f9eec <__aeabi_i2d>:
 23f9eec:	f090 0f00 	teq	r0, #0
 23f9ef0:	bf04      	itt	eq
 23f9ef2:	2100      	moveq	r1, #0
 23f9ef4:	4770      	bxeq	lr
 23f9ef6:	b530      	push	{r4, r5, lr}
 23f9ef8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23f9efc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23f9f00:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23f9f04:	bf48      	it	mi
 23f9f06:	4240      	negmi	r0, r0
 23f9f08:	f04f 0100 	mov.w	r1, #0
 23f9f0c:	e73e      	b.n	23f9d8c <__adddf3+0x138>
 23f9f0e:	bf00      	nop

023f9f10 <__aeabi_f2d>:
 23f9f10:	0042      	lsls	r2, r0, #1
 23f9f12:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23f9f16:	ea4f 0131 	mov.w	r1, r1, rrx
 23f9f1a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23f9f1e:	bf1f      	itttt	ne
 23f9f20:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23f9f24:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23f9f28:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23f9f2c:	4770      	bxne	lr
 23f9f2e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23f9f32:	bf08      	it	eq
 23f9f34:	4770      	bxeq	lr
 23f9f36:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23f9f3a:	bf04      	itt	eq
 23f9f3c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23f9f40:	4770      	bxeq	lr
 23f9f42:	b530      	push	{r4, r5, lr}
 23f9f44:	f44f 7460 	mov.w	r4, #896	; 0x380
 23f9f48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23f9f4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23f9f50:	e71c      	b.n	23f9d8c <__adddf3+0x138>
 23f9f52:	bf00      	nop

023f9f54 <__aeabi_ul2d>:
 23f9f54:	ea50 0201 	orrs.w	r2, r0, r1
 23f9f58:	bf08      	it	eq
 23f9f5a:	4770      	bxeq	lr
 23f9f5c:	b530      	push	{r4, r5, lr}
 23f9f5e:	f04f 0500 	mov.w	r5, #0
 23f9f62:	e00a      	b.n	23f9f7a <__aeabi_l2d+0x16>

023f9f64 <__aeabi_l2d>:
 23f9f64:	ea50 0201 	orrs.w	r2, r0, r1
 23f9f68:	bf08      	it	eq
 23f9f6a:	4770      	bxeq	lr
 23f9f6c:	b530      	push	{r4, r5, lr}
 23f9f6e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23f9f72:	d502      	bpl.n	23f9f7a <__aeabi_l2d+0x16>
 23f9f74:	4240      	negs	r0, r0
 23f9f76:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23f9f7a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23f9f7e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23f9f82:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23f9f86:	f43f aed8 	beq.w	23f9d3a <__adddf3+0xe6>
 23f9f8a:	f04f 0203 	mov.w	r2, #3
 23f9f8e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23f9f92:	bf18      	it	ne
 23f9f94:	3203      	addne	r2, #3
 23f9f96:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23f9f9a:	bf18      	it	ne
 23f9f9c:	3203      	addne	r2, #3
 23f9f9e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23f9fa2:	f1c2 0320 	rsb	r3, r2, #32
 23f9fa6:	fa00 fc03 	lsl.w	ip, r0, r3
 23f9faa:	fa20 f002 	lsr.w	r0, r0, r2
 23f9fae:	fa01 fe03 	lsl.w	lr, r1, r3
 23f9fb2:	ea40 000e 	orr.w	r0, r0, lr
 23f9fb6:	fa21 f102 	lsr.w	r1, r1, r2
 23f9fba:	4414      	add	r4, r2
 23f9fbc:	e6bd      	b.n	23f9d3a <__adddf3+0xe6>
 23f9fbe:	bf00      	nop

023f9fc0 <__aeabi_dmul>:
 23f9fc0:	b570      	push	{r4, r5, r6, lr}
 23f9fc2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23f9fc6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23f9fca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23f9fce:	bf1d      	ittte	ne
 23f9fd0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23f9fd4:	ea94 0f0c 	teqne	r4, ip
 23f9fd8:	ea95 0f0c 	teqne	r5, ip
 23f9fdc:	f000 f8de 	bleq	23fa19c <__aeabi_dmul+0x1dc>
 23f9fe0:	442c      	add	r4, r5
 23f9fe2:	ea81 0603 	eor.w	r6, r1, r3
 23f9fe6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23f9fea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23f9fee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23f9ff2:	bf18      	it	ne
 23f9ff4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23f9ff8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f9ffc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23fa000:	d038      	beq.n	23fa074 <__aeabi_dmul+0xb4>
 23fa002:	fba0 ce02 	umull	ip, lr, r0, r2
 23fa006:	f04f 0500 	mov.w	r5, #0
 23fa00a:	fbe1 e502 	umlal	lr, r5, r1, r2
 23fa00e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23fa012:	fbe0 e503 	umlal	lr, r5, r0, r3
 23fa016:	f04f 0600 	mov.w	r6, #0
 23fa01a:	fbe1 5603 	umlal	r5, r6, r1, r3
 23fa01e:	f09c 0f00 	teq	ip, #0
 23fa022:	bf18      	it	ne
 23fa024:	f04e 0e01 	orrne.w	lr, lr, #1
 23fa028:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23fa02c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23fa030:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23fa034:	d204      	bcs.n	23fa040 <__aeabi_dmul+0x80>
 23fa036:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23fa03a:	416d      	adcs	r5, r5
 23fa03c:	eb46 0606 	adc.w	r6, r6, r6
 23fa040:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23fa044:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23fa048:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23fa04c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23fa050:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23fa054:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fa058:	bf88      	it	hi
 23fa05a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fa05e:	d81e      	bhi.n	23fa09e <__aeabi_dmul+0xde>
 23fa060:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23fa064:	bf08      	it	eq
 23fa066:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23fa06a:	f150 0000 	adcs.w	r0, r0, #0
 23fa06e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fa072:	bd70      	pop	{r4, r5, r6, pc}
 23fa074:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23fa078:	ea46 0101 	orr.w	r1, r6, r1
 23fa07c:	ea40 0002 	orr.w	r0, r0, r2
 23fa080:	ea81 0103 	eor.w	r1, r1, r3
 23fa084:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23fa088:	bfc2      	ittt	gt
 23fa08a:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fa08e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fa092:	bd70      	popgt	{r4, r5, r6, pc}
 23fa094:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fa098:	f04f 0e00 	mov.w	lr, #0
 23fa09c:	3c01      	subs	r4, #1
 23fa09e:	f300 80ab 	bgt.w	23fa1f8 <__aeabi_dmul+0x238>
 23fa0a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23fa0a6:	bfde      	ittt	le
 23fa0a8:	2000      	movle	r0, #0
 23fa0aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23fa0ae:	bd70      	pople	{r4, r5, r6, pc}
 23fa0b0:	f1c4 0400 	rsb	r4, r4, #0
 23fa0b4:	3c20      	subs	r4, #32
 23fa0b6:	da35      	bge.n	23fa124 <__aeabi_dmul+0x164>
 23fa0b8:	340c      	adds	r4, #12
 23fa0ba:	dc1b      	bgt.n	23fa0f4 <__aeabi_dmul+0x134>
 23fa0bc:	f104 0414 	add.w	r4, r4, #20
 23fa0c0:	f1c4 0520 	rsb	r5, r4, #32
 23fa0c4:	fa00 f305 	lsl.w	r3, r0, r5
 23fa0c8:	fa20 f004 	lsr.w	r0, r0, r4
 23fa0cc:	fa01 f205 	lsl.w	r2, r1, r5
 23fa0d0:	ea40 0002 	orr.w	r0, r0, r2
 23fa0d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23fa0d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fa0dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fa0e0:	fa21 f604 	lsr.w	r6, r1, r4
 23fa0e4:	eb42 0106 	adc.w	r1, r2, r6
 23fa0e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fa0ec:	bf08      	it	eq
 23fa0ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fa0f2:	bd70      	pop	{r4, r5, r6, pc}
 23fa0f4:	f1c4 040c 	rsb	r4, r4, #12
 23fa0f8:	f1c4 0520 	rsb	r5, r4, #32
 23fa0fc:	fa00 f304 	lsl.w	r3, r0, r4
 23fa100:	fa20 f005 	lsr.w	r0, r0, r5
 23fa104:	fa01 f204 	lsl.w	r2, r1, r4
 23fa108:	ea40 0002 	orr.w	r0, r0, r2
 23fa10c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fa110:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fa114:	f141 0100 	adc.w	r1, r1, #0
 23fa118:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fa11c:	bf08      	it	eq
 23fa11e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fa122:	bd70      	pop	{r4, r5, r6, pc}
 23fa124:	f1c4 0520 	rsb	r5, r4, #32
 23fa128:	fa00 f205 	lsl.w	r2, r0, r5
 23fa12c:	ea4e 0e02 	orr.w	lr, lr, r2
 23fa130:	fa20 f304 	lsr.w	r3, r0, r4
 23fa134:	fa01 f205 	lsl.w	r2, r1, r5
 23fa138:	ea43 0302 	orr.w	r3, r3, r2
 23fa13c:	fa21 f004 	lsr.w	r0, r1, r4
 23fa140:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fa144:	fa21 f204 	lsr.w	r2, r1, r4
 23fa148:	ea20 0002 	bic.w	r0, r0, r2
 23fa14c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23fa150:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fa154:	bf08      	it	eq
 23fa156:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fa15a:	bd70      	pop	{r4, r5, r6, pc}
 23fa15c:	f094 0f00 	teq	r4, #0
 23fa160:	d10f      	bne.n	23fa182 <__aeabi_dmul+0x1c2>
 23fa162:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23fa166:	0040      	lsls	r0, r0, #1
 23fa168:	eb41 0101 	adc.w	r1, r1, r1
 23fa16c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fa170:	bf08      	it	eq
 23fa172:	3c01      	subeq	r4, #1
 23fa174:	d0f7      	beq.n	23fa166 <__aeabi_dmul+0x1a6>
 23fa176:	ea41 0106 	orr.w	r1, r1, r6
 23fa17a:	f095 0f00 	teq	r5, #0
 23fa17e:	bf18      	it	ne
 23fa180:	4770      	bxne	lr
 23fa182:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23fa186:	0052      	lsls	r2, r2, #1
 23fa188:	eb43 0303 	adc.w	r3, r3, r3
 23fa18c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23fa190:	bf08      	it	eq
 23fa192:	3d01      	subeq	r5, #1
 23fa194:	d0f7      	beq.n	23fa186 <__aeabi_dmul+0x1c6>
 23fa196:	ea43 0306 	orr.w	r3, r3, r6
 23fa19a:	4770      	bx	lr
 23fa19c:	ea94 0f0c 	teq	r4, ip
 23fa1a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fa1a4:	bf18      	it	ne
 23fa1a6:	ea95 0f0c 	teqne	r5, ip
 23fa1aa:	d00c      	beq.n	23fa1c6 <__aeabi_dmul+0x206>
 23fa1ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fa1b0:	bf18      	it	ne
 23fa1b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fa1b6:	d1d1      	bne.n	23fa15c <__aeabi_dmul+0x19c>
 23fa1b8:	ea81 0103 	eor.w	r1, r1, r3
 23fa1bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fa1c0:	f04f 0000 	mov.w	r0, #0
 23fa1c4:	bd70      	pop	{r4, r5, r6, pc}
 23fa1c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fa1ca:	bf06      	itte	eq
 23fa1cc:	4610      	moveq	r0, r2
 23fa1ce:	4619      	moveq	r1, r3
 23fa1d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fa1d4:	d019      	beq.n	23fa20a <__aeabi_dmul+0x24a>
 23fa1d6:	ea94 0f0c 	teq	r4, ip
 23fa1da:	d102      	bne.n	23fa1e2 <__aeabi_dmul+0x222>
 23fa1dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23fa1e0:	d113      	bne.n	23fa20a <__aeabi_dmul+0x24a>
 23fa1e2:	ea95 0f0c 	teq	r5, ip
 23fa1e6:	d105      	bne.n	23fa1f4 <__aeabi_dmul+0x234>
 23fa1e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23fa1ec:	bf1c      	itt	ne
 23fa1ee:	4610      	movne	r0, r2
 23fa1f0:	4619      	movne	r1, r3
 23fa1f2:	d10a      	bne.n	23fa20a <__aeabi_dmul+0x24a>
 23fa1f4:	ea81 0103 	eor.w	r1, r1, r3
 23fa1f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fa1fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fa200:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fa204:	f04f 0000 	mov.w	r0, #0
 23fa208:	bd70      	pop	{r4, r5, r6, pc}
 23fa20a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fa20e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23fa212:	bd70      	pop	{r4, r5, r6, pc}

023fa214 <__aeabi_ddiv>:
 23fa214:	b570      	push	{r4, r5, r6, lr}
 23fa216:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fa21a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fa21e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fa222:	bf1d      	ittte	ne
 23fa224:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fa228:	ea94 0f0c 	teqne	r4, ip
 23fa22c:	ea95 0f0c 	teqne	r5, ip
 23fa230:	f000 f8a7 	bleq	23fa382 <__aeabi_ddiv+0x16e>
 23fa234:	eba4 0405 	sub.w	r4, r4, r5
 23fa238:	ea81 0e03 	eor.w	lr, r1, r3
 23fa23c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fa240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fa244:	f000 8088 	beq.w	23fa358 <__aeabi_ddiv+0x144>
 23fa248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fa24c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23fa250:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23fa254:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23fa258:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23fa25c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23fa260:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23fa264:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23fa268:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23fa26c:	429d      	cmp	r5, r3
 23fa26e:	bf08      	it	eq
 23fa270:	4296      	cmpeq	r6, r2
 23fa272:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23fa276:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23fa27a:	d202      	bcs.n	23fa282 <__aeabi_ddiv+0x6e>
 23fa27c:	085b      	lsrs	r3, r3, #1
 23fa27e:	ea4f 0232 	mov.w	r2, r2, rrx
 23fa282:	1ab6      	subs	r6, r6, r2
 23fa284:	eb65 0503 	sbc.w	r5, r5, r3
 23fa288:	085b      	lsrs	r3, r3, #1
 23fa28a:	ea4f 0232 	mov.w	r2, r2, rrx
 23fa28e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23fa292:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23fa296:	ebb6 0e02 	subs.w	lr, r6, r2
 23fa29a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fa29e:	bf22      	ittt	cs
 23fa2a0:	1ab6      	subcs	r6, r6, r2
 23fa2a2:	4675      	movcs	r5, lr
 23fa2a4:	ea40 000c 	orrcs.w	r0, r0, ip
 23fa2a8:	085b      	lsrs	r3, r3, #1
 23fa2aa:	ea4f 0232 	mov.w	r2, r2, rrx
 23fa2ae:	ebb6 0e02 	subs.w	lr, r6, r2
 23fa2b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fa2b6:	bf22      	ittt	cs
 23fa2b8:	1ab6      	subcs	r6, r6, r2
 23fa2ba:	4675      	movcs	r5, lr
 23fa2bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23fa2c0:	085b      	lsrs	r3, r3, #1
 23fa2c2:	ea4f 0232 	mov.w	r2, r2, rrx
 23fa2c6:	ebb6 0e02 	subs.w	lr, r6, r2
 23fa2ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fa2ce:	bf22      	ittt	cs
 23fa2d0:	1ab6      	subcs	r6, r6, r2
 23fa2d2:	4675      	movcs	r5, lr
 23fa2d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23fa2d8:	085b      	lsrs	r3, r3, #1
 23fa2da:	ea4f 0232 	mov.w	r2, r2, rrx
 23fa2de:	ebb6 0e02 	subs.w	lr, r6, r2
 23fa2e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fa2e6:	bf22      	ittt	cs
 23fa2e8:	1ab6      	subcs	r6, r6, r2
 23fa2ea:	4675      	movcs	r5, lr
 23fa2ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23fa2f0:	ea55 0e06 	orrs.w	lr, r5, r6
 23fa2f4:	d018      	beq.n	23fa328 <__aeabi_ddiv+0x114>
 23fa2f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23fa2fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23fa2fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23fa302:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23fa306:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23fa30a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23fa30e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23fa312:	d1c0      	bne.n	23fa296 <__aeabi_ddiv+0x82>
 23fa314:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fa318:	d10b      	bne.n	23fa332 <__aeabi_ddiv+0x11e>
 23fa31a:	ea41 0100 	orr.w	r1, r1, r0
 23fa31e:	f04f 0000 	mov.w	r0, #0
 23fa322:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23fa326:	e7b6      	b.n	23fa296 <__aeabi_ddiv+0x82>
 23fa328:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fa32c:	bf04      	itt	eq
 23fa32e:	4301      	orreq	r1, r0
 23fa330:	2000      	moveq	r0, #0
 23fa332:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fa336:	bf88      	it	hi
 23fa338:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fa33c:	f63f aeaf 	bhi.w	23fa09e <__aeabi_dmul+0xde>
 23fa340:	ebb5 0c03 	subs.w	ip, r5, r3
 23fa344:	bf04      	itt	eq
 23fa346:	ebb6 0c02 	subseq.w	ip, r6, r2
 23fa34a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fa34e:	f150 0000 	adcs.w	r0, r0, #0
 23fa352:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fa356:	bd70      	pop	{r4, r5, r6, pc}
 23fa358:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23fa35c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23fa360:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23fa364:	bfc2      	ittt	gt
 23fa366:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fa36a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fa36e:	bd70      	popgt	{r4, r5, r6, pc}
 23fa370:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fa374:	f04f 0e00 	mov.w	lr, #0
 23fa378:	3c01      	subs	r4, #1
 23fa37a:	e690      	b.n	23fa09e <__aeabi_dmul+0xde>
 23fa37c:	ea45 0e06 	orr.w	lr, r5, r6
 23fa380:	e68d      	b.n	23fa09e <__aeabi_dmul+0xde>
 23fa382:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fa386:	ea94 0f0c 	teq	r4, ip
 23fa38a:	bf08      	it	eq
 23fa38c:	ea95 0f0c 	teqeq	r5, ip
 23fa390:	f43f af3b 	beq.w	23fa20a <__aeabi_dmul+0x24a>
 23fa394:	ea94 0f0c 	teq	r4, ip
 23fa398:	d10a      	bne.n	23fa3b0 <__aeabi_ddiv+0x19c>
 23fa39a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fa39e:	f47f af34 	bne.w	23fa20a <__aeabi_dmul+0x24a>
 23fa3a2:	ea95 0f0c 	teq	r5, ip
 23fa3a6:	f47f af25 	bne.w	23fa1f4 <__aeabi_dmul+0x234>
 23fa3aa:	4610      	mov	r0, r2
 23fa3ac:	4619      	mov	r1, r3
 23fa3ae:	e72c      	b.n	23fa20a <__aeabi_dmul+0x24a>
 23fa3b0:	ea95 0f0c 	teq	r5, ip
 23fa3b4:	d106      	bne.n	23fa3c4 <__aeabi_ddiv+0x1b0>
 23fa3b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fa3ba:	f43f aefd 	beq.w	23fa1b8 <__aeabi_dmul+0x1f8>
 23fa3be:	4610      	mov	r0, r2
 23fa3c0:	4619      	mov	r1, r3
 23fa3c2:	e722      	b.n	23fa20a <__aeabi_dmul+0x24a>
 23fa3c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fa3c8:	bf18      	it	ne
 23fa3ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fa3ce:	f47f aec5 	bne.w	23fa15c <__aeabi_dmul+0x19c>
 23fa3d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23fa3d6:	f47f af0d 	bne.w	23fa1f4 <__aeabi_dmul+0x234>
 23fa3da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23fa3de:	f47f aeeb 	bne.w	23fa1b8 <__aeabi_dmul+0x1f8>
 23fa3e2:	e712      	b.n	23fa20a <__aeabi_dmul+0x24a>

023fa3e4 <__gedf2>:
 23fa3e4:	f04f 3cff 	mov.w	ip, #4294967295
 23fa3e8:	e006      	b.n	23fa3f8 <__cmpdf2+0x4>
 23fa3ea:	bf00      	nop

023fa3ec <__ledf2>:
 23fa3ec:	f04f 0c01 	mov.w	ip, #1
 23fa3f0:	e002      	b.n	23fa3f8 <__cmpdf2+0x4>
 23fa3f2:	bf00      	nop

023fa3f4 <__cmpdf2>:
 23fa3f4:	f04f 0c01 	mov.w	ip, #1
 23fa3f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 23fa3fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fa400:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fa404:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fa408:	bf18      	it	ne
 23fa40a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 23fa40e:	d01b      	beq.n	23fa448 <__cmpdf2+0x54>
 23fa410:	b001      	add	sp, #4
 23fa412:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 23fa416:	bf0c      	ite	eq
 23fa418:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 23fa41c:	ea91 0f03 	teqne	r1, r3
 23fa420:	bf02      	ittt	eq
 23fa422:	ea90 0f02 	teqeq	r0, r2
 23fa426:	2000      	moveq	r0, #0
 23fa428:	4770      	bxeq	lr
 23fa42a:	f110 0f00 	cmn.w	r0, #0
 23fa42e:	ea91 0f03 	teq	r1, r3
 23fa432:	bf58      	it	pl
 23fa434:	4299      	cmppl	r1, r3
 23fa436:	bf08      	it	eq
 23fa438:	4290      	cmpeq	r0, r2
 23fa43a:	bf2c      	ite	cs
 23fa43c:	17d8      	asrcs	r0, r3, #31
 23fa43e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 23fa442:	f040 0001 	orr.w	r0, r0, #1
 23fa446:	4770      	bx	lr
 23fa448:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fa44c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fa450:	d102      	bne.n	23fa458 <__cmpdf2+0x64>
 23fa452:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23fa456:	d107      	bne.n	23fa468 <__cmpdf2+0x74>
 23fa458:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fa45c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fa460:	d1d6      	bne.n	23fa410 <__cmpdf2+0x1c>
 23fa462:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23fa466:	d0d3      	beq.n	23fa410 <__cmpdf2+0x1c>
 23fa468:	f85d 0b04 	ldr.w	r0, [sp], #4
 23fa46c:	4770      	bx	lr
 23fa46e:	bf00      	nop

023fa470 <__aeabi_cdrcmple>:
 23fa470:	4684      	mov	ip, r0
 23fa472:	4610      	mov	r0, r2
 23fa474:	4662      	mov	r2, ip
 23fa476:	468c      	mov	ip, r1
 23fa478:	4619      	mov	r1, r3
 23fa47a:	4663      	mov	r3, ip
 23fa47c:	e000      	b.n	23fa480 <__aeabi_cdcmpeq>
 23fa47e:	bf00      	nop

023fa480 <__aeabi_cdcmpeq>:
 23fa480:	b501      	push	{r0, lr}
 23fa482:	f7ff ffb7 	bl	23fa3f4 <__cmpdf2>
 23fa486:	2800      	cmp	r0, #0
 23fa488:	bf48      	it	mi
 23fa48a:	f110 0f00 	cmnmi.w	r0, #0
 23fa48e:	bd01      	pop	{r0, pc}

023fa490 <__aeabi_dcmpeq>:
 23fa490:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fa494:	f7ff fff4 	bl	23fa480 <__aeabi_cdcmpeq>
 23fa498:	bf0c      	ite	eq
 23fa49a:	2001      	moveq	r0, #1
 23fa49c:	2000      	movne	r0, #0
 23fa49e:	f85d fb08 	ldr.w	pc, [sp], #8
 23fa4a2:	bf00      	nop

023fa4a4 <__aeabi_dcmplt>:
 23fa4a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fa4a8:	f7ff ffea 	bl	23fa480 <__aeabi_cdcmpeq>
 23fa4ac:	bf34      	ite	cc
 23fa4ae:	2001      	movcc	r0, #1
 23fa4b0:	2000      	movcs	r0, #0
 23fa4b2:	f85d fb08 	ldr.w	pc, [sp], #8
 23fa4b6:	bf00      	nop

023fa4b8 <__aeabi_dcmple>:
 23fa4b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fa4bc:	f7ff ffe0 	bl	23fa480 <__aeabi_cdcmpeq>
 23fa4c0:	bf94      	ite	ls
 23fa4c2:	2001      	movls	r0, #1
 23fa4c4:	2000      	movhi	r0, #0
 23fa4c6:	f85d fb08 	ldr.w	pc, [sp], #8
 23fa4ca:	bf00      	nop

023fa4cc <__aeabi_dcmpge>:
 23fa4cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fa4d0:	f7ff ffce 	bl	23fa470 <__aeabi_cdrcmple>
 23fa4d4:	bf94      	ite	ls
 23fa4d6:	2001      	movls	r0, #1
 23fa4d8:	2000      	movhi	r0, #0
 23fa4da:	f85d fb08 	ldr.w	pc, [sp], #8
 23fa4de:	bf00      	nop

023fa4e0 <__aeabi_dcmpgt>:
 23fa4e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fa4e4:	f7ff ffc4 	bl	23fa470 <__aeabi_cdrcmple>
 23fa4e8:	bf34      	ite	cc
 23fa4ea:	2001      	movcc	r0, #1
 23fa4ec:	2000      	movcs	r0, #0
 23fa4ee:	f85d fb08 	ldr.w	pc, [sp], #8
 23fa4f2:	bf00      	nop

023fa4f4 <__aeabi_dcmpun>:
 23fa4f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fa4f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fa4fc:	d102      	bne.n	23fa504 <__aeabi_dcmpun+0x10>
 23fa4fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23fa502:	d10a      	bne.n	23fa51a <__aeabi_dcmpun+0x26>
 23fa504:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fa508:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fa50c:	d102      	bne.n	23fa514 <__aeabi_dcmpun+0x20>
 23fa50e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23fa512:	d102      	bne.n	23fa51a <__aeabi_dcmpun+0x26>
 23fa514:	f04f 0000 	mov.w	r0, #0
 23fa518:	4770      	bx	lr
 23fa51a:	f04f 0001 	mov.w	r0, #1
 23fa51e:	4770      	bx	lr

023fa520 <__aeabi_d2iz>:
 23fa520:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23fa524:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23fa528:	d215      	bcs.n	23fa556 <__aeabi_d2iz+0x36>
 23fa52a:	d511      	bpl.n	23fa550 <__aeabi_d2iz+0x30>
 23fa52c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23fa530:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23fa534:	d912      	bls.n	23fa55c <__aeabi_d2iz+0x3c>
 23fa536:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fa53a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23fa53e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23fa542:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23fa546:	fa23 f002 	lsr.w	r0, r3, r2
 23fa54a:	bf18      	it	ne
 23fa54c:	4240      	negne	r0, r0
 23fa54e:	4770      	bx	lr
 23fa550:	f04f 0000 	mov.w	r0, #0
 23fa554:	4770      	bx	lr
 23fa556:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23fa55a:	d105      	bne.n	23fa568 <__aeabi_d2iz+0x48>
 23fa55c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 23fa560:	bf08      	it	eq
 23fa562:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 23fa566:	4770      	bx	lr
 23fa568:	f04f 0000 	mov.w	r0, #0
 23fa56c:	4770      	bx	lr
 23fa56e:	bf00      	nop

023fa570 <__aeabi_d2uiz>:
 23fa570:	004a      	lsls	r2, r1, #1
 23fa572:	d211      	bcs.n	23fa598 <__aeabi_d2uiz+0x28>
 23fa574:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23fa578:	d211      	bcs.n	23fa59e <__aeabi_d2uiz+0x2e>
 23fa57a:	d50d      	bpl.n	23fa598 <__aeabi_d2uiz+0x28>
 23fa57c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23fa580:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23fa584:	d40e      	bmi.n	23fa5a4 <__aeabi_d2uiz+0x34>
 23fa586:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fa58a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23fa58e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23fa592:	fa23 f002 	lsr.w	r0, r3, r2
 23fa596:	4770      	bx	lr
 23fa598:	f04f 0000 	mov.w	r0, #0
 23fa59c:	4770      	bx	lr
 23fa59e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23fa5a2:	d102      	bne.n	23fa5aa <__aeabi_d2uiz+0x3a>
 23fa5a4:	f04f 30ff 	mov.w	r0, #4294967295
 23fa5a8:	4770      	bx	lr
 23fa5aa:	f04f 0000 	mov.w	r0, #0
 23fa5ae:	4770      	bx	lr

023fa5b0 <strcmp>:
 23fa5b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fa5b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 23fa5b8:	2a01      	cmp	r2, #1
 23fa5ba:	bf28      	it	cs
 23fa5bc:	429a      	cmpcs	r2, r3
 23fa5be:	d0f7      	beq.n	23fa5b0 <strcmp>
 23fa5c0:	1ad0      	subs	r0, r2, r3
 23fa5c2:	4770      	bx	lr

023fa5c4 <strlen>:
 23fa5c4:	4603      	mov	r3, r0
 23fa5c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fa5ca:	2a00      	cmp	r2, #0
 23fa5cc:	d1fb      	bne.n	23fa5c6 <strlen+0x2>
 23fa5ce:	1a18      	subs	r0, r3, r0
 23fa5d0:	3801      	subs	r0, #1
 23fa5d2:	4770      	bx	lr

023fa5d4 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fa5d4:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fa5d6:	f003 fb73 	bl	23fdcc0 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fa5da:	2500      	movs	r5, #0
 23fa5dc:	4e05      	ldr	r6, [pc, #20]	; (23fa5f4 <module_user_init+0x20>)
 23fa5de:	4c06      	ldr	r4, [pc, #24]	; (23fa5f8 <module_user_init+0x24>)
 23fa5e0:	1ba4      	subs	r4, r4, r6
 23fa5e2:	08a4      	lsrs	r4, r4, #2
 23fa5e4:	42ac      	cmp	r4, r5
 23fa5e6:	d100      	bne.n	23fa5ea <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fa5e8:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fa5ea:	f856 3b04 	ldr.w	r3, [r6], #4
 23fa5ee:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fa5f0:	3501      	adds	r5, #1
 23fa5f2:	e7f7      	b.n	23fa5e4 <module_user_init+0x10>
 23fa5f4:	023fffd0 	.word	0x023fffd0
 23fa5f8:	023ffff8 	.word	0x023ffff8

023fa5fc <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fa5fc:	f000 bbb0 	b.w	23fad60 <setup>

023fa600 <module_user_loop>:
}

void module_user_loop() {
 23fa600:	b508      	push	{r3, lr}
    loop();
 23fa602:	f000 fc41 	bl	23fae88 <loop>
    _post_loop();
}
 23fa606:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fa60a:	f003 bb11 	b.w	23fdc30 <_post_loop>

023fa60e <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23fa60e:	f002 beaf 	b.w	23fd370 <malloc>

023fa612 <_Znaj>:
 23fa612:	f002 bead 	b.w	23fd370 <malloc>

023fa616 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fa616:	f002 beb9 	b.w	23fd38c <free>
	...

023fa61c <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fa61c:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23fa61e:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fa620:	4a02      	ldr	r2, [pc, #8]	; (23fa62c <__cxa_pure_virtual+0x10>)
 23fa622:	4903      	ldr	r1, [pc, #12]	; (23fa630 <__cxa_pure_virtual+0x14>)
 23fa624:	f002 fd46 	bl	23fd0b4 <panic_>
  while (1);
 23fa628:	e7fe      	b.n	23fa628 <__cxa_pure_virtual+0xc>
 23fa62a:	bf00      	nop
 23fa62c:	023fca95 	.word	0x023fca95
 23fa630:	023ff098 	.word	0x023ff098

023fa634 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fa634:	7800      	ldrb	r0, [r0, #0]
 23fa636:	fab0 f080 	clz	r0, r0
 23fa63a:	0940      	lsrs	r0, r0, #5
 23fa63c:	4770      	bx	lr

023fa63e <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fa63e:	2301      	movs	r3, #1
 23fa640:	7003      	strb	r3, [r0, #0]
 23fa642:	4770      	bx	lr

023fa644 <_ZN7Encoder16interruptHandlerEv>:
		state = (s >> 2);
	}
*/

private:
	void interruptHandler() {
 23fa644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fa648:	4604      	mov	r4, r0
		uint8_t p1val = DIRECT_PIN_READ(pin1_register, pin1_bitmask);
 23fa64a:	6885      	ldr	r5, [r0, #8]
#ifdef	__cplusplus
extern "C" {
#endif

__attribute__((always_inline)) inline const hal_pin_info_t* fastPinGetPinmap() {
    static const hal_pin_info_t* pinMap = hal_pin_map();
 23fa64c:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 23fa724 <_ZN7Encoder16interruptHandlerEv+0xe0>
 23fa650:	e8d8 3f8f 	ldab	r3, [r8]
 23fa654:	f013 0f01 	tst.w	r3, #1
 23fa658:	4e2f      	ldr	r6, [pc, #188]	; (23fa718 <_ZN7Encoder16interruptHandlerEv+0xd4>)
 23fa65a:	d109      	bne.n	23fa670 <_ZN7Encoder16interruptHandlerEv+0x2c>
 23fa65c:	4640      	mov	r0, r8
 23fa65e:	f7ff ffe9 	bl	23fa634 <__cxa_guard_acquire>
 23fa662:	b128      	cbz	r0, 23fa670 <_ZN7Encoder16interruptHandlerEv+0x2c>
 23fa664:	f002 f97c 	bl	23fc960 <hal_pin_map>
 23fa668:	6030      	str	r0, [r6, #0]
 23fa66a:	4640      	mov	r0, r8
 23fa66c:	f7ff ffe7 	bl	23fa63e <__cxa_guard_release>
    gpiobase->PORT[0].DDR |= (1 << pin_info.gpio_pin);
}

inline int32_t pinReadFast(hal_pin_t _pin)
{
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23fa670:	220c      	movs	r2, #12
 23fa672:	b2ab      	uxth	r3, r5
 23fa674:	4353      	muls	r3, r2
 23fa676:	6832      	ldr	r2, [r6, #0]
		uint8_t p2val = DIRECT_PIN_READ(pin2_register, pin2_bitmask);
 23fa678:	68e5      	ldr	r5, [r4, #12]

    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23fa67a:	5cd0      	ldrb	r0, [r2, r3]
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23fa67c:	18d1      	adds	r1, r2, r3
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23fa67e:	4a27      	ldr	r2, [pc, #156]	; (23fa71c <_ZN7Encoder16interruptHandlerEv+0xd8>)
 23fa680:	4b27      	ldr	r3, [pc, #156]	; (23fa720 <_ZN7Encoder16interruptHandlerEv+0xdc>)
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23fa682:	7849      	ldrb	r1, [r1, #1]
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23fa684:	2800      	cmp	r0, #0
 23fa686:	bf18      	it	ne
 23fa688:	4613      	movne	r3, r2
    return ((gpiobase->EXT_PORT[0] >> pin_info.gpio_pin) & 1UL);
 23fa68a:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 23fa68c:	40cf      	lsrs	r7, r1
 23fa68e:	f007 0701 	and.w	r7, r7, #1
    static const hal_pin_info_t* pinMap = hal_pin_map();
 23fa692:	e8d8 3f8f 	ldab	r3, [r8]
 23fa696:	07db      	lsls	r3, r3, #31
 23fa698:	d409      	bmi.n	23fa6ae <_ZN7Encoder16interruptHandlerEv+0x6a>
 23fa69a:	4822      	ldr	r0, [pc, #136]	; (23fa724 <_ZN7Encoder16interruptHandlerEv+0xe0>)
 23fa69c:	f7ff ffca 	bl	23fa634 <__cxa_guard_acquire>
 23fa6a0:	b128      	cbz	r0, 23fa6ae <_ZN7Encoder16interruptHandlerEv+0x6a>
 23fa6a2:	f002 f95d 	bl	23fc960 <hal_pin_map>
 23fa6a6:	6030      	str	r0, [r6, #0]
 23fa6a8:	481e      	ldr	r0, [pc, #120]	; (23fa724 <_ZN7Encoder16interruptHandlerEv+0xe0>)
 23fa6aa:	f7ff ffc8 	bl	23fa63e <__cxa_guard_release>
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23fa6ae:	220c      	movs	r2, #12
 23fa6b0:	b2ab      	uxth	r3, r5
 23fa6b2:	4353      	muls	r3, r2
 23fa6b4:	6831      	ldr	r1, [r6, #0]
 23fa6b6:	18ca      	adds	r2, r1, r3
 23fa6b8:	7850      	ldrb	r0, [r2, #1]
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23fa6ba:	5cc9      	ldrb	r1, [r1, r3]
 23fa6bc:	4a17      	ldr	r2, [pc, #92]	; (23fa71c <_ZN7Encoder16interruptHandlerEv+0xd8>)
 23fa6be:	4b18      	ldr	r3, [pc, #96]	; (23fa720 <_ZN7Encoder16interruptHandlerEv+0xdc>)
 23fa6c0:	2900      	cmp	r1, #0
 23fa6c2:	bf18      	it	ne
 23fa6c4:	4613      	movne	r3, r2
    return ((gpiobase->EXT_PORT[0] >> pin_info.gpio_pin) & 1UL);
 23fa6c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
		uint8_t newState = state & 3;
 23fa6c8:	7c23      	ldrb	r3, [r4, #16]
 23fa6ca:	40c2      	lsrs	r2, r0
 23fa6cc:	f002 0201 	and.w	r2, r2, #1
 23fa6d0:	f003 0303 	and.w	r3, r3, #3
		if (p1val) newState |= 4;
 23fa6d4:	b10f      	cbz	r7, 23fa6da <_ZN7Encoder16interruptHandlerEv+0x96>
 23fa6d6:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) newState |= 8;
 23fa6da:	b10a      	cbz	r2, 23fa6e0 <_ZN7Encoder16interruptHandlerEv+0x9c>
 23fa6dc:	f043 0308 	orr.w	r3, r3, #8
		state = (newState >> 2);
 23fa6e0:	089a      	lsrs	r2, r3, #2
 23fa6e2:	3b01      	subs	r3, #1
 23fa6e4:	7422      	strb	r2, [r4, #16]
		switch (newState) {
 23fa6e6:	2b0d      	cmp	r3, #13
 23fa6e8:	d80b      	bhi.n	23fa702 <_ZN7Encoder16interruptHandlerEv+0xbe>
 23fa6ea:	e8df f003 	tbb	[pc, r3]
 23fa6ee:	0c07      	.short	0x0c07
 23fa6f0:	120a0c0f 	.word	0x120a0c0f
 23fa6f4:	0a120707 	.word	0x0a120707
 23fa6f8:	070c0f0c 	.word	0x070c0f0c
			case 1: case 7: case 8: case 14:
				position++;
 23fa6fc:	6963      	ldr	r3, [r4, #20]
 23fa6fe:	3301      	adds	r3, #1
				return;
			case 3: case 12:
				position += 2;
				return;
			case 6: case 9:
				position -= 2;
 23fa700:	6163      	str	r3, [r4, #20]
				return;
		}
	}
 23fa702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				position--;
 23fa706:	6963      	ldr	r3, [r4, #20]
 23fa708:	3b01      	subs	r3, #1
 23fa70a:	e7f9      	b.n	23fa700 <_ZN7Encoder16interruptHandlerEv+0xbc>
				position += 2;
 23fa70c:	6963      	ldr	r3, [r4, #20]
 23fa70e:	3302      	adds	r3, #2
 23fa710:	e7f6      	b.n	23fa700 <_ZN7Encoder16interruptHandlerEv+0xbc>
				position -= 2;
 23fa712:	6963      	ldr	r3, [r4, #20]
 23fa714:	3b02      	subs	r3, #2
 23fa716:	e7f3      	b.n	23fa700 <_ZN7Encoder16interruptHandlerEv+0xbc>
 23fa718:	1007ac88 	.word	0x1007ac88
 23fa71c:	48014400 	.word	0x48014400
 23fa720:	48014000 	.word	0x48014000
 23fa724:	1007ac84 	.word	0x1007ac84

023fa728 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:

} // namespace particle

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
inline size_t Print::print(T n, int base)
 23fa728:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 23fa72a:	1e0c      	subs	r4, r1, #0
inline size_t Print::print(T n, int base)
 23fa72c:	4606      	mov	r6, r0
 23fa72e:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
 23fa730:	da0b      	bge.n	23fa74a <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
 23fa732:	2a0a      	cmp	r2, #10
 23fa734:	d109      	bne.n	23fa74a <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
 23fa736:	212d      	movs	r1, #45	; 0x2d
 23fa738:	f003 f99e 	bl	23fda78 <_ZN5Print5printEc>
            val = -n;
 23fa73c:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fa73e:	4630      	mov	r0, r6
 23fa740:	b2ea      	uxtb	r2, r5
    }
}
 23fa742:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
 23fa746:	f003 b9b0 	b.w	23fdaaa <_ZN5Print11printNumberEmh>
            val = n;
 23fa74a:	4621      	mov	r1, r4
 23fa74c:	e7f7      	b.n	23fa73e <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>

023fa74e <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fa74e:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
 23fa750:	6803      	ldr	r3, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 23fa752:	685a      	ldr	r2, [r3, #4]
 23fa754:	6899      	ldr	r1, [r3, #8]
 23fa756:	1054      	asrs	r4, r2, #1
 23fa758:	eb01 0062 	add.w	r0, r1, r2, asr #1
 23fa75c:	07d2      	lsls	r2, r2, #31
 23fa75e:	bf48      	it	mi
 23fa760:	590a      	ldrmi	r2, [r1, r4]
 23fa762:	681b      	ldr	r3, [r3, #0]
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
 23fa764:	f85d 4b04 	ldr.w	r4, [sp], #4
 23fa768:	bf48      	it	mi
 23fa76a:	58d3      	ldrmi	r3, [r2, r3]
 23fa76c:	4718      	bx	r3

023fa76e <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	switch (__op)
 23fa76e:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fa770:	b538      	push	{r3, r4, r5, lr}
 23fa772:	4604      	mov	r4, r0
	switch (__op)
 23fa774:	d102      	bne.n	23fa77c <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
 23fa776:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
 23fa778:	6023      	str	r3, [r4, #0]
	}
 23fa77a:	e003      	b.n	23fa784 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	  switch (__op)
 23fa77c:	2a02      	cmp	r2, #2
 23fa77e:	d003      	beq.n	23fa788 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
 23fa780:	2a03      	cmp	r2, #3
 23fa782:	d00d      	beq.n	23fa7a0 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
      }
 23fa784:	2000      	movs	r0, #0
 23fa786:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 23fa788:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
 23fa78a:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fa78c:	f7ff ff3f 	bl	23fa60e <_Znwj>
 23fa790:	4603      	mov	r3, r0
 23fa792:	2800      	cmp	r0, #0
 23fa794:	d0f0      	beq.n	23fa778 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
 23fa796:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 23fa79a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 23fa79e:	e7eb      	b.n	23fa778 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
 23fa7a0:	6800      	ldr	r0, [r0, #0]
 23fa7a2:	2800      	cmp	r0, #0
 23fa7a4:	d0ee      	beq.n	23fa784 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
 23fa7a6:	210c      	movs	r1, #12
 23fa7a8:	f7ff ff35 	bl	23fa616 <_ZdlPvj>
 23fa7ac:	e7ea      	b.n	23fa784 <_ZNSt17_Function_handlerIFvvESt5_BindIFM7EncoderFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	...

023fa7b0 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0>:
 * GPIO Interrupts
 */
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
 23fa7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fa7b2:	461f      	mov	r7, r3
    _Function_base() : _M_manager(nullptr) { }
 23fa7b4:	2300      	movs	r3, #0
 23fa7b6:	b08d      	sub	sp, #52	; 0x34
 23fa7b8:	ad02      	add	r5, sp, #8
 23fa7ba:	e885 0006 	stmia.w	r5, {r1, r2}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23fa7be:	ac05      	add	r4, sp, #20
 23fa7c0:	4606      	mov	r6, r0
 23fa7c2:	e895 0003 	ldmia.w	r5, {r0, r1}
 23fa7c6:	e884 0005 	stmia.w	r4, {r0, r2}
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fa7ca:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
 23fa7cc:	930a      	str	r3, [sp, #40]	; 0x28
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fa7ce:	f7ff ff1e 	bl	23fa60e <_Znwj>
 23fa7d2:	4602      	mov	r2, r0
 23fa7d4:	b120      	cbz	r0, 23fa7e0 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0+0x30>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
 23fa7d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 23fa7da:	e882 0003 	stmia.w	r2, {r0, r1}
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23fa7de:	6097      	str	r7, [r2, #8]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 23fa7e0:	4b0b      	ldr	r3, [pc, #44]	; (23fa810 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0+0x60>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fa7e2:	9208      	str	r2, [sp, #32]
	    _M_invoker = &_My_handler::_M_invoke;
 23fa7e4:	930b      	str	r3, [sp, #44]	; 0x2c
	    _M_manager = &_My_handler::_M_manager;
 23fa7e6:	4b0b      	ldr	r3, [pc, #44]	; (23fa814 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0+0x64>)
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
 23fa7e8:	4630      	mov	r0, r6
 23fa7ea:	930a      	str	r3, [sp, #40]	; 0x28
 23fa7ec:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 23fa7f0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 23fa7f4:	9300      	str	r3, [sp, #0]
 23fa7f6:	a908      	add	r1, sp, #32
 23fa7f8:	f99d 304c 	ldrsb.w	r3, [sp, #76]	; 0x4c
 23fa7fc:	f003 fbd4 	bl	23fdfa8 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>
      if (_M_manager)
 23fa800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23fa802:	b11b      	cbz	r3, 23fa80c <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0+0x5c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fa804:	a908      	add	r1, sp, #32
 23fa806:	2203      	movs	r2, #3
 23fa808:	4608      	mov	r0, r1
 23fa80a:	4798      	blx	r3
}
 23fa80c:	b00d      	add	sp, #52	; 0x34
 23fa80e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fa810:	023fa74f 	.word	0x023fa74f
 23fa814:	023fa76f 	.word	0x023fa76f

023fa818 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 23fa818:	b40e      	push	{r1, r2, r3}
 23fa81a:	b503      	push	{r0, r1, lr}
 23fa81c:	ab03      	add	r3, sp, #12
 23fa81e:	f853 2b04 	ldr.w	r2, [r3], #4
        auto r = this->vprintf(false, format, args);
 23fa822:	2100      	movs	r1, #0
        va_start(args, format);
 23fa824:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 23fa826:	f003 f95e 	bl	23fdae6 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
 23fa82a:	b002      	add	sp, #8
 23fa82c:	f85d eb04 	ldr.w	lr, [sp], #4
 23fa830:	b003      	add	sp, #12
 23fa832:	4770      	bx	lr

023fa834 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 23fa834:	b538      	push	{r3, r4, r5, lr}
 23fa836:	4b0b      	ldr	r3, [pc, #44]	; (23fa864 <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 23fa838:	6984      	ldr	r4, [r0, #24]
 23fa83a:	4605      	mov	r5, r0
 23fa83c:	6003      	str	r3, [r0, #0]
 23fa83e:	b17c      	cbz	r4, 23fa860 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
 23fa840:	6863      	ldr	r3, [r4, #4]
 23fa842:	3b01      	subs	r3, #1
 23fa844:	6063      	str	r3, [r4, #4]
 23fa846:	b95b      	cbnz	r3, 23fa860 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
 23fa848:	6823      	ldr	r3, [r4, #0]
 23fa84a:	4620      	mov	r0, r4
 23fa84c:	689b      	ldr	r3, [r3, #8]
 23fa84e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fa850:	68a3      	ldr	r3, [r4, #8]
 23fa852:	3b01      	subs	r3, #1
 23fa854:	60a3      	str	r3, [r4, #8]
 23fa856:	b91b      	cbnz	r3, 23fa860 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 23fa858:	6823      	ldr	r3, [r4, #0]
 23fa85a:	4620      	mov	r0, r4
 23fa85c:	68db      	ldr	r3, [r3, #12]
 23fa85e:	4798      	blx	r3
 23fa860:	4628      	mov	r0, r5
 23fa862:	bd38      	pop	{r3, r4, r5, pc}
 23fa864:	023ffd68 	.word	0x023ffd68

023fa868 <_ZN9TCPClientD0Ev>:
 23fa868:	b510      	push	{r4, lr}
 23fa86a:	4604      	mov	r4, r0
 23fa86c:	f7ff ffe2 	bl	23fa834 <_ZN9TCPClientD1Ev>
 23fa870:	4620      	mov	r0, r4
 23fa872:	211c      	movs	r1, #28
 23fa874:	f7ff fecf 	bl	23fa616 <_ZdlPvj>
 23fa878:	4620      	mov	r0, r4
 23fa87a:	bd10      	pop	{r4, pc}

023fa87c <_Z6setHueibiii>:
TCPClient HueClient;

bool setHue(int lightNum, bool HueOn, int HueColor=HueBlue, int HueBright=255, int HueSat=255);
bool getHue(int lightNum);

bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat) {
 23fa87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fa880:	4605      	mov	r5, r0
 23fa882:	b08c      	sub	sp, #48	; 0x30
 23fa884:	460f      	mov	r7, r1

  static int PrevLightNum,PrevOn, PrevColor, PrevBright, PrevSat;

  String command = "";  
 23fa886:	4668      	mov	r0, sp
 23fa888:	496a      	ldr	r1, [pc, #424]	; (23faa34 <_Z6setHueibiii+0x1b8>)
bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat) {
 23fa88a:	4614      	mov	r4, r2
 23fa88c:	461e      	mov	r6, r3
 23fa88e:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  String command = "";  
 23fa892:	f003 f813 	bl	23fd8bc <_ZN6StringC1EPK19__FlashStringHelper>

  if((lightNum==PrevLightNum)&&(HueOn==PrevOn)&&(HueColor==PrevColor)&&(HueBright==PrevBright)&&(HueSat==PrevSat)) {
 23fa896:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 23faa88 <_Z6setHueibiii+0x20c>
 23fa89a:	4967      	ldr	r1, [pc, #412]	; (23faa38 <_Z6setHueibiii+0x1bc>)
 23fa89c:	f8de 3000 	ldr.w	r3, [lr]
 23fa8a0:	4866      	ldr	r0, [pc, #408]	; (23faa3c <_Z6setHueibiii+0x1c0>)
 23fa8a2:	42ab      	cmp	r3, r5
 23fa8a4:	4a66      	ldr	r2, [pc, #408]	; (23faa40 <_Z6setHueibiii+0x1c4>)
 23fa8a6:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 23faa8c <_Z6setHueibiii+0x210>
 23fa8aa:	d119      	bne.n	23fa8e0 <_Z6setHueibiii+0x64>
 23fa8ac:	680b      	ldr	r3, [r1, #0]
 23fa8ae:	42bb      	cmp	r3, r7
 23fa8b0:	d116      	bne.n	23fa8e0 <_Z6setHueibiii+0x64>
 23fa8b2:	6803      	ldr	r3, [r0, #0]
 23fa8b4:	42a3      	cmp	r3, r4
 23fa8b6:	d113      	bne.n	23fa8e0 <_Z6setHueibiii+0x64>
 23fa8b8:	6813      	ldr	r3, [r2, #0]
 23fa8ba:	42b3      	cmp	r3, r6
 23fa8bc:	d110      	bne.n	23fa8e0 <_Z6setHueibiii+0x64>
 23fa8be:	f8dc 3000 	ldr.w	r3, [ip]
 23fa8c2:	4543      	cmp	r3, r8
 23fa8c4:	d10c      	bne.n	23fa8e0 <_Z6setHueibiii+0x64>
    Serial.printf("No Change - Cancelling CMD\n");
 23fa8c6:	f003 fb1d 	bl	23fdf04 <_Z16_fetch_usbserialv>
 23fa8ca:	495e      	ldr	r1, [pc, #376]	; (23faa44 <_Z6setHueibiii+0x1c8>)
 23fa8cc:	f7ff ffa4 	bl	23fa818 <_ZN5Print6printfEPKcz>
    return false;
 23fa8d0:	2400      	movs	r4, #0
  String command = "";  
 23fa8d2:	4668      	mov	r0, sp
 23fa8d4:	f002 ffa7 	bl	23fd826 <_ZN6StringD1Ev>
    //HueClient.stop();
    return true;  // command executed
  }
  else
    return false;  // command failed
}
 23fa8d8:	4620      	mov	r0, r4
 23fa8da:	b00c      	add	sp, #48	; 0x30
 23fa8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  PrevLightNum = lightNum;
 23fa8e0:	f8ce 5000 	str.w	r5, [lr]
  PrevOn = HueOn;
 23fa8e4:	600f      	str	r7, [r1, #0]
  PrevColor=HueColor;
 23fa8e6:	6004      	str	r4, [r0, #0]
  PrevBright=HueBright;
 23fa8e8:	6016      	str	r6, [r2, #0]
  PrevSat=HueSat;
 23fa8ea:	f8cc 8000 	str.w	r8, [ip]
  if(HueOn == true) {
 23fa8ee:	2f00      	cmp	r7, #0
 23fa8f0:	f000 809b 	beq.w	23faa2a <_Z6setHueibiii+0x1ae>
    command = "{\"on\":true,\"sat\":";
 23fa8f4:	4954      	ldr	r1, [pc, #336]	; (23faa48 <_Z6setHueibiii+0x1cc>)
 23fa8f6:	4668      	mov	r0, sp
 23fa8f8:	f003 f80e 	bl	23fd918 <_ZN6StringaSEPKc>
};

class StringSumHelper : public String
{
public:
    StringSumHelper(const String &s) : String(s) {}
 23fa8fc:	4669      	mov	r1, sp
 23fa8fe:	a808      	add	r0, sp, #32
 23fa900:	f002 ffff 	bl	23fd902 <_ZN6StringC1ERKS_>
    command = command + String(HueSat) + ",\"bri\":";
 23fa904:	220a      	movs	r2, #10
 23fa906:	4641      	mov	r1, r8
 23fa908:	a804      	add	r0, sp, #16
 23fa90a:	f003 f817 	bl	23fd93c <_ZN6StringC1Eih>
 23fa90e:	a904      	add	r1, sp, #16
 23fa910:	a808      	add	r0, sp, #32
 23fa912:	f003 f85b 	bl	23fd9cc <_ZplRK15StringSumHelperRK6String>
 23fa916:	494d      	ldr	r1, [pc, #308]	; (23faa4c <_Z6setHueibiii+0x1d0>)
 23fa918:	f003 f864 	bl	23fd9e4 <_ZplRK15StringSumHelperPKc>
 23fa91c:	4601      	mov	r1, r0
 23fa91e:	4668      	mov	r0, sp
 23fa920:	f002 ffe0 	bl	23fd8e4 <_ZN6StringaSERKS_>
 23fa924:	a804      	add	r0, sp, #16
 23fa926:	f002 ff7e 	bl	23fd826 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23fa92a:	a808      	add	r0, sp, #32
 23fa92c:	f002 ff7b 	bl	23fd826 <_ZN6StringD1Ev>
    StringSumHelper(const String &s) : String(s) {}
 23fa930:	4669      	mov	r1, sp
 23fa932:	a808      	add	r0, sp, #32
 23fa934:	f002 ffe5 	bl	23fd902 <_ZN6StringC1ERKS_>
    command = command + String(HueBright) + ",\"hue\":";
 23fa938:	220a      	movs	r2, #10
 23fa93a:	4631      	mov	r1, r6
 23fa93c:	a804      	add	r0, sp, #16
 23fa93e:	f002 fffd 	bl	23fd93c <_ZN6StringC1Eih>
 23fa942:	a904      	add	r1, sp, #16
 23fa944:	a808      	add	r0, sp, #32
 23fa946:	f003 f841 	bl	23fd9cc <_ZplRK15StringSumHelperRK6String>
 23fa94a:	4941      	ldr	r1, [pc, #260]	; (23faa50 <_Z6setHueibiii+0x1d4>)
 23fa94c:	f003 f84a 	bl	23fd9e4 <_ZplRK15StringSumHelperPKc>
 23fa950:	4601      	mov	r1, r0
 23fa952:	4668      	mov	r0, sp
 23fa954:	f002 ffc6 	bl	23fd8e4 <_ZN6StringaSERKS_>
 23fa958:	a804      	add	r0, sp, #16
 23fa95a:	f002 ff64 	bl	23fd826 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23fa95e:	a808      	add	r0, sp, #32
 23fa960:	f002 ff61 	bl	23fd826 <_ZN6StringD1Ev>
    StringSumHelper(const String &s) : String(s) {}
 23fa964:	4669      	mov	r1, sp
 23fa966:	a808      	add	r0, sp, #32
 23fa968:	f002 ffcb 	bl	23fd902 <_ZN6StringC1ERKS_>
    command = command + String(HueColor) + "}";
 23fa96c:	220a      	movs	r2, #10
 23fa96e:	4621      	mov	r1, r4
 23fa970:	a804      	add	r0, sp, #16
 23fa972:	f002 ffe3 	bl	23fd93c <_ZN6StringC1Eih>
 23fa976:	a904      	add	r1, sp, #16
 23fa978:	a808      	add	r0, sp, #32
 23fa97a:	f003 f827 	bl	23fd9cc <_ZplRK15StringSumHelperRK6String>
 23fa97e:	4935      	ldr	r1, [pc, #212]	; (23faa54 <_Z6setHueibiii+0x1d8>)
 23fa980:	f003 f830 	bl	23fd9e4 <_ZplRK15StringSumHelperPKc>
 23fa984:	4601      	mov	r1, r0
 23fa986:	4668      	mov	r0, sp
 23fa988:	f002 ffac 	bl	23fd8e4 <_ZN6StringaSERKS_>
 23fa98c:	a804      	add	r0, sp, #16
 23fa98e:	f002 ff4a 	bl	23fd826 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23fa992:	a808      	add	r0, sp, #32
 23fa994:	f002 ff47 	bl	23fd826 <_ZN6StringD1Ev>
  if (HueClient.connect(hueHubIP, hueHubPort)) {
 23fa998:	2300      	movs	r3, #0
 23fa99a:	2250      	movs	r2, #80	; 0x50
 23fa99c:	492e      	ldr	r1, [pc, #184]	; (23faa58 <_Z6setHueibiii+0x1dc>)
 23fa99e:	482f      	ldr	r0, [pc, #188]	; (23faa5c <_Z6setHueibiii+0x1e0>)
 23fa9a0:	f003 fcea 	bl	23fe378 <_ZN9TCPClient7connectEPKctm>
 23fa9a4:	4604      	mov	r4, r0
 23fa9a6:	2800      	cmp	r0, #0
 23fa9a8:	d093      	beq.n	23fa8d2 <_Z6setHueibiii+0x56>
      Serial.printf("Sending Command to Hue: %s\n",command.c_str());
 23fa9aa:	f003 faab 	bl	23fdf04 <_Z16_fetch_usbserialv>
 23fa9ae:	9a00      	ldr	r2, [sp, #0]
 23fa9b0:	492b      	ldr	r1, [pc, #172]	; (23faa60 <_Z6setHueibiii+0x1e4>)
 23fa9b2:	f7ff ff31 	bl	23fa818 <_ZN5Print6printfEPKcz>
      HueClient.print("PUT /api/");
 23fa9b6:	492b      	ldr	r1, [pc, #172]	; (23faa64 <_Z6setHueibiii+0x1e8>)
 23fa9b8:	4828      	ldr	r0, [pc, #160]	; (23faa5c <_Z6setHueibiii+0x1e0>)
 23fa9ba:	f003 f859 	bl	23fda70 <_ZN5Print5printEPKc>
      HueClient.print(hueUsername);
 23fa9be:	492a      	ldr	r1, [pc, #168]	; (23faa68 <_Z6setHueibiii+0x1ec>)
 23fa9c0:	4826      	ldr	r0, [pc, #152]	; (23faa5c <_Z6setHueibiii+0x1e0>)
 23fa9c2:	f003 f855 	bl	23fda70 <_ZN5Print5printEPKc>
      HueClient.print("/lights/");
 23fa9c6:	4929      	ldr	r1, [pc, #164]	; (23faa6c <_Z6setHueibiii+0x1f0>)
 23fa9c8:	4824      	ldr	r0, [pc, #144]	; (23faa5c <_Z6setHueibiii+0x1e0>)
 23fa9ca:	f003 f851 	bl	23fda70 <_ZN5Print5printEPKc>
inline size_t Print::print(T n, int base)
 23fa9ce:	220a      	movs	r2, #10
 23fa9d0:	4629      	mov	r1, r5
 23fa9d2:	4822      	ldr	r0, [pc, #136]	; (23faa5c <_Z6setHueibiii+0x1e0>)
 23fa9d4:	f7ff fea8 	bl	23fa728 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
      HueClient.println("/state HTTP/1.1");
 23fa9d8:	4925      	ldr	r1, [pc, #148]	; (23faa70 <_Z6setHueibiii+0x1f4>)
 23fa9da:	4820      	ldr	r0, [pc, #128]	; (23faa5c <_Z6setHueibiii+0x1e0>)
 23fa9dc:	f003 f85b 	bl	23fda96 <_ZN5Print7printlnEPKc>
      HueClient.println("keep-alive");
 23fa9e0:	4924      	ldr	r1, [pc, #144]	; (23faa74 <_Z6setHueibiii+0x1f8>)
 23fa9e2:	481e      	ldr	r0, [pc, #120]	; (23faa5c <_Z6setHueibiii+0x1e0>)
 23fa9e4:	f003 f857 	bl	23fda96 <_ZN5Print7printlnEPKc>
      HueClient.print("Host: ");
 23fa9e8:	4923      	ldr	r1, [pc, #140]	; (23faa78 <_Z6setHueibiii+0x1fc>)
 23fa9ea:	481c      	ldr	r0, [pc, #112]	; (23faa5c <_Z6setHueibiii+0x1e0>)
 23fa9ec:	f003 f840 	bl	23fda70 <_ZN5Print5printEPKc>
      HueClient.println(hueHubIP);
 23fa9f0:	4919      	ldr	r1, [pc, #100]	; (23faa58 <_Z6setHueibiii+0x1dc>)
 23fa9f2:	481a      	ldr	r0, [pc, #104]	; (23faa5c <_Z6setHueibiii+0x1e0>)
 23fa9f4:	f003 f84f 	bl	23fda96 <_ZN5Print7printlnEPKc>
      HueClient.print("Content-Length: ");
 23fa9f8:	4920      	ldr	r1, [pc, #128]	; (23faa7c <_Z6setHueibiii+0x200>)
 23fa9fa:	4818      	ldr	r0, [pc, #96]	; (23faa5c <_Z6setHueibiii+0x1e0>)
 23fa9fc:	f003 f838 	bl	23fda70 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
 23faa00:	220a      	movs	r2, #10
 23faa02:	9902      	ldr	r1, [sp, #8]
 23faa04:	4815      	ldr	r0, [pc, #84]	; (23faa5c <_Z6setHueibiii+0x1e0>)
 23faa06:	f003 f850 	bl	23fdaaa <_ZN5Print11printNumberEmh>
        n += println();
 23faa0a:	4814      	ldr	r0, [pc, #80]	; (23faa5c <_Z6setHueibiii+0x1e0>)
 23faa0c:	f003 f837 	bl	23fda7e <_ZN5Print7printlnEv>
      HueClient.println("Content-Type: text/plain;charset=UTF-8");
 23faa10:	491b      	ldr	r1, [pc, #108]	; (23faa80 <_Z6setHueibiii+0x204>)
 23faa12:	4812      	ldr	r0, [pc, #72]	; (23faa5c <_Z6setHueibiii+0x1e0>)
 23faa14:	f003 f83f 	bl	23fda96 <_ZN5Print7printlnEPKc>
      HueClient.println();  // blank line before body
 23faa18:	4810      	ldr	r0, [pc, #64]	; (23faa5c <_Z6setHueibiii+0x1e0>)
 23faa1a:	f003 f830 	bl	23fda7e <_ZN5Print7printlnEv>
      HueClient.println(command);  // Hue command
 23faa1e:	9900      	ldr	r1, [sp, #0]
 23faa20:	480e      	ldr	r0, [pc, #56]	; (23faa5c <_Z6setHueibiii+0x1e0>)
 23faa22:	f003 f838 	bl	23fda96 <_ZN5Print7printlnEPKc>
    return true;  // command executed
 23faa26:	2401      	movs	r4, #1
 23faa28:	e753      	b.n	23fa8d2 <_Z6setHueibiii+0x56>
    command = "{\"on\":false}";
 23faa2a:	4668      	mov	r0, sp
 23faa2c:	4915      	ldr	r1, [pc, #84]	; (23faa84 <_Z6setHueibiii+0x208>)
 23faa2e:	f002 ff73 	bl	23fd918 <_ZN6StringaSEPKc>
 23faa32:	e7b1      	b.n	23fa998 <_Z6setHueibiii+0x11c>
 23faa34:	023ff4af 	.word	0x023ff4af
 23faa38:	1007acf8 	.word	0x1007acf8
 23faa3c:	1007ad00 	.word	0x1007ad00
 23faa40:	1007acf0 	.word	0x1007acf0
 23faa44:	023ff0ad 	.word	0x023ff0ad
 23faa48:	023ff0c9 	.word	0x023ff0c9
 23faa4c:	023ff0db 	.word	0x023ff0db
 23faa50:	023ff0e3 	.word	0x023ff0e3
 23faa54:	023ff0f6 	.word	0x023ff0f6
 23faa58:	023ff5e4 	.word	0x023ff5e4
 23faa5c:	1007ac8c 	.word	0x1007ac8c
 23faa60:	023ff0f8 	.word	0x023ff0f8
 23faa64:	023ff114 	.word	0x023ff114
 23faa68:	023ff59c 	.word	0x023ff59c
 23faa6c:	023ff11e 	.word	0x023ff11e
 23faa70:	023ff127 	.word	0x023ff127
 23faa74:	023ff350 	.word	0x023ff350
 23faa78:	023ff137 	.word	0x023ff137
 23faa7c:	023ff13e 	.word	0x023ff13e
 23faa80:	023ff14f 	.word	0x023ff14f
 23faa84:	023ff0eb 	.word	0x023ff0eb
 23faa88:	1007acf4 	.word	0x1007acf4
 23faa8c:	1007acfc 	.word	0x1007acfc

023faa90 <_Z8switchONi>:
}



// turn on specified wemo outlet
void switchON(int wemo) {
 23faa90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23faa92:	4604      	mov	r4, r0
  
  String data1;
 23faa94:	4924      	ldr	r1, [pc, #144]	; (23fab28 <_Z8switchONi+0x98>)
 23faa96:	4668      	mov	r0, sp
 23faa98:	f002 ff10 	bl	23fd8bc <_ZN6StringC1EPK19__FlashStringHelper>
  
  Serial.printf("Switching On Wemo #%i\n",wemo);
 23faa9c:	f003 fa32 	bl	23fdf04 <_Z16_fetch_usbserialv>
 23faaa0:	4622      	mov	r2, r4
 23faaa2:	4922      	ldr	r1, [pc, #136]	; (23fab2c <_Z8switchONi+0x9c>)
 23faaa4:	f7ff feb8 	bl	23fa818 <_ZN5Print6printfEPKcz>
    String & operator += (const char *cstr)     {concat(cstr); return (*this);}
 23faaa8:	4921      	ldr	r1, [pc, #132]	; (23fab30 <_Z8switchONi+0xa0>)
 23faaaa:	4668      	mov	r0, sp
 23faaac:	f002 ff7d 	bl	23fd9aa <_ZN6String6concatEPKc>
  data1+="<?xml version=\"1.0\" encoding=\"utf-8\"?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"><s:Body><u:SetBinaryState xmlns:u=\"urn:Belkin:service:basicevent:1\"><BinaryState>1</BinaryState></u:SetBinaryState></s:Body></s:Envelope>"; // Use HTML encoding for comma's
  if (WemoClient.connect(wemoIP[wemo],wemoPort)) {
 23faab0:	4a20      	ldr	r2, [pc, #128]	; (23fab34 <_Z8switchONi+0xa4>)
 23faab2:	4921      	ldr	r1, [pc, #132]	; (23fab38 <_Z8switchONi+0xa8>)
 23faab4:	2300      	movs	r3, #0
 23faab6:	8812      	ldrh	r2, [r2, #0]
 23faab8:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
 23faabc:	481f      	ldr	r0, [pc, #124]	; (23fab3c <_Z8switchONi+0xac>)
 23faabe:	f003 fc5b 	bl	23fe378 <_ZN9TCPClient7connectEPKctm>
 23faac2:	b328      	cbz	r0, 23fab10 <_Z8switchONi+0x80>
        WemoClient.println("POST /upnp/control/basicevent1 HTTP/1.1");
 23faac4:	491e      	ldr	r1, [pc, #120]	; (23fab40 <_Z8switchONi+0xb0>)
 23faac6:	481d      	ldr	r0, [pc, #116]	; (23fab3c <_Z8switchONi+0xac>)
 23faac8:	f002 ffe5 	bl	23fda96 <_ZN5Print7printlnEPKc>
        WemoClient.println("Content-Type: text/xml; charset=utf-8");
 23faacc:	491d      	ldr	r1, [pc, #116]	; (23fab44 <_Z8switchONi+0xb4>)
 23faace:	481b      	ldr	r0, [pc, #108]	; (23fab3c <_Z8switchONi+0xac>)
 23faad0:	f002 ffe1 	bl	23fda96 <_ZN5Print7printlnEPKc>
        WemoClient.println("SOAPACTION: \"urn:Belkin:service:basicevent:1#SetBinaryState\"");
 23faad4:	491c      	ldr	r1, [pc, #112]	; (23fab48 <_Z8switchONi+0xb8>)
 23faad6:	4819      	ldr	r0, [pc, #100]	; (23fab3c <_Z8switchONi+0xac>)
 23faad8:	f002 ffdd 	bl	23fda96 <_ZN5Print7printlnEPKc>
        WemoClient.println("Connection: keep-alive");
 23faadc:	491b      	ldr	r1, [pc, #108]	; (23fab4c <_Z8switchONi+0xbc>)
 23faade:	4817      	ldr	r0, [pc, #92]	; (23fab3c <_Z8switchONi+0xac>)
 23faae0:	f002 ffd9 	bl	23fda96 <_ZN5Print7printlnEPKc>
        WemoClient.print("Content-Length: ");
 23faae4:	491a      	ldr	r1, [pc, #104]	; (23fab50 <_Z8switchONi+0xc0>)
 23faae6:	4815      	ldr	r0, [pc, #84]	; (23fab3c <_Z8switchONi+0xac>)
 23faae8:	f002 ffc2 	bl	23fda70 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
 23faaec:	220a      	movs	r2, #10
 23faaee:	9902      	ldr	r1, [sp, #8]
 23faaf0:	4812      	ldr	r0, [pc, #72]	; (23fab3c <_Z8switchONi+0xac>)
 23faaf2:	f002 ffda 	bl	23fdaaa <_ZN5Print11printNumberEmh>
        n += println();
 23faaf6:	4811      	ldr	r0, [pc, #68]	; (23fab3c <_Z8switchONi+0xac>)
 23faaf8:	f002 ffc1 	bl	23fda7e <_ZN5Print7printlnEv>
        WemoClient.println(data1.length());
        WemoClient.println();
 23faafc:	480f      	ldr	r0, [pc, #60]	; (23fab3c <_Z8switchONi+0xac>)
 23faafe:	f002 ffbe 	bl	23fda7e <_ZN5Print7printlnEv>
        WemoClient.print(data1);
 23fab02:	9900      	ldr	r1, [sp, #0]
 23fab04:	480d      	ldr	r0, [pc, #52]	; (23fab3c <_Z8switchONi+0xac>)
 23fab06:	f002 ffb3 	bl	23fda70 <_ZN5Print5printEPKc>
        WemoClient.println();
 23fab0a:	480c      	ldr	r0, [pc, #48]	; (23fab3c <_Z8switchONi+0xac>)
 23fab0c:	f002 ffb7 	bl	23fda7e <_ZN5Print7printlnEv>
    }

  if (WemoClient.connected()) {
 23fab10:	480a      	ldr	r0, [pc, #40]	; (23fab3c <_Z8switchONi+0xac>)
 23fab12:	f003 fcaf 	bl	23fe474 <_ZN9TCPClient9connectedEv>
 23fab16:	b110      	cbz	r0, 23fab1e <_Z8switchONi+0x8e>
     WemoClient.stop();
 23fab18:	4808      	ldr	r0, [pc, #32]	; (23fab3c <_Z8switchONi+0xac>)
 23fab1a:	f003 fddf 	bl	23fe6dc <_ZN9TCPClient4stopEv>
  String data1;
 23fab1e:	4668      	mov	r0, sp
 23fab20:	f002 fe81 	bl	23fd826 <_ZN6StringD1Ev>
  }
}
 23fab24:	b004      	add	sp, #16
 23fab26:	bd10      	pop	{r4, pc}
 23fab28:	023ff4af 	.word	0x023ff4af
 23fab2c:	023ff176 	.word	0x023ff176
 23fab30:	023ff18d 	.word	0x023ff18d
 23fab34:	1007a7f8 	.word	0x1007a7f8
 23fab38:	1007a7e0 	.word	0x1007a7e0
 23fab3c:	1007acd4 	.word	0x1007acd4
 23fab40:	023ff2b9 	.word	0x023ff2b9
 23fab44:	023ff2e1 	.word	0x023ff2e1
 23fab48:	023ff307 	.word	0x023ff307
 23fab4c:	023ff344 	.word	0x023ff344
 23fab50:	023ff13e 	.word	0x023ff13e

023fab54 <_Z9switchOFFi>:

// turn off wemo outlet specified
void switchOFF(int wemo){
 23fab54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fab56:	4604      	mov	r4, r0
  String data1;
 23fab58:	4924      	ldr	r1, [pc, #144]	; (23fabec <_Z9switchOFFi+0x98>)
 23fab5a:	4668      	mov	r0, sp
 23fab5c:	f002 feae 	bl	23fd8bc <_ZN6StringC1EPK19__FlashStringHelper>
  
  Serial.printf("Switching Off Wemo #%i \n",wemo);
 23fab60:	f003 f9d0 	bl	23fdf04 <_Z16_fetch_usbserialv>
 23fab64:	4622      	mov	r2, r4
 23fab66:	4922      	ldr	r1, [pc, #136]	; (23fabf0 <_Z9switchOFFi+0x9c>)
 23fab68:	f7ff fe56 	bl	23fa818 <_ZN5Print6printfEPKcz>
 23fab6c:	4921      	ldr	r1, [pc, #132]	; (23fabf4 <_Z9switchOFFi+0xa0>)
 23fab6e:	4668      	mov	r0, sp
 23fab70:	f002 ff1b 	bl	23fd9aa <_ZN6String6concatEPKc>
  data1+="<?xml version=\"1.0\" encoding=\"utf-8\"?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"><s:Body><u:SetBinaryState xmlns:u=\"urn:Belkin:service:basicevent:1\"><BinaryState>0</BinaryState></u:SetBinaryState></s:Body></s:Envelope>"; // Use HTML encoding for comma's
  if (WemoClient.connect(wemoIP[wemo],wemoPort)) {
 23fab74:	4a20      	ldr	r2, [pc, #128]	; (23fabf8 <_Z9switchOFFi+0xa4>)
 23fab76:	4921      	ldr	r1, [pc, #132]	; (23fabfc <_Z9switchOFFi+0xa8>)
 23fab78:	2300      	movs	r3, #0
 23fab7a:	8812      	ldrh	r2, [r2, #0]
 23fab7c:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
 23fab80:	481f      	ldr	r0, [pc, #124]	; (23fac00 <_Z9switchOFFi+0xac>)
 23fab82:	f003 fbf9 	bl	23fe378 <_ZN9TCPClient7connectEPKctm>
 23fab86:	b328      	cbz	r0, 23fabd4 <_Z9switchOFFi+0x80>
        WemoClient.println("POST /upnp/control/basicevent1 HTTP/1.1");
 23fab88:	491e      	ldr	r1, [pc, #120]	; (23fac04 <_Z9switchOFFi+0xb0>)
 23fab8a:	481d      	ldr	r0, [pc, #116]	; (23fac00 <_Z9switchOFFi+0xac>)
 23fab8c:	f002 ff83 	bl	23fda96 <_ZN5Print7printlnEPKc>
        WemoClient.println("Content-Type: text/xml; charset=utf-8");
 23fab90:	491d      	ldr	r1, [pc, #116]	; (23fac08 <_Z9switchOFFi+0xb4>)
 23fab92:	481b      	ldr	r0, [pc, #108]	; (23fac00 <_Z9switchOFFi+0xac>)
 23fab94:	f002 ff7f 	bl	23fda96 <_ZN5Print7printlnEPKc>
        WemoClient.println("SOAPACTION: \"urn:Belkin:service:basicevent:1#SetBinaryState\"");
 23fab98:	491c      	ldr	r1, [pc, #112]	; (23fac0c <_Z9switchOFFi+0xb8>)
 23fab9a:	4819      	ldr	r0, [pc, #100]	; (23fac00 <_Z9switchOFFi+0xac>)
 23fab9c:	f002 ff7b 	bl	23fda96 <_ZN5Print7printlnEPKc>
        WemoClient.println("Connection: keep-alive");
 23faba0:	491b      	ldr	r1, [pc, #108]	; (23fac10 <_Z9switchOFFi+0xbc>)
 23faba2:	4817      	ldr	r0, [pc, #92]	; (23fac00 <_Z9switchOFFi+0xac>)
 23faba4:	f002 ff77 	bl	23fda96 <_ZN5Print7printlnEPKc>
        WemoClient.print("Content-Length: ");
 23faba8:	491a      	ldr	r1, [pc, #104]	; (23fac14 <_Z9switchOFFi+0xc0>)
 23fabaa:	4815      	ldr	r0, [pc, #84]	; (23fac00 <_Z9switchOFFi+0xac>)
 23fabac:	f002 ff60 	bl	23fda70 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
 23fabb0:	220a      	movs	r2, #10
 23fabb2:	9902      	ldr	r1, [sp, #8]
 23fabb4:	4812      	ldr	r0, [pc, #72]	; (23fac00 <_Z9switchOFFi+0xac>)
 23fabb6:	f002 ff78 	bl	23fdaaa <_ZN5Print11printNumberEmh>
        n += println();
 23fabba:	4811      	ldr	r0, [pc, #68]	; (23fac00 <_Z9switchOFFi+0xac>)
 23fabbc:	f002 ff5f 	bl	23fda7e <_ZN5Print7printlnEv>
        WemoClient.println(data1.length());
        WemoClient.println();
 23fabc0:	480f      	ldr	r0, [pc, #60]	; (23fac00 <_Z9switchOFFi+0xac>)
 23fabc2:	f002 ff5c 	bl	23fda7e <_ZN5Print7printlnEv>
        WemoClient.print(data1);
 23fabc6:	9900      	ldr	r1, [sp, #0]
 23fabc8:	480d      	ldr	r0, [pc, #52]	; (23fac00 <_Z9switchOFFi+0xac>)
 23fabca:	f002 ff51 	bl	23fda70 <_ZN5Print5printEPKc>
        WemoClient.println();
 23fabce:	480c      	ldr	r0, [pc, #48]	; (23fac00 <_Z9switchOFFi+0xac>)
 23fabd0:	f002 ff55 	bl	23fda7e <_ZN5Print7printlnEv>
    }
   
  if (WemoClient.connected()) {
 23fabd4:	480a      	ldr	r0, [pc, #40]	; (23fac00 <_Z9switchOFFi+0xac>)
 23fabd6:	f003 fc4d 	bl	23fe474 <_ZN9TCPClient9connectedEv>
 23fabda:	b110      	cbz	r0, 23fabe2 <_Z9switchOFFi+0x8e>
     WemoClient.stop();
 23fabdc:	4808      	ldr	r0, [pc, #32]	; (23fac00 <_Z9switchOFFi+0xac>)
 23fabde:	f003 fd7d 	bl	23fe6dc <_ZN9TCPClient4stopEv>
  String data1;
 23fabe2:	4668      	mov	r0, sp
 23fabe4:	f002 fe1f 	bl	23fd826 <_ZN6StringD1Ev>
  }
}
 23fabe8:	b004      	add	sp, #16
 23fabea:	bd10      	pop	{r4, pc}
 23fabec:	023ff4af 	.word	0x023ff4af
 23fabf0:	023ff35b 	.word	0x023ff35b
 23fabf4:	023ff374 	.word	0x023ff374
 23fabf8:	1007a7f8 	.word	0x1007a7f8
 23fabfc:	1007a7e0 	.word	0x1007a7e0
 23fac00:	1007acd4 	.word	0x1007acd4
 23fac04:	023ff2b9 	.word	0x023ff2b9
 23fac08:	023ff2e1 	.word	0x023ff2e1
 23fac0c:	023ff307 	.word	0x023ff307
 23fac10:	023ff344 	.word	0x023ff344
 23fac14:	023ff13e 	.word	0x023ff13e

023fac18 <_ZN6Button9isClickedEv>:
        _buttonState = !_buttonState;
      }
      return _buttonState;
    }

    bool isClicked() {
 23fac18:	b510      	push	{r4, lr}
 23fac1a:	4604      	mov	r4, r0
      bool _buttonState, _clicked;

      _buttonState = digitalRead(_buttonPin);
 23fac1c:	8800      	ldrh	r0, [r0, #0]
 23fac1e:	f003 ff2f 	bl	23fea80 <digitalRead>
      if(_pullUp) {
 23fac22:	7a22      	ldrb	r2, [r4, #8]
 23fac24:	b94a      	cbnz	r2, 23fac3a <_ZN6Button9isClickedEv+0x22>
      _buttonState = digitalRead(_buttonPin);
 23fac26:	1e03      	subs	r3, r0, #0
 23fac28:	bf18      	it	ne
 23fac2a:	2301      	movne	r3, #1
        _buttonState = !_buttonState;
      }
      if(_buttonState != _prevButtonState) {
 23fac2c:	6862      	ldr	r2, [r4, #4]
        _clicked = _buttonState;
      }
      else {
        _clicked = false;
      }
      _prevButtonState=_buttonState;
 23fac2e:	6063      	str	r3, [r4, #4]
      return _clicked;
    }
 23fac30:	4293      	cmp	r3, r2
 23fac32:	bf14      	ite	ne
 23fac34:	4618      	movne	r0, r3
 23fac36:	2000      	moveq	r0, #0
 23fac38:	bd10      	pop	{r4, pc}
        _buttonState = !_buttonState;
 23fac3a:	fab0 f380 	clz	r3, r0
 23fac3e:	095b      	lsrs	r3, r3, #5
 23fac40:	e7f4      	b.n	23fac2c <_ZN6Button9isClickedEv+0x14>
	...

023fac44 <_ZN7EncoderC1Ett>:
	Encoder(pin_t pin1, pin_t pin2) {
 23fac44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fac48:	4688      	mov	r8, r1
 23fac4a:	4617      	mov	r7, r2
 23fac4c:	4604      	mov	r4, r0
 23fac4e:	b088      	sub	sp, #32
		pinMode(pin1, INPUT_PULLUP);
 23fac50:	4640      	mov	r0, r8
 23fac52:	2102      	movs	r1, #2
 23fac54:	f003 feea 	bl	23fea2c <pinMode>
		pinMode(pin2, INPUT_PULLUP);
 23fac58:	2102      	movs	r1, #2
 23fac5a:	4638      	mov	r0, r7
 23fac5c:	f003 fee6 	bl	23fea2c <pinMode>
		pin1_register = PIN_TO_BASEREG(pin1);
 23fac60:	2300      	movs	r3, #0
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 23fac62:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
		pin2_register = PIN_TO_BASEREG(pin2);
 23fac66:	e9c4 3801 	strd	r3, r8, [r4, #4]
		pin1_register = PIN_TO_BASEREG(pin1);
 23fac6a:	6023      	str	r3, [r4, #0]
		pin2_bitmask = PIN_TO_BITMASK(pin2);
 23fac6c:	60e7      	str	r7, [r4, #12]
		position = 0;
 23fac6e:	6163      	str	r3, [r4, #20]
 23fac70:	f001 ff10 	bl	23fca94 <HAL_Delay_Microseconds>
    static const hal_pin_info_t* pinMap = hal_pin_map();
 23fac74:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 23fad54 <_ZN7EncoderC1Ett+0x110>
		if (DIRECT_PIN_READ(pin1_register, pin1_bitmask)) s |= 1;
 23fac78:	68a5      	ldr	r5, [r4, #8]
 23fac7a:	e8da 3f8f 	ldab	r3, [sl]
 23fac7e:	f013 0f01 	tst.w	r3, #1
 23fac82:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 23fad58 <_ZN7EncoderC1Ett+0x114>
 23fac86:	d10a      	bne.n	23fac9e <_ZN7EncoderC1Ett+0x5a>
 23fac88:	4650      	mov	r0, sl
 23fac8a:	f7ff fcd3 	bl	23fa634 <__cxa_guard_acquire>
 23fac8e:	b130      	cbz	r0, 23fac9e <_ZN7EncoderC1Ett+0x5a>
 23fac90:	f001 fe66 	bl	23fc960 <hal_pin_map>
 23fac94:	f8c9 0000 	str.w	r0, [r9]
 23fac98:	4650      	mov	r0, sl
 23fac9a:	f7ff fcd0 	bl	23fa63e <__cxa_guard_release>
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23fac9e:	220c      	movs	r2, #12
 23faca0:	b2ab      	uxth	r3, r5
 23faca2:	4353      	muls	r3, r2
 23faca4:	f8d9 2000 	ldr.w	r2, [r9]
		if (DIRECT_PIN_READ(pin2_register, pin2_bitmask)) s |= 2;
 23faca8:	68e6      	ldr	r6, [r4, #12]
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23facaa:	5cd0      	ldrb	r0, [r2, r3]
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23facac:	18d1      	adds	r1, r2, r3
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23facae:	4a27      	ldr	r2, [pc, #156]	; (23fad4c <_ZN7EncoderC1Ett+0x108>)
 23facb0:	4b27      	ldr	r3, [pc, #156]	; (23fad50 <_ZN7EncoderC1Ett+0x10c>)
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23facb2:	7849      	ldrb	r1, [r1, #1]
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23facb4:	2800      	cmp	r0, #0
 23facb6:	bf18      	it	ne
 23facb8:	4613      	movne	r3, r2
    return ((gpiobase->EXT_PORT[0] >> pin_info.gpio_pin) & 1UL);
 23facba:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 23facbc:	40cd      	lsrs	r5, r1
		if (DIRECT_PIN_READ(pin1_register, pin1_bitmask)) s |= 1;
 23facbe:	f005 0501 	and.w	r5, r5, #1
    static const hal_pin_info_t* pinMap = hal_pin_map();
 23facc2:	e8da 3f8f 	ldab	r3, [sl]
 23facc6:	07da      	lsls	r2, r3, #31
 23facc8:	d40a      	bmi.n	23face0 <_ZN7EncoderC1Ett+0x9c>
 23facca:	4822      	ldr	r0, [pc, #136]	; (23fad54 <_ZN7EncoderC1Ett+0x110>)
 23faccc:	f7ff fcb2 	bl	23fa634 <__cxa_guard_acquire>
 23facd0:	b130      	cbz	r0, 23face0 <_ZN7EncoderC1Ett+0x9c>
 23facd2:	f001 fe45 	bl	23fc960 <hal_pin_map>
 23facd6:	f8c9 0000 	str.w	r0, [r9]
 23facda:	481e      	ldr	r0, [pc, #120]	; (23fad54 <_ZN7EncoderC1Ett+0x110>)
 23facdc:	f7ff fcaf 	bl	23fa63e <__cxa_guard_release>
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23face0:	220c      	movs	r2, #12
 23face2:	b2b3      	uxth	r3, r6
 23face4:	4353      	muls	r3, r2
 23face6:	f8d9 2000 	ldr.w	r2, [r9]
		attachInterrupt(pin1, &Encoder::interruptHandler, this, CHANGE);
 23facea:	f04f 36ff 	mov.w	r6, #4294967295
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23facee:	5cd0      	ldrb	r0, [r2, r3]
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23facf0:	18d1      	adds	r1, r2, r3
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23facf2:	4b16      	ldr	r3, [pc, #88]	; (23fad4c <_ZN7EncoderC1Ett+0x108>)
 23facf4:	4a16      	ldr	r2, [pc, #88]	; (23fad50 <_ZN7EncoderC1Ett+0x10c>)
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23facf6:	7849      	ldrb	r1, [r1, #1]
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23facf8:	2800      	cmp	r0, #0
 23facfa:	bf18      	it	ne
 23facfc:	461a      	movne	r2, r3
    return ((gpiobase->EXT_PORT[0] >> pin_info.gpio_pin) & 1UL);
 23facfe:	6d13      	ldr	r3, [r2, #80]	; 0x50
 23fad00:	f8df 9058 	ldr.w	r9, [pc, #88]	; 23fad5c <_ZN7EncoderC1Ett+0x118>
 23fad04:	40cb      	lsrs	r3, r1
		if (DIRECT_PIN_READ(pin2_register, pin2_bitmask)) s |= 2;
 23fad06:	07db      	lsls	r3, r3, #31
 23fad08:	bf48      	it	mi
 23fad0a:	f045 0502 	orrmi.w	r5, r5, #2
		state = s;
 23fad0e:	7425      	strb	r5, [r4, #16]
		attachInterrupt(pin1, &Encoder::interruptHandler, this, CHANGE);
 23fad10:	2500      	movs	r5, #0
 23fad12:	4623      	mov	r3, r4
 23fad14:	462a      	mov	r2, r5
 23fad16:	4649      	mov	r1, r9
 23fad18:	4640      	mov	r0, r8
 23fad1a:	e9cd 5600 	strd	r5, r6, [sp]
 23fad1e:	9502      	str	r5, [sp, #8]
 23fad20:	f8cd 9010 	str.w	r9, [sp, #16]
 23fad24:	9505      	str	r5, [sp, #20]
 23fad26:	f7ff fd43 	bl	23fa7b0 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0>
		attachInterrupt(pin2, &Encoder::interruptHandler, this, CHANGE);
 23fad2a:	e9cd 9506 	strd	r9, r5, [sp, #24]
 23fad2e:	e9cd 6501 	strd	r6, r5, [sp, #4]
 23fad32:	9500      	str	r5, [sp, #0]
 23fad34:	aa08      	add	r2, sp, #32
 23fad36:	4638      	mov	r0, r7
 23fad38:	e912 0006 	ldmdb	r2, {r1, r2}
 23fad3c:	4623      	mov	r3, r4
 23fad3e:	f7ff fd37 	bl	23fa7b0 <_Z15attachInterruptI7EncoderEbtMT_FvvEPS1_13InterruptModeah.isra.0>
	}
 23fad42:	4620      	mov	r0, r4
 23fad44:	b008      	add	sp, #32
 23fad46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fad4a:	bf00      	nop
 23fad4c:	48014400 	.word	0x48014400
 23fad50:	48014000 	.word	0x48014000
 23fad54:	1007ac84 	.word	0x1007ac84
 23fad58:	1007ac88 	.word	0x1007ac88
 23fad5c:	023fa645 	.word	0x023fa645

023fad60 <setup>:
Button pushButton(PBUTTON);
Button encoderSwitch(ESWTCH);
Encoder encoder(PINA, PINB);
DFRobotDFPlayerMini myMp3Player;

void setup(){
 23fad60:	b530      	push	{r4, r5, lr}
 23fad62:	b095      	sub	sp, #84	; 0x54
  Serial.begin(9600);
 23fad64:	f003 f8ce 	bl	23fdf04 <_Z16_fetch_usbserialv>
 23fad68:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fad6c:	f003 f8ba 	bl	23fdee4 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 23fad70:	2000      	movs	r0, #0
 23fad72:	f001 feb9 	bl	23fcae8 <hal_timer_millis>
 23fad76:	4604      	mov	r4, r0
 23fad78:	2000      	movs	r0, #0
 23fad7a:	f001 feb5 	bl	23fcae8 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 23fad7e:	1b00      	subs	r0, r0, r4
 23fad80:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 23fad84:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 23fad88:	f171 0300 	sbcs.w	r3, r1, #0
 23fad8c:	d207      	bcs.n	23fad9e <setup+0x3e>
  waitFor(Serial.isConnected, 1000);
 23fad8e:	f003 f8b9 	bl	23fdf04 <_Z16_fetch_usbserialv>
 23fad92:	f003 f8ab 	bl	23fdeec <_ZN9USBSerial11isConnectedEv>
 23fad96:	b910      	cbnz	r0, 23fad9e <setup+0x3e>
            spark_process();
 23fad98:	f002 face 	bl	23fd338 <spark_process>
        while (_while() && !_condition()) {
 23fad9c:	e7ec      	b.n	23fad78 <setup+0x18>
 23fad9e:	f003 f8b1 	bl	23fdf04 <_Z16_fetch_usbserialv>
 23fada2:	f003 f8a3 	bl	23fdeec <_ZN9USBSerial11isConnectedEv>
  Serial1.begin(9600);
 23fada6:	f003 fecf 	bl	23feb48 <_Z22__fetch_global_Serial1v>
 23fadaa:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fadae:	f003 f985 	bl	23fe0bc <_ZN11USARTSerial5beginEm>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 23fadb2:	2300      	movs	r3, #0
    virtual bool listening();
    virtual NetworkClass& prefer(bool prefer = true);
    virtual bool isPreferred();

    operator network_interface_t() const {
        return iface_;
 23fadb4:	4c2a      	ldr	r4, [pc, #168]	; (23fae60 <setup+0x100>)
 23fadb6:	461a      	mov	r2, r3
 23fadb8:	4619      	mov	r1, r3
 23fadba:	6860      	ldr	r0, [r4, #4]
 23fadbc:	f002 fa14 	bl	23fd1e8 <network_on>
    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
    }

    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
 23fadc0:	2300      	movs	r3, #0
 23fadc2:	6860      	ldr	r0, [r4, #4]
 23fadc4:	461a      	mov	r2, r3
 23fadc6:	4619      	mov	r1, r3
 23fadc8:	f002 fa54 	bl	23fd274 <network_clear_credentials>
        memset(&creds, 0, sizeof(creds));
 23fadcc:	2238      	movs	r2, #56	; 0x38
 23fadce:	2100      	movs	r1, #0
 23fadd0:	a806      	add	r0, sp, #24
 23fadd2:	f004 f8b4 	bl	23fef3e <memset>
        creds.size = sizeof(creds);
 23fadd6:	234c      	movs	r3, #76	; 0x4c
 23fadd8:	9301      	str	r3, [sp, #4]
        creds.ssid = ssid;
 23fadda:	4b22      	ldr	r3, [pc, #136]	; (23fae64 <setup+0x104>)
        creds.password = password;
 23faddc:	220a      	movs	r2, #10
        creds.ssid = ssid;
 23fadde:	9302      	str	r3, [sp, #8]
        creds.password = password;
 23fade0:	2300      	movs	r3, #0
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
 23fade2:	6860      	ldr	r0, [r4, #4]
 23fade4:	4619      	mov	r1, r3
        creds.password = password;
 23fade6:	e9cd 2303 	strd	r2, r3, [sp, #12]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
 23fadea:	aa01      	add	r2, sp, #4
        creds.password_len = passwordLen;
 23fadec:	9305      	str	r3, [sp, #20]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
 23fadee:	f002 fa33 	bl	23fd258 <network_set_credentials>
        network_connect(*this, flags, 0, NULL);
 23fadf2:	2300      	movs	r3, #0
 23fadf4:	6860      	ldr	r0, [r4, #4]
 23fadf6:	461a      	mov	r2, r3
 23fadf8:	4619      	mov	r1, r3
 23fadfa:	f002 f9bd 	bl	23fd178 <network_connect>
  WiFi.clearCredentials();
  WiFi.setCredentials("IoTNetwork");

  WiFi.connect();
  while (WiFi.connecting()){
    Serial.printf(".");
 23fadfe:	4d1a      	ldr	r5, [pc, #104]	; (23fae68 <setup+0x108>)
        return network_connecting(*this, 0, NULL);
 23fae00:	2200      	movs	r2, #0
 23fae02:	6860      	ldr	r0, [r4, #4]
 23fae04:	4611      	mov	r1, r2
 23fae06:	f002 f9c5 	bl	23fd194 <network_connecting>
  while (WiFi.connecting()){
 23fae0a:	b128      	cbz	r0, 23fae18 <setup+0xb8>
    Serial.printf(".");
 23fae0c:	f003 f87a 	bl	23fdf04 <_Z16_fetch_usbserialv>
 23fae10:	4629      	mov	r1, r5
 23fae12:	f7ff fd01 	bl	23fa818 <_ZN5Print6printfEPKcz>
  while (WiFi.connecting()){
 23fae16:	e7f3      	b.n	23fae00 <setup+0xa0>
  }
  Serial.printf("\n\n");
 23fae18:	f003 f874 	bl	23fdf04 <_Z16_fetch_usbserialv>
 23fae1c:	4913      	ldr	r1, [pc, #76]	; (23fae6c <setup+0x10c>)
 23fae1e:	f7ff fcfb 	bl	23fa818 <_ZN5Print6printfEPKcz>

  pixel.begin();
 23fae22:	4813      	ldr	r0, [pc, #76]	; (23fae70 <setup+0x110>)
 23fae24:	f000 fe6c 	bl	23fbb00 <_ZN17Adafruit_NeoPixel5beginEv>
  pixel.setBrightness(10);
 23fae28:	210a      	movs	r1, #10
 23fae2a:	4811      	ldr	r0, [pc, #68]	; (23fae70 <setup+0x110>)
 23fae2c:	f001 f81b 	bl	23fbe66 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  pixel.show();
 23fae30:	480f      	ldr	r0, [pc, #60]	; (23fae70 <setup+0x110>)
 23fae32:	f000 fecb 	bl	23fbbcc <_ZN17Adafruit_NeoPixel4showEv>

status = bme.begin(HEXADDRESS);
 23fae36:	2176      	movs	r1, #118	; 0x76
 23fae38:	480e      	ldr	r0, [pc, #56]	; (23fae74 <setup+0x114>)
 23fae3a:	f000 fe12 	bl	23fba62 <_ZN15Adafruit_BME2805beginEh>
 23fae3e:	4b0e      	ldr	r3, [pc, #56]	; (23fae78 <setup+0x118>)
 23fae40:	7018      	strb	r0, [r3, #0]
if (!status){
 23fae42:	b928      	cbnz	r0, 23fae50 <setup+0xf0>
    Serial.printf("BME at address %i failed to start\n", HEXADDRESS);
 23fae44:	f003 f85e 	bl	23fdf04 <_Z16_fetch_usbserialv>
 23fae48:	2276      	movs	r2, #118	; 0x76
 23fae4a:	490c      	ldr	r1, [pc, #48]	; (23fae7c <setup+0x11c>)
 23fae4c:	f7ff fce4 	bl	23fa818 <_ZN5Print6printfEPKcz>
}


display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
 23fae50:	223c      	movs	r2, #60	; 0x3c
 23fae52:	2102      	movs	r1, #2
 23fae54:	480a      	ldr	r0, [pc, #40]	; (23fae80 <setup+0x120>)
}
 23fae56:	b015      	add	sp, #84	; 0x54
 23fae58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
 23fae5c:	f001 bad2 	b.w	23fc404 <_ZN16Adafruit_SSD13065beginEhh>
 23fae60:	1007aef4 	.word	0x1007aef4
 23fae64:	023ff4a0 	.word	0x023ff4a0
 23fae68:	023ff4ab 	.word	0x023ff4ab
 23fae6c:	023ff4ad 	.word	0x023ff4ad
 23fae70:	1007ade0 	.word	0x1007ade0
 23fae74:	1007ad04 	.word	0x1007ad04
 23fae78:	1007ae08 	.word	0x1007ae08
 23fae7c:	023ff4b0 	.word	0x023ff4b0
 23fae80:	1007ad50 	.word	0x1007ad50
 23fae84:	00000000 	.word	0x00000000

023fae88 <loop>:

void loop(){
 23fae88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fae8c:	ed2d 8b02 	vpush	{d8}
 23fae90:	b083      	sub	sp, #12
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fae92:	f001 fe1b 	bl	23fcacc <HAL_Timer_Get_Milli_Seconds>
currentTime= millis();
 23fae96:	4b95      	ldr	r3, [pc, #596]	; (23fb0ec <loop+0x264>)

// Update temperature every minute
// if (currentTime >= 60000){
  lastUpdateTime = currentTime;
  temp = bme.readTemperature();
 23fae98:	4c95      	ldr	r4, [pc, #596]	; (23fb0f0 <loop+0x268>)
currentTime= millis();
 23fae9a:	6018      	str	r0, [r3, #0]
  lastUpdateTime = currentTime;
 23fae9c:	4b95      	ldr	r3, [pc, #596]	; (23fb0f4 <loop+0x26c>)
 23fae9e:	6018      	str	r0, [r3, #0]
  temp = bme.readTemperature();
 23faea0:	4895      	ldr	r0, [pc, #596]	; (23fb0f8 <loop+0x270>)
 23faea2:	f000 fd55 	bl	23fb950 <_ZN15Adafruit_BME28015readTemperatureEv>

  display.clearDisplay();
 23faea6:	4895      	ldr	r0, [pc, #596]	; (23fb0fc <loop+0x274>)
  temp = bme.readTemperature();
 23faea8:	ed84 0a00 	vstr	s0, [r4]
  display.clearDisplay();
 23faeac:	f001 f9de 	bl	23fc26c <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
 23faeb0:	2101      	movs	r1, #1
 23faeb2:	4892      	ldr	r0, [pc, #584]	; (23fb0fc <loop+0x274>)
 23faeb4:	f001 fd27 	bl	23fc906 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
 23faeb8:	2101      	movs	r1, #1
 23faeba:	4890      	ldr	r0, [pc, #576]	; (23fb0fc <loop+0x274>)
 23faebc:	f001 fd28 	bl	23fc910 <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(10, 0);
 23faec0:	2200      	movs	r2, #0
 23faec2:	210a      	movs	r1, #10
 23faec4:	488d      	ldr	r0, [pc, #564]	; (23fb0fc <loop+0x274>)
 23faec6:	f001 fd1b 	bl	23fc900 <_ZN12Adafruit_GFX9setCursorEss>
  display.print("Temp: ");
 23faeca:	498d      	ldr	r1, [pc, #564]	; (23fb100 <loop+0x278>)
 23faecc:	488b      	ldr	r0, [pc, #556]	; (23fb0fc <loop+0x274>)
 23faece:	f002 fdcf 	bl	23fda70 <_ZN5Print5printEPKc>
  display.print(temp);
 23faed2:	ed94 8a00 	vldr	s16, [r4]
        return printFloat((double)n, digits);
 23faed6:	ee18 0a10 	vmov	r0, s16
 23faeda:	f7ff f819 	bl	23f9f10 <__aeabi_f2d>
        if (std::isnan(number)) {
 23faede:	4602      	mov	r2, r0
 23faee0:	460b      	mov	r3, r1
        return printFloat((double)n, digits);
 23faee2:	4604      	mov	r4, r0
 23faee4:	460d      	mov	r5, r1
 23faee6:	4680      	mov	r8, r0
 23faee8:	4689      	mov	r9, r1
        if (std::isnan(number)) {
 23faeea:	f7ff fb03 	bl	23fa4f4 <__aeabi_dcmpun>
 23faeee:	2800      	cmp	r0, #0
 23faef0:	f000 80df 	beq.w	23fb0b2 <loop+0x22a>
            return print("nan");
 23faef4:	4983      	ldr	r1, [pc, #524]	; (23fb104 <loop+0x27c>)
            return print("inf");
 23faef6:	4881      	ldr	r0, [pc, #516]	; (23fb0fc <loop+0x274>)
 23faef8:	f002 fdba 	bl	23fda70 <_ZN5Print5printEPKc>
inline size_t Print::print(T n, int base)
 23faefc:	220a      	movs	r2, #10
 23faefe:	21b0      	movs	r1, #176	; 0xb0
 23faf00:	487e      	ldr	r0, [pc, #504]	; (23fb0fc <loop+0x274>)
 23faf02:	f7ff fc11 	bl	23fa728 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
  display.print(DEG);
  display.setTextSize(2);
 23faf06:	2102      	movs	r1, #2
 23faf08:	487c      	ldr	r0, [pc, #496]	; (23fb0fc <loop+0x274>)
 23faf0a:	f001 fcfc 	bl	23fc906 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
 23faf0e:	2101      	movs	r1, #1
 23faf10:	487a      	ldr	r0, [pc, #488]	; (23fb0fc <loop+0x274>)
 23faf12:	f001 fcfd 	bl	23fc910 <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(12, 28);
 23faf16:	221c      	movs	r2, #28
 23faf18:	210c      	movs	r1, #12
 23faf1a:	4878      	ldr	r0, [pc, #480]	; (23fb0fc <loop+0x274>)
 23faf1c:	f001 fcf0 	bl	23fc900 <_ZN12Adafruit_GFX9setCursorEss>
  display.println("Papa Duck");
 23faf20:	4979      	ldr	r1, [pc, #484]	; (23fb108 <loop+0x280>)
 23faf22:	4876      	ldr	r0, [pc, #472]	; (23fb0fc <loop+0x274>)
 23faf24:	f002 fdb7 	bl	23fda96 <_ZN5Print7printlnEPKc>
  display.display();
 23faf28:	4874      	ldr	r0, [pc, #464]	; (23fb0fc <loop+0x274>)
 23faf2a:	f001 f9fb 	bl	23fc324 <_ZN16Adafruit_SSD13067displayEv>
  // }

  // Cycle through colors on NeoPixels

  for (int i = 0; i < PIXELCOUNT; i++){
 23faf2e:	2600      	movs	r6, #0
  color = i%7;
 23faf30:	4c76      	ldr	r4, [pc, #472]	; (23fb10c <loop+0x284>)
  pixel.setPixelColor(i, rainbow[color]);
 23faf32:	4f77      	ldr	r7, [pc, #476]	; (23fb110 <loop+0x288>)
  color = i%7;
 23faf34:	2507      	movs	r5, #7
 23faf36:	fbb6 f3f5 	udiv	r3, r6, r5
  pixel.setPixelColor(i, rainbow[color]);
 23faf3a:	4a76      	ldr	r2, [pc, #472]	; (23fb114 <loop+0x28c>)
  color = i%7;
 23faf3c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 23faf40:	1af3      	subs	r3, r6, r3
  pixel.setPixelColor(i, rainbow[color]);
 23faf42:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 23faf46:	b2b1      	uxth	r1, r6
 23faf48:	4638      	mov	r0, r7
  color = i%7;
 23faf4a:	6023      	str	r3, [r4, #0]
  pixel.setPixelColor(i, rainbow[color]);
 23faf4c:	f000 ff48 	bl	23fbde0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  pixel.show();
 23faf50:	4638      	mov	r0, r7
 23faf52:	f000 fe3b 	bl	23fbbcc <_ZN17Adafruit_NeoPixel4showEv>
  color++;
 23faf56:	6823      	ldr	r3, [r4, #0]
  for (int i = 0; i < PIXELCOUNT; i++){
 23faf58:	3601      	adds	r6, #1
  color++;
 23faf5a:	3301      	adds	r3, #1
  for (int i = 0; i < PIXELCOUNT; i++){
 23faf5c:	2e0c      	cmp	r6, #12
  color++;
 23faf5e:	6023      	str	r3, [r4, #0]
  for (int i = 0; i < PIXELCOUNT; i++){
 23faf60:	d1e8      	bne.n	23faf34 <loop+0xac>
  }

 if (pushButton.isClicked()){
 23faf62:	486d      	ldr	r0, [pc, #436]	; (23fb118 <loop+0x290>)
 23faf64:	f7ff fe58 	bl	23fac18 <_ZN6Button9isClickedEv>
 23faf68:	b1d0      	cbz	r0, 23fafa0 <loop+0x118>
    onOff = !onOff;
    setHue(HUE1,onOff,HueRainbow[color%7],brightness,SATURATION);
 23faf6a:	6823      	ldr	r3, [r4, #0]
    onOff = !onOff;
 23faf6c:	4e6b      	ldr	r6, [pc, #428]	; (23fb11c <loop+0x294>)
    setHue(HUE1,onOff,HueRainbow[color%7],brightness,SATURATION);
 23faf6e:	fb93 f5f5 	sdiv	r5, r3, r5
 23faf72:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 23faf76:	1b5d      	subs	r5, r3, r5
 23faf78:	23ff      	movs	r3, #255	; 0xff
    onOff = !onOff;
 23faf7a:	7831      	ldrb	r1, [r6, #0]
    setHue(HUE1,onOff,HueRainbow[color%7],brightness,SATURATION);
 23faf7c:	4a68      	ldr	r2, [pc, #416]	; (23fb120 <loop+0x298>)
    onOff = !onOff;
 23faf7e:	f081 0101 	eor.w	r1, r1, #1
 23faf82:	7031      	strb	r1, [r6, #0]
    setHue(HUE1,onOff,HueRainbow[color%7],brightness,SATURATION);
 23faf84:	9300      	str	r3, [sp, #0]
 23faf86:	4b67      	ldr	r3, [pc, #412]	; (23fb124 <loop+0x29c>)
 23faf88:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 23faf8c:	681b      	ldr	r3, [r3, #0]
 23faf8e:	2001      	movs	r0, #1
 23faf90:	f7ff fc74 	bl	23fa87c <_Z6setHueibiii>
    Serial.printf("onOff %i\n",onOff);
 23faf94:	f002 ffb6 	bl	23fdf04 <_Z16_fetch_usbserialv>
 23faf98:	7832      	ldrb	r2, [r6, #0]
 23faf9a:	4963      	ldr	r1, [pc, #396]	; (23fb128 <loop+0x2a0>)
 23faf9c:	f7ff fc3c 	bl	23fa818 <_ZN5Print6printfEPKcz>
		int32_t ret = position;
 23fafa0:	4e62      	ldr	r6, [pc, #392]	; (23fb12c <loop+0x2a4>)
		noInterrupts();
 23fafa2:	f003 f831 	bl	23fe008 <_Z12noInterruptsv>
  }
  
  position = encoder.read(); //0-96 encoder positions, 0-255 brightness
 23fafa6:	4d62      	ldr	r5, [pc, #392]	; (23fb130 <loop+0x2a8>)
		int32_t ret = position;
 23fafa8:	6977      	ldr	r7, [r6, #20]
		interrupts();
 23fafaa:	f003 f82f 	bl	23fe00c <_Z10interruptsv>
 23fafae:	602f      	str	r7, [r5, #0]
		noInterrupts();
 23fafb0:	f003 f82a 	bl	23fe008 <_Z12noInterruptsv>
		int32_t ret = position;
 23fafb4:	6977      	ldr	r7, [r6, #20]
		interrupts();
 23fafb6:	f003 f829 	bl	23fe00c <_Z10interruptsv>
  
  if(encoder.read()>95){
 23fafba:	2f5f      	cmp	r7, #95	; 0x5f
 23fafbc:	dd06      	ble.n	23fafcc <loop+0x144>
    encoder.write(position=95);
 23fafbe:	275f      	movs	r7, #95	; 0x5f
 23fafc0:	602f      	str	r7, [r5, #0]
		noInterrupts();
 23fafc2:	f003 f821 	bl	23fe008 <_Z12noInterruptsv>
		position = p;
 23fafc6:	6177      	str	r7, [r6, #20]
		interrupts();
 23fafc8:	f003 f820 	bl	23fe00c <_Z10interruptsv>
		noInterrupts();
 23fafcc:	f003 f81c 	bl	23fe008 <_Z12noInterruptsv>
		int32_t ret = position;
 23fafd0:	6977      	ldr	r7, [r6, #20]
		interrupts();
 23fafd2:	f003 f81b 	bl	23fe00c <_Z10interruptsv>
  }
  if(encoder.read()<0){
 23fafd6:	2f00      	cmp	r7, #0
 23fafd8:	da06      	bge.n	23fafe8 <loop+0x160>
    encoder.write(position=0);
 23fafda:	2700      	movs	r7, #0
 23fafdc:	602f      	str	r7, [r5, #0]
		noInterrupts();
 23fafde:	f003 f813 	bl	23fe008 <_Z12noInterruptsv>
		position = p;
 23fafe2:	6177      	str	r7, [r6, #20]
		interrupts();
 23fafe4:	f003 f812 	bl	23fe00c <_Z10interruptsv>
  }

  if(position != lastPos){
 23fafe8:	4e52      	ldr	r6, [pc, #328]	; (23fb134 <loop+0x2ac>)
 23fafea:	682a      	ldr	r2, [r5, #0]
 23fafec:	6833      	ldr	r3, [r6, #0]
 23fafee:	429a      	cmp	r2, r3
 23faff0:	d023      	beq.n	23fb03a <loop+0x1b2>
    Serial.printf("Encoder position %i\n",position);
 23faff2:	f002 ff87 	bl	23fdf04 <_Z16_fetch_usbserialv>
 23faff6:	682a      	ldr	r2, [r5, #0]
 23faff8:	494f      	ldr	r1, [pc, #316]	; (23fb138 <loop+0x2b0>)
 23faffa:	f7ff fc0d 	bl	23fa818 <_ZN5Print6printfEPKcz>
    brightness = position*(MAXBRITE/MAXENCPOS);
 23faffe:	682b      	ldr	r3, [r5, #0]
 23fb000:	4f48      	ldr	r7, [pc, #288]	; (23fb124 <loop+0x29c>)
 23fb002:	005b      	lsls	r3, r3, #1
 23fb004:	603b      	str	r3, [r7, #0]
    Serial.printf("Turning on Hue# %i\n",HUE1);
 23fb006:	f002 ff7d 	bl	23fdf04 <_Z16_fetch_usbserialv>
 23fb00a:	2201      	movs	r2, #1
 23fb00c:	494b      	ldr	r1, [pc, #300]	; (23fb13c <loop+0x2b4>)
 23fb00e:	f7ff fc03 	bl	23fa818 <_ZN5Print6printfEPKcz>
    setHue(HUE1,onOff,HueRainbow[color%7],brightness,SATURATION);
 23fb012:	2307      	movs	r3, #7
 23fb014:	6822      	ldr	r2, [r4, #0]
 23fb016:	4942      	ldr	r1, [pc, #264]	; (23fb120 <loop+0x298>)
 23fb018:	fb92 f3f3 	sdiv	r3, r2, r3
 23fb01c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 23fb020:	1ad2      	subs	r2, r2, r3
 23fb022:	23ff      	movs	r3, #255	; 0xff
 23fb024:	9300      	str	r3, [sp, #0]
 23fb026:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 23fb02a:	493c      	ldr	r1, [pc, #240]	; (23fb11c <loop+0x294>)
 23fb02c:	683b      	ldr	r3, [r7, #0]
 23fb02e:	2001      	movs	r0, #1
 23fb030:	7809      	ldrb	r1, [r1, #0]
 23fb032:	f7ff fc23 	bl	23fa87c <_Z6setHueibiii>
    lastPos = position;  
 23fb036:	682b      	ldr	r3, [r5, #0]
 23fb038:	6033      	str	r3, [r6, #0]
  }

  if(pushButton.isClicked()){
 23fb03a:	4837      	ldr	r0, [pc, #220]	; (23fb118 <loop+0x290>)
 23fb03c:	f7ff fdec 	bl	23fac18 <_ZN6Button9isClickedEv>
 23fb040:	b1a0      	cbz	r0, 23fb06c <loop+0x1e4>
    color++;
    setHue(HUE1,onOff,HueRainbow[color%7],brightness,SATURATION);
 23fb042:	2207      	movs	r2, #7
    color++;
 23fb044:	6823      	ldr	r3, [r4, #0]
    setHue(HUE1,onOff,HueRainbow[color%7],brightness,SATURATION);
 23fb046:	4936      	ldr	r1, [pc, #216]	; (23fb120 <loop+0x298>)
    color++;
 23fb048:	3301      	adds	r3, #1
    setHue(HUE1,onOff,HueRainbow[color%7],brightness,SATURATION);
 23fb04a:	fb93 f2f2 	sdiv	r2, r3, r2
 23fb04e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    color++;
 23fb052:	6023      	str	r3, [r4, #0]
    setHue(HUE1,onOff,HueRainbow[color%7],brightness,SATURATION);
 23fb054:	1a9a      	subs	r2, r3, r2
 23fb056:	23ff      	movs	r3, #255	; 0xff
 23fb058:	9300      	str	r3, [sp, #0]
 23fb05a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 23fb05e:	4b31      	ldr	r3, [pc, #196]	; (23fb124 <loop+0x29c>)
 23fb060:	492e      	ldr	r1, [pc, #184]	; (23fb11c <loop+0x294>)
 23fb062:	2001      	movs	r0, #1
 23fb064:	681b      	ldr	r3, [r3, #0]
 23fb066:	7809      	ldrb	r1, [r1, #0]
 23fb068:	f7ff fc08 	bl	23fa87c <_Z6setHueibiii>
  }

   if (pushButton.isClicked()){
 23fb06c:	482a      	ldr	r0, [pc, #168]	; (23fb118 <loop+0x290>)
 23fb06e:	f7ff fdd3 	bl	23fac18 <_ZN6Button9isClickedEv>
 23fb072:	2800      	cmp	r0, #0
 23fb074:	f000 80d5 	beq.w	23fb222 <loop+0x39a>
      onOff = !onOff;
 23fb078:	4c28      	ldr	r4, [pc, #160]	; (23fb11c <loop+0x294>)
 23fb07a:	7823      	ldrb	r3, [r4, #0]
 23fb07c:	f083 0301 	eor.w	r3, r3, #1
 23fb080:	7023      	strb	r3, [r4, #0]
      Serial.printf("onOff %i\n", onOff);
 23fb082:	f002 ff3f 	bl	23fdf04 <_Z16_fetch_usbserialv>
 23fb086:	7822      	ldrb	r2, [r4, #0]
 23fb088:	4927      	ldr	r1, [pc, #156]	; (23fb128 <loop+0x2a0>)
 23fb08a:	f7ff fbc5 	bl	23fa818 <_ZN5Print6printfEPKcz>
        
      if(onOff){
 23fb08e:	7823      	ldrb	r3, [r4, #0]
 23fb090:	2b00      	cmp	r3, #0
 23fb092:	f000 80b8 	beq.w	23fb206 <loop+0x37e>
        Serial.printf("Turning on Wemo# %i\n",WEMO2);
 23fb096:	f002 ff35 	bl	23fdf04 <_Z16_fetch_usbserialv>
 23fb09a:	2202      	movs	r2, #2
 23fb09c:	4928      	ldr	r1, [pc, #160]	; (23fb140 <loop+0x2b8>)
 23fb09e:	f7ff fbbb 	bl	23fa818 <_ZN5Print6printfEPKcz>
    switchON(outlet);
 23fb0a2:	2002      	movs	r0, #2
        Serial.printf("Turning off Wemo# %i\n",WEMO2);
        wemoWrite(WEMO2,LOW);
      }
    }

}
 23fb0a4:	b003      	add	sp, #12
 23fb0a6:	ecbd 8b02 	vpop	{d8}
 23fb0aa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fb0ae:	f7ff bcef 	b.w	23faa90 <_Z8switchONi>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 23fb0b2:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
        if (std::isinf(number)) {
 23fb0b6:	f04f 32ff 	mov.w	r2, #4294967295
 23fb0ba:	4620      	mov	r0, r4
 23fb0bc:	4639      	mov	r1, r7
 23fb0be:	4b21      	ldr	r3, [pc, #132]	; (23fb144 <loop+0x2bc>)
 23fb0c0:	f7ff fa18 	bl	23fa4f4 <__aeabi_dcmpun>
 23fb0c4:	b948      	cbnz	r0, 23fb0da <loop+0x252>
 23fb0c6:	f04f 32ff 	mov.w	r2, #4294967295
 23fb0ca:	4620      	mov	r0, r4
 23fb0cc:	4639      	mov	r1, r7
 23fb0ce:	4b1d      	ldr	r3, [pc, #116]	; (23fb144 <loop+0x2bc>)
 23fb0d0:	f7ff f9f2 	bl	23fa4b8 <__aeabi_dcmple>
 23fb0d4:	b908      	cbnz	r0, 23fb0da <loop+0x252>
            return print("inf");
 23fb0d6:	491c      	ldr	r1, [pc, #112]	; (23fb148 <loop+0x2c0>)
 23fb0d8:	e70d      	b.n	23faef6 <loop+0x6e>
        if (number > 4294967040.0) {
 23fb0da:	eddf 7a1c 	vldr	s15, [pc, #112]	; 23fb14c <loop+0x2c4>
 23fb0de:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23fb0e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fb0e6:	dd37      	ble.n	23fb158 <loop+0x2d0>
            return print ("ovf"); // constant determined empirically
 23fb0e8:	4919      	ldr	r1, [pc, #100]	; (23fb150 <loop+0x2c8>)
 23fb0ea:	e704      	b.n	23faef6 <loop+0x6e>
 23fb0ec:	1007ad4c 	.word	0x1007ad4c
 23fb0f0:	1007ae0c 	.word	0x1007ae0c
 23fb0f4:	1007adb0 	.word	0x1007adb0
 23fb0f8:	1007ad04 	.word	0x1007ad04
 23fb0fc:	1007ad50 	.word	0x1007ad50
 23fb100:	023ff4d3 	.word	0x023ff4d3
 23fb104:	023ff4da 	.word	0x023ff4da
 23fb108:	023ff4e6 	.word	0x023ff4e6
 23fb10c:	1007a7dc 	.word	0x1007a7dc
 23fb110:	1007ade0 	.word	0x1007ade0
 23fb114:	023ff5c8 	.word	0x023ff5c8
 23fb118:	1007adfc 	.word	0x1007adfc
 23fb11c:	1007addc 	.word	0x1007addc
 23fb120:	1007aca8 	.word	0x1007aca8
 23fb124:	1007ad48 	.word	0x1007ad48
 23fb128:	023ff4f0 	.word	0x023ff4f0
 23fb12c:	1007ad74 	.word	0x1007ad74
 23fb130:	1007adf8 	.word	0x1007adf8
 23fb134:	1007adac 	.word	0x1007adac
 23fb138:	023ff4fa 	.word	0x023ff4fa
 23fb13c:	023ff50f 	.word	0x023ff50f
 23fb140:	023ff523 	.word	0x023ff523
 23fb144:	7fefffff 	.word	0x7fefffff
 23fb148:	023ff4de 	.word	0x023ff4de
 23fb14c:	4f7fffff 	.word	0x4f7fffff
 23fb150:	023ff4e2 	.word	0x023ff4e2
 23fb154:	cf7fffff 	.word	0xcf7fffff
        if (number <-4294967040.0) {
 23fb158:	ed5f 7a02 	vldr	s15, [pc, #-8]	; 23fb154 <loop+0x2cc>
 23fb15c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23fb160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fb164:	d4c0      	bmi.n	23fb0e8 <loop+0x260>
        if (number < 0.0) {
 23fb166:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 23fb16a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fb16e:	d506      	bpl.n	23fb17e <loop+0x2f6>
            n += print('-');
 23fb170:	212d      	movs	r1, #45	; 0x2d
 23fb172:	4831      	ldr	r0, [pc, #196]	; (23fb238 <loop+0x3b0>)
 23fb174:	f002 fc80 	bl	23fda78 <_ZN5Print5printEc>
            number = -number;
 23fb178:	46a0      	mov	r8, r4
 23fb17a:	f105 4900 	add.w	r9, r5, #2147483648	; 0x80000000
        number += rounding;
 23fb17e:	a32c      	add	r3, pc, #176	; (adr r3, 23fb230 <loop+0x3a8>)
 23fb180:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fb184:	4640      	mov	r0, r8
 23fb186:	4649      	mov	r1, r9
 23fb188:	f7fe fd64 	bl	23f9c54 <__adddf3>
 23fb18c:	460d      	mov	r5, r1
 23fb18e:	4604      	mov	r4, r0
        unsigned long int_part = (unsigned long)number;
 23fb190:	f7ff f9ee 	bl	23fa570 <__aeabi_d2uiz>
 23fb194:	4606      	mov	r6, r0
        double remainder = number - (double)int_part;
 23fb196:	f7fe fe99 	bl	23f9ecc <__aeabi_ui2d>
 23fb19a:	460b      	mov	r3, r1
 23fb19c:	4602      	mov	r2, r0
 23fb19e:	4629      	mov	r1, r5
 23fb1a0:	4620      	mov	r0, r4
 23fb1a2:	f7fe fd55 	bl	23f9c50 <__aeabi_dsub>
 23fb1a6:	4604      	mov	r4, r0
 23fb1a8:	460d      	mov	r5, r1
        return printNumber(val, base) + t;
 23fb1aa:	220a      	movs	r2, #10
 23fb1ac:	4631      	mov	r1, r6
 23fb1ae:	4822      	ldr	r0, [pc, #136]	; (23fb238 <loop+0x3b0>)
 23fb1b0:	f002 fc7b 	bl	23fdaaa <_ZN5Print11printNumberEmh>
            n += print(".");
 23fb1b4:	4921      	ldr	r1, [pc, #132]	; (23fb23c <loop+0x3b4>)
 23fb1b6:	4820      	ldr	r0, [pc, #128]	; (23fb238 <loop+0x3b0>)
 23fb1b8:	f002 fc5a 	bl	23fda70 <_ZN5Print5printEPKc>
            remainder *= 10.0;
 23fb1bc:	4b20      	ldr	r3, [pc, #128]	; (23fb240 <loop+0x3b8>)
 23fb1be:	2200      	movs	r2, #0
 23fb1c0:	4620      	mov	r0, r4
 23fb1c2:	4629      	mov	r1, r5
 23fb1c4:	f7fe fefc 	bl	23f9fc0 <__aeabi_dmul>
 23fb1c8:	460f      	mov	r7, r1
 23fb1ca:	4606      	mov	r6, r0
            int toPrint = int(remainder);
 23fb1cc:	f7ff f9a8 	bl	23fa520 <__aeabi_d2iz>
 23fb1d0:	4604      	mov	r4, r0
inline size_t Print::print(T n, int base)
 23fb1d2:	220a      	movs	r2, #10
 23fb1d4:	4601      	mov	r1, r0
 23fb1d6:	4818      	ldr	r0, [pc, #96]	; (23fb238 <loop+0x3b0>)
 23fb1d8:	f7ff faa6 	bl	23fa728 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
            remainder -= toPrint;
 23fb1dc:	4620      	mov	r0, r4
 23fb1de:	f7fe fe85 	bl	23f9eec <__aeabi_i2d>
 23fb1e2:	4602      	mov	r2, r0
 23fb1e4:	460b      	mov	r3, r1
 23fb1e6:	4630      	mov	r0, r6
 23fb1e8:	4639      	mov	r1, r7
 23fb1ea:	f7fe fd31 	bl	23f9c50 <__aeabi_dsub>
            remainder *= 10.0;
 23fb1ee:	2200      	movs	r2, #0
 23fb1f0:	4b13      	ldr	r3, [pc, #76]	; (23fb240 <loop+0x3b8>)
 23fb1f2:	f7fe fee5 	bl	23f9fc0 <__aeabi_dmul>
            int toPrint = int(remainder);
 23fb1f6:	f7ff f993 	bl	23fa520 <__aeabi_d2iz>
 23fb1fa:	220a      	movs	r2, #10
 23fb1fc:	4601      	mov	r1, r0
 23fb1fe:	480e      	ldr	r0, [pc, #56]	; (23fb238 <loop+0x3b0>)
 23fb200:	f7ff fa92 	bl	23fa728 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
        while (digits-- > 0) {
 23fb204:	e67a      	b.n	23faefc <loop+0x74>
        Serial.printf("Turning off Wemo# %i\n",WEMO2);
 23fb206:	f002 fe7d 	bl	23fdf04 <_Z16_fetch_usbserialv>
 23fb20a:	2202      	movs	r2, #2
 23fb20c:	490d      	ldr	r1, [pc, #52]	; (23fb244 <loop+0x3bc>)
 23fb20e:	f7ff fb03 	bl	23fa818 <_ZN5Print6printfEPKcz>
    switchOFF(outlet);
 23fb212:	2002      	movs	r0, #2
}
 23fb214:	b003      	add	sp, #12
 23fb216:	ecbd 8b02 	vpop	{d8}
 23fb21a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fb21e:	f7ff bc99 	b.w	23fab54 <_Z9switchOFFi>
 23fb222:	b003      	add	sp, #12
 23fb224:	ecbd 8b02 	vpop	{d8}
 23fb228:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fb22c:	f3af 8000 	nop.w
 23fb230:	47ae147b 	.word	0x47ae147b
 23fb234:	3f747ae1 	.word	0x3f747ae1
 23fb238:	1007ad50 	.word	0x1007ad50
 23fb23c:	023ff4ab 	.word	0x023ff4ab
 23fb240:	40240000 	.word	0x40240000
 23fb244:	023ff538 	.word	0x023ff538

023fb248 <_GLOBAL__sub_I_hueOn>:
 23fb248:	b510      	push	{r4, lr}
String hueCmd;  // Hue command
 23fb24a:	493e      	ldr	r1, [pc, #248]	; (23fb344 <_GLOBAL__sub_I_hueOn+0xfc>)
 23fb24c:	483e      	ldr	r0, [pc, #248]	; (23fb348 <_GLOBAL__sub_I_hueOn+0x100>)
 23fb24e:	f002 fb35 	bl	23fd8bc <_ZN6StringC1EPK19__FlashStringHelper>
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
 23fb252:	4b3e      	ldr	r3, [pc, #248]	; (23fb34c <_GLOBAL__sub_I_hueOn+0x104>)
 23fb254:	4c3e      	ldr	r4, [pc, #248]	; (23fb350 <_GLOBAL__sub_I_hueOn+0x108>)
 23fb256:	681b      	ldr	r3, [r3, #0]
TCPClient HueClient;
 23fb258:	483e      	ldr	r0, [pc, #248]	; (23fb354 <_GLOBAL__sub_I_hueOn+0x10c>)
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
 23fb25a:	6023      	str	r3, [r4, #0]
 23fb25c:	4b3e      	ldr	r3, [pc, #248]	; (23fb358 <_GLOBAL__sub_I_hueOn+0x110>)
 23fb25e:	681b      	ldr	r3, [r3, #0]
 23fb260:	6063      	str	r3, [r4, #4]
 23fb262:	4b3e      	ldr	r3, [pc, #248]	; (23fb35c <_GLOBAL__sub_I_hueOn+0x114>)
 23fb264:	681b      	ldr	r3, [r3, #0]
 23fb266:	60a3      	str	r3, [r4, #8]
 23fb268:	4b3d      	ldr	r3, [pc, #244]	; (23fb360 <_GLOBAL__sub_I_hueOn+0x118>)
 23fb26a:	681b      	ldr	r3, [r3, #0]
 23fb26c:	60e3      	str	r3, [r4, #12]
 23fb26e:	4b3d      	ldr	r3, [pc, #244]	; (23fb364 <_GLOBAL__sub_I_hueOn+0x11c>)
 23fb270:	681b      	ldr	r3, [r3, #0]
 23fb272:	6123      	str	r3, [r4, #16]
 23fb274:	4b3c      	ldr	r3, [pc, #240]	; (23fb368 <_GLOBAL__sub_I_hueOn+0x120>)
 23fb276:	681b      	ldr	r3, [r3, #0]
 23fb278:	6163      	str	r3, [r4, #20]
 23fb27a:	4b3c      	ldr	r3, [pc, #240]	; (23fb36c <_GLOBAL__sub_I_hueOn+0x124>)
 23fb27c:	681b      	ldr	r3, [r3, #0]
 23fb27e:	61a3      	str	r3, [r4, #24]
TCPClient HueClient;
 23fb280:	f003 fa76 	bl	23fe770 <_ZN9TCPClientC1Ev>
TCPClient WemoClient;
 23fb284:	483a      	ldr	r0, [pc, #232]	; (23fb370 <_GLOBAL__sub_I_hueOn+0x128>)
 23fb286:	f003 fa73 	bl	23fe770 <_ZN9TCPClientC1Ev>
              error_(SYSTEM_ERROR_NONE) {
 23fb28a:	2200      	movs	r2, #0
 23fb28c:	4b39      	ldr	r3, [pc, #228]	; (23fb374 <_GLOBAL__sub_I_hueOn+0x12c>)
        set_system_mode(mode);
 23fb28e:	2003      	movs	r0, #3
              error_(SYSTEM_ERROR_NONE) {
 23fb290:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
 23fb294:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 23fb298:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
 23fb29a:	f001 ff35 	bl	23fd108 <set_system_mode>
int color = rainbow[0], hue = HueRainbow[color % 7];
 23fb29e:	4b36      	ldr	r3, [pc, #216]	; (23fb378 <_GLOBAL__sub_I_hueOn+0x130>)
 23fb2a0:	681a      	ldr	r2, [r3, #0]
 23fb2a2:	2307      	movs	r3, #7
 23fb2a4:	fb92 f3f3 	sdiv	r3, r2, r3
 23fb2a8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 23fb2ac:	1ad3      	subs	r3, r2, r3
 23fb2ae:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 23fb2b2:	4b32      	ldr	r3, [pc, #200]	; (23fb37c <_GLOBAL__sub_I_hueOn+0x134>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fb2b4:	4c32      	ldr	r4, [pc, #200]	; (23fb380 <_GLOBAL__sub_I_hueOn+0x138>)
 23fb2b6:	601a      	str	r2, [r3, #0]
 23fb2b8:	e8d4 3f8f 	ldab	r3, [r4]
 23fb2bc:	07db      	lsls	r3, r3, #31
 23fb2be:	d40a      	bmi.n	23fb2d6 <_GLOBAL__sub_I_hueOn+0x8e>
 23fb2c0:	4620      	mov	r0, r4
 23fb2c2:	f7ff f9b7 	bl	23fa634 <__cxa_guard_acquire>
 23fb2c6:	b130      	cbz	r0, 23fb2d6 <_GLOBAL__sub_I_hueOn+0x8e>
 23fb2c8:	2101      	movs	r1, #1
 23fb2ca:	482e      	ldr	r0, [pc, #184]	; (23fb384 <_GLOBAL__sub_I_hueOn+0x13c>)
 23fb2cc:	f002 f904 	bl	23fd4d8 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fb2d0:	4620      	mov	r0, r4
 23fb2d2:	f7ff f9b4 	bl	23fa63e <__cxa_guard_release>
Adafruit_NeoPixel pixel(PIXELCOUNT, SPI1, WS2812B);
 23fb2d6:	4a2b      	ldr	r2, [pc, #172]	; (23fb384 <_GLOBAL__sub_I_hueOn+0x13c>)
 23fb2d8:	2302      	movs	r3, #2
 23fb2da:	210c      	movs	r1, #12
 23fb2dc:	482a      	ldr	r0, [pc, #168]	; (23fb388 <_GLOBAL__sub_I_hueOn+0x140>)
 23fb2de:	f000 fc00 	bl	23fbae2 <_ZN17Adafruit_NeoPixelC1EtR8SPIClassh>
Adafruit_SSD1306 display(OLED_RESET);
 23fb2e2:	f04f 31ff 	mov.w	r1, #4294967295
 23fb2e6:	4829      	ldr	r0, [pc, #164]	; (23fb38c <_GLOBAL__sub_I_hueOn+0x144>)
 23fb2e8:	f000 ffaa 	bl	23fc240 <_ZN16Adafruit_SSD1306C1Ea>
Adafruit_BME280 bme; // I2C
 23fb2ec:	4828      	ldr	r0, [pc, #160]	; (23fb390 <_GLOBAL__sub_I_hueOn+0x148>)
 23fb2ee:	f000 f88d 	bl	23fb40c <_ZN15Adafruit_BME280C1Ev>
      _pullUp = pullUp;
 23fb2f2:	2400      	movs	r4, #0
      _buttonPin = buttonPin;
 23fb2f4:	2103      	movs	r1, #3
 23fb2f6:	4b27      	ldr	r3, [pc, #156]	; (23fb394 <_GLOBAL__sub_I_hueOn+0x14c>)
        pinMode(_buttonPin,INPUT_PULLDOWN);       
 23fb2f8:	4608      	mov	r0, r1
      _buttonPin = buttonPin;
 23fb2fa:	6019      	str	r1, [r3, #0]
      _pullUp = pullUp;
 23fb2fc:	721c      	strb	r4, [r3, #8]
        pinMode(_buttonPin,INPUT_PULLDOWN);       
 23fb2fe:	f003 fb95 	bl	23fea2c <pinMode>
      _buttonPin = buttonPin;
 23fb302:	200f      	movs	r0, #15
 23fb304:	4b24      	ldr	r3, [pc, #144]	; (23fb398 <_GLOBAL__sub_I_hueOn+0x150>)
        pinMode(_buttonPin,INPUT_PULLDOWN);       
 23fb306:	2103      	movs	r1, #3
      _buttonPin = buttonPin;
 23fb308:	6018      	str	r0, [r3, #0]
      _pullUp = pullUp;
 23fb30a:	721c      	strb	r4, [r3, #8]
        pinMode(_buttonPin,INPUT_PULLDOWN);       
 23fb30c:	f003 fb8e 	bl	23fea2c <pinMode>
Encoder encoder(PINA, PINB);
 23fb310:	2205      	movs	r2, #5
 23fb312:	2104      	movs	r1, #4
 23fb314:	4821      	ldr	r0, [pc, #132]	; (23fb39c <_GLOBAL__sub_I_hueOn+0x154>)
 23fb316:	f7ff fc95 	bl	23fac44 <_ZN7EncoderC1Ett>
#define Stack_ACK 4
#define Stack_Parameter 5
#define Stack_CheckSum 7
#define Stack_End 9

class DFRobotDFPlayerMini {
 23fb31a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 23fb31e:	4b20      	ldr	r3, [pc, #128]	; (23fb3a0 <_GLOBAL__sub_I_hueOn+0x158>)
 23fb320:	609a      	str	r2, [r3, #8]
 23fb322:	4a20      	ldr	r2, [pc, #128]	; (23fb3a4 <_GLOBAL__sub_I_hueOn+0x15c>)
 23fb324:	84dc      	strh	r4, [r3, #38]	; 0x26
 23fb326:	f8d2 1002 	ldr.w	r1, [r2, #2]
 23fb32a:	f8c3 1016 	str.w	r1, [r3, #22]
 23fb32e:	f8d2 1006 	ldr.w	r1, [r2, #6]
 23fb332:	8952      	ldrh	r2, [r2, #10]
 23fb334:	f8c3 101a 	str.w	r1, [r3, #26]
 23fb338:	83da      	strh	r2, [r3, #30]
 23fb33a:	f44f 7200 	mov.w	r2, #512	; 0x200
 23fb33e:	841a      	strh	r2, [r3, #32]
}
 23fb340:	bd10      	pop	{r4, pc}
 23fb342:	bf00      	nop
 23fb344:	023ff4af 	.word	0x023ff4af
 23fb348:	1007ad9c 	.word	0x1007ad9c
 23fb34c:	1007acc4 	.word	0x1007acc4
 23fb350:	1007aca8 	.word	0x1007aca8
 23fb354:	1007ac8c 	.word	0x1007ac8c
 23fb358:	1007a7d0 	.word	0x1007a7d0
 23fb35c:	1007a7d8 	.word	0x1007a7d8
 23fb360:	1007a7c8 	.word	0x1007a7c8
 23fb364:	1007a7c4 	.word	0x1007a7c4
 23fb368:	1007a7cc 	.word	0x1007a7cc
 23fb36c:	1007a7d4 	.word	0x1007a7d4
 23fb370:	1007acd4 	.word	0x1007acd4
 23fb374:	1007acc8 	.word	0x1007acc8
 23fb378:	1007a7dc 	.word	0x1007a7dc
 23fb37c:	1007ad98 	.word	0x1007ad98
 23fb380:	1007ac78 	.word	0x1007ac78
 23fb384:	1007ac7c 	.word	0x1007ac7c
 23fb388:	1007ade0 	.word	0x1007ade0
 23fb38c:	1007ad50 	.word	0x1007ad50
 23fb390:	1007ad04 	.word	0x1007ad04
 23fb394:	1007adfc 	.word	0x1007adfc
 23fb398:	1007ad8c 	.word	0x1007ad8c
 23fb39c:	1007ad74 	.word	0x1007ad74
 23fb3a0:	1007adb4 	.word	0x1007adb4
 23fb3a4:	023ff07c 	.word	0x023ff07c

023fb3a8 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
 23fb3a8:	4770      	bx	lr

023fb3aa <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
 23fb3aa:	b510      	push	{r4, lr}
 23fb3ac:	4604      	mov	r4, r0
  }
 23fb3ae:	2110      	movs	r1, #16
 23fb3b0:	f7ff f931 	bl	23fa616 <_ZdlPvj>
 23fb3b4:	4620      	mov	r0, r4
 23fb3b6:	bd10      	pop	{r4, pc}

023fb3b8 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 23fb3b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fb3ba:	4604      	mov	r4, r0
  {
    if (default_ && clock_ == 0)
 23fb3bc:	7922      	ldrb	r2, [r4, #4]
  virtual size_t printTo(Print& p) const
 23fb3be:	4608      	mov	r0, r1
    if (default_ && clock_ == 0)
 23fb3c0:	68a3      	ldr	r3, [r4, #8]
 23fb3c2:	b132      	cbz	r2, 23fb3d2 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
 23fb3c4:	b9a3      	cbnz	r3, 23fb3f0 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
 23fb3c6:	490b      	ldr	r1, [pc, #44]	; (23fb3f4 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
 23fb3c8:	b002      	add	sp, #8
 23fb3ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
 23fb3ce:	f002 bb4f 	b.w	23fda70 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 23fb3d2:	4a09      	ldr	r2, [pc, #36]	; (23fb3f8 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
 23fb3d4:	7b26      	ldrb	r6, [r4, #12]
 23fb3d6:	4d09      	ldr	r5, [pc, #36]	; (23fb3fc <_ZNK8particle11SPISettings7printToER5Print+0x44>)
 23fb3d8:	4909      	ldr	r1, [pc, #36]	; (23fb400 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
 23fb3da:	7b64      	ldrb	r4, [r4, #13]
 23fb3dc:	2e01      	cmp	r6, #1
 23fb3de:	bf18      	it	ne
 23fb3e0:	4629      	movne	r1, r5
 23fb3e2:	e9cd 1400 	strd	r1, r4, [sp]
 23fb3e6:	4907      	ldr	r1, [pc, #28]	; (23fb404 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
 23fb3e8:	f7ff fa16 	bl	23fa818 <_ZN5Print6printfEPKcz>
  }
 23fb3ec:	b002      	add	sp, #8
 23fb3ee:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 23fb3f0:	4a05      	ldr	r2, [pc, #20]	; (23fb408 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
 23fb3f2:	e7ef      	b.n	23fb3d4 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
 23fb3f4:	023ff601 	.word	0x023ff601
 23fb3f8:	023ff4af 	.word	0x023ff4af
 23fb3fc:	023ff5fd 	.word	0x023ff5fd
 23fb400:	023ff5f9 	.word	0x023ff5f9
 23fb404:	023ff617 	.word	0x023ff617
 23fb408:	023ff5f0 	.word	0x023ff5f0

023fb40c <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
 23fb40c:	f04f 33ff 	mov.w	r3, #4294967295
 23fb410:	6103      	str	r3, [r0, #16]
{ }
 23fb412:	4770      	bx	lr

023fb414 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
 23fb414:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
 23fb416:	4c0a      	ldr	r4, [pc, #40]	; (23fb440 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x2c>)
 23fb418:	e8d4 1f8f 	ldab	r1, [r4]
 23fb41c:	f011 0101 	ands.w	r1, r1, #1
 23fb420:	d10b      	bne.n	23fb43a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x26>
 23fb422:	4620      	mov	r0, r4
 23fb424:	9101      	str	r1, [sp, #4]
 23fb426:	f7ff f905 	bl	23fa634 <__cxa_guard_acquire>
 23fb42a:	9901      	ldr	r1, [sp, #4]
 23fb42c:	b128      	cbz	r0, 23fb43a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x26>
 23fb42e:	4805      	ldr	r0, [pc, #20]	; (23fb444 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 23fb430:	f002 f852 	bl	23fd4d8 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fb434:	4620      	mov	r0, r4
 23fb436:	f7ff f902 	bl	23fa63e <__cxa_guard_release>
        return instance;
    }
 23fb43a:	4802      	ldr	r0, [pc, #8]	; (23fb444 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 23fb43c:	b002      	add	sp, #8
 23fb43e:	bd10      	pop	{r4, pc}
 23fb440:	1007ae10 	.word	0x1007ae10
 23fb444:	1007ae14 	.word	0x1007ae14

023fb448 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
 23fb448:	b508      	push	{r3, lr}
        instance().endTransaction();
 23fb44a:	f7ff ffe3 	bl	23fb414 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
 23fb44e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
 23fb452:	f002 b88a 	b.w	23fd56a <_ZN8SPIClass14endTransactionEv>

023fb456 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
 23fb456:	b507      	push	{r0, r1, r2, lr}
 23fb458:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
 23fb45a:	f7ff ffdb 	bl	23fb414 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fb45e:	9901      	ldr	r1, [sp, #4]
    }
 23fb460:	b003      	add	sp, #12
 23fb462:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
 23fb466:	f002 b899 	b.w	23fd59c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

023fb46a <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 23fb46a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
 23fb46e:	f990 3013 	ldrsb.w	r3, [r0, #19]
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 23fb472:	4605      	mov	r5, r0
    if (_sck == -1)
 23fb474:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 23fb476:	460f      	mov	r7, r1
    if (_sck == -1)
 23fb478:	d106      	bne.n	23fb488 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 23fb47a:	f7ff ffcb 	bl	23fb414 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fb47e:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
 23fb480:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 23fb484:	f002 b950 	b.w	23fd728 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
 23fb488:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
 23fb48a:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
 23fb48c:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
 23fb490:	f995 0013 	ldrsb.w	r0, [r5, #19]
 23fb494:	2100      	movs	r1, #0
 23fb496:	b280      	uxth	r0, r0
 23fb498:	f003 fad9 	bl	23fea4e <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
 23fb49c:	f995 0011 	ldrsb.w	r0, [r5, #17]
 23fb4a0:	fa08 f106 	lsl.w	r1, r8, r6
 23fb4a4:	4039      	ands	r1, r7
 23fb4a6:	b280      	uxth	r0, r0
 23fb4a8:	f003 fad1 	bl	23fea4e <digitalWrite>
        digitalWrite(_sck, HIGH);
 23fb4ac:	f995 0013 	ldrsb.w	r0, [r5, #19]
 23fb4b0:	2101      	movs	r1, #1
 23fb4b2:	b280      	uxth	r0, r0
 23fb4b4:	f003 facb 	bl	23fea4e <digitalWrite>
        if (digitalRead(_miso))
 23fb4b8:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
 23fb4bc:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
 23fb4be:	b280      	uxth	r0, r0
        reply <<= 1;
 23fb4c0:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
 23fb4c2:	f003 fadd 	bl	23fea80 <digitalRead>
 23fb4c6:	b108      	cbz	r0, 23fb4cc <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
 23fb4c8:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
 23fb4cc:	3e01      	subs	r6, #1
 23fb4ce:	d2df      	bcs.n	23fb490 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
 23fb4d0:	4620      	mov	r0, r4
 23fb4d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

023fb4d8 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
 23fb4d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
 23fb4da:	f990 3010 	ldrsb.w	r3, [r0, #16]
void Adafruit_BME280::write8(byte reg, byte value) {
 23fb4de:	4604      	mov	r4, r0
    if (_cs == -1) {
 23fb4e0:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
 23fb4e2:	460e      	mov	r6, r1
 23fb4e4:	4615      	mov	r5, r2
    if (_cs == -1) {
 23fb4e6:	d113      	bne.n	23fb510 <_ZN15Adafruit_BME2806write8Ehh+0x38>
        _wire -> beginTransmission((uint8_t)_i2caddr);
 23fb4e8:	7901      	ldrb	r1, [r0, #4]
 23fb4ea:	6800      	ldr	r0, [r0, #0]
 23fb4ec:	f002 fe70 	bl	23fe1d0 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
 23fb4f0:	6820      	ldr	r0, [r4, #0]
 23fb4f2:	4631      	mov	r1, r6
 23fb4f4:	6803      	ldr	r3, [r0, #0]
 23fb4f6:	689b      	ldr	r3, [r3, #8]
 23fb4f8:	4798      	blx	r3
        _wire -> write((uint8_t)value);
 23fb4fa:	6820      	ldr	r0, [r4, #0]
 23fb4fc:	4629      	mov	r1, r5
 23fb4fe:	6803      	ldr	r3, [r0, #0]
 23fb500:	689b      	ldr	r3, [r3, #8]
 23fb502:	4798      	blx	r3
        _wire -> endTransmission();
 23fb504:	6820      	ldr	r0, [r4, #0]
        spixfer(value);
        digitalWrite(_cs, HIGH);
    if (_sck == -1)
        SPI.endTransaction(); // release the SPI bus
    }
}
 23fb506:	b004      	add	sp, #16
 23fb508:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _wire -> endTransmission();
 23fb50c:	f002 be6b 	b.w	23fe1e6 <_ZN7TwoWire15endTransmissionEv>
        if (_sck == -1)
 23fb510:	f990 3013 	ldrsb.w	r3, [r0, #19]
 23fb514:	3301      	adds	r3, #1
 23fb516:	d10c      	bne.n	23fb532 <_ZN15Adafruit_BME2806write8Ehh+0x5a>
      dataMode_{dataMode}
 23fb518:	4b16      	ldr	r3, [pc, #88]	; (23fb574 <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23fb51a:	4668      	mov	r0, sp
 23fb51c:	9300      	str	r3, [sp, #0]
 23fb51e:	2300      	movs	r3, #0
 23fb520:	f88d 3004 	strb.w	r3, [sp, #4]
 23fb524:	4b14      	ldr	r3, [pc, #80]	; (23fb578 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
 23fb526:	9302      	str	r3, [sp, #8]
 23fb528:	2301      	movs	r3, #1
 23fb52a:	f8ad 300c 	strh.w	r3, [sp, #12]
 23fb52e:	f7ff ff92 	bl	23fb456 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
 23fb532:	f994 0010 	ldrsb.w	r0, [r4, #16]
 23fb536:	2100      	movs	r1, #0
 23fb538:	b280      	uxth	r0, r0
 23fb53a:	f003 fa88 	bl	23fea4e <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
 23fb53e:	f006 017f 	and.w	r1, r6, #127	; 0x7f
 23fb542:	4620      	mov	r0, r4
 23fb544:	f7ff ff91 	bl	23fb46a <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
 23fb548:	4629      	mov	r1, r5
 23fb54a:	4620      	mov	r0, r4
 23fb54c:	f7ff ff8d 	bl	23fb46a <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
 23fb550:	f994 0010 	ldrsb.w	r0, [r4, #16]
 23fb554:	2101      	movs	r1, #1
 23fb556:	b280      	uxth	r0, r0
 23fb558:	f003 fa79 	bl	23fea4e <digitalWrite>
    if (_sck == -1)
 23fb55c:	f994 3013 	ldrsb.w	r3, [r4, #19]
 23fb560:	3301      	adds	r3, #1
 23fb562:	d104      	bne.n	23fb56e <_ZN15Adafruit_BME2806write8Ehh+0x96>
}
 23fb564:	b004      	add	sp, #16
 23fb566:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SPI.endTransaction(); // release the SPI bus
 23fb56a:	f7ff bf6d 	b.w	23fb448 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
 23fb56e:	b004      	add	sp, #16
 23fb570:	bd70      	pop	{r4, r5, r6, pc}
 23fb572:	bf00      	nop
 23fb574:	023ff63c 	.word	0x023ff63c
 23fb578:	0007a120 	.word	0x0007a120

023fb57c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
 23fb57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fb57e:	4604      	mov	r4, r0
    _measReg.osrs_t   = tempSampling;
 23fb580:	00db      	lsls	r3, r3, #3
 23fb582:	f002 0207 	and.w	r2, r2, #7
 23fb586:	f003 0338 	and.w	r3, r3, #56	; 0x38
 23fb58a:	4313      	orrs	r3, r2
 23fb58c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
 23fb590:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
 23fb594:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
 23fb598:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
 23fb59c:	f89d 501c 	ldrb.w	r5, [sp, #28]
 23fb5a0:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
 23fb5a4:	f366 1347 	bfi	r3, r6, #5, #3
 23fb5a8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
 23fb5ac:	00ed      	lsls	r5, r5, #3
 23fb5ae:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 23fb5b2:	f007 0707 	and.w	r7, r7, #7
 23fb5b6:	f005 0538 	and.w	r5, r5, #56	; 0x38
 23fb5ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 23fb5be:	433d      	orrs	r5, r7
 23fb5c0:	431d      	orrs	r5, r3
 23fb5c2:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
 23fb5c6:	f006 0207 	and.w	r2, r6, #7
 23fb5ca:	21f2      	movs	r1, #242	; 0xf2
 23fb5cc:	f7ff ff84 	bl	23fb4d8 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
 23fb5d0:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
 23fb5d4:	4620      	mov	r0, r4
 23fb5d6:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 23fb5da:	f002 0107 	and.w	r1, r2, #7
 23fb5de:	009b      	lsls	r3, r3, #2
 23fb5e0:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 23fb5e4:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
 23fb5e8:	21f5      	movs	r1, #245	; 0xf5
 23fb5ea:	f7ff ff75 	bl	23fb4d8 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
 23fb5ee:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
 23fb5f2:	4620      	mov	r0, r4
 23fb5f4:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 23fb5f8:	f002 0107 	and.w	r1, r2, #7
 23fb5fc:	009b      	lsls	r3, r3, #2
 23fb5fe:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 23fb602:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
 23fb606:	21f4      	movs	r1, #244	; 0xf4
}
 23fb608:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
 23fb60c:	f7ff bf64 	b.w	23fb4d8 <_ZN15Adafruit_BME2806write8Ehh>

023fb610 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
 23fb610:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
 23fb612:	f990 3010 	ldrsb.w	r3, [r0, #16]
uint8_t Adafruit_BME280::read8(byte reg) {
 23fb616:	4604      	mov	r4, r0
    if (_cs == -1) {
 23fb618:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
 23fb61a:	460d      	mov	r5, r1
 23fb61c:	b085      	sub	sp, #20
    if (_cs == -1) {
 23fb61e:	d118      	bne.n	23fb652 <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
 23fb620:	7901      	ldrb	r1, [r0, #4]
 23fb622:	6800      	ldr	r0, [r0, #0]
 23fb624:	f002 fdd4 	bl	23fe1d0 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
 23fb628:	6820      	ldr	r0, [r4, #0]
 23fb62a:	4629      	mov	r1, r5
 23fb62c:	6803      	ldr	r3, [r0, #0]
 23fb62e:	689b      	ldr	r3, [r3, #8]
 23fb630:	4798      	blx	r3
        _wire -> endTransmission();
 23fb632:	6820      	ldr	r0, [r4, #0]
 23fb634:	f002 fdd7 	bl	23fe1e6 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
 23fb638:	2201      	movs	r2, #1
 23fb63a:	7921      	ldrb	r1, [r4, #4]
 23fb63c:	6820      	ldr	r0, [r4, #0]
 23fb63e:	f002 fdc4 	bl	23fe1ca <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
 23fb642:	6820      	ldr	r0, [r4, #0]
 23fb644:	6803      	ldr	r3, [r0, #0]
 23fb646:	695b      	ldr	r3, [r3, #20]
 23fb648:	4798      	blx	r3
 23fb64a:	b2c5      	uxtb	r5, r0
        digitalWrite(_cs, HIGH);
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }
    return value;
}
 23fb64c:	4628      	mov	r0, r5
 23fb64e:	b005      	add	sp, #20
 23fb650:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
 23fb652:	f990 3013 	ldrsb.w	r3, [r0, #19]
 23fb656:	3301      	adds	r3, #1
 23fb658:	d10c      	bne.n	23fb674 <_ZN15Adafruit_BME2805read8Eh+0x64>
 23fb65a:	4b15      	ldr	r3, [pc, #84]	; (23fb6b0 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23fb65c:	4668      	mov	r0, sp
 23fb65e:	9300      	str	r3, [sp, #0]
 23fb660:	2300      	movs	r3, #0
 23fb662:	f88d 3004 	strb.w	r3, [sp, #4]
 23fb666:	4b13      	ldr	r3, [pc, #76]	; (23fb6b4 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
 23fb668:	9302      	str	r3, [sp, #8]
 23fb66a:	2301      	movs	r3, #1
 23fb66c:	f8ad 300c 	strh.w	r3, [sp, #12]
 23fb670:	f7ff fef1 	bl	23fb456 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
 23fb674:	f994 0010 	ldrsb.w	r0, [r4, #16]
 23fb678:	2100      	movs	r1, #0
 23fb67a:	b280      	uxth	r0, r0
 23fb67c:	f003 f9e7 	bl	23fea4e <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
 23fb680:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23fb684:	4620      	mov	r0, r4
 23fb686:	f7ff fef0 	bl	23fb46a <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
 23fb68a:	2100      	movs	r1, #0
 23fb68c:	4620      	mov	r0, r4
 23fb68e:	f7ff feec 	bl	23fb46a <_ZN15Adafruit_BME2807spixferEh>
 23fb692:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
 23fb694:	f994 0010 	ldrsb.w	r0, [r4, #16]
 23fb698:	2101      	movs	r1, #1
 23fb69a:	b280      	uxth	r0, r0
 23fb69c:	f003 f9d7 	bl	23fea4e <digitalWrite>
        if (_sck == -1)
 23fb6a0:	f994 3013 	ldrsb.w	r3, [r4, #19]
 23fb6a4:	3301      	adds	r3, #1
 23fb6a6:	d1d1      	bne.n	23fb64c <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
 23fb6a8:	f7ff fece 	bl	23fb448 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
 23fb6ac:	e7ce      	b.n	23fb64c <_ZN15Adafruit_BME2805read8Eh+0x3c>
 23fb6ae:	bf00      	nop
 23fb6b0:	023ff63c 	.word	0x023ff63c
 23fb6b4:	0007a120 	.word	0x0007a120

023fb6b8 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
 23fb6b8:	21f3      	movs	r1, #243	; 0xf3
{
 23fb6ba:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
 23fb6bc:	f7ff ffa8 	bl	23fb610 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
 23fb6c0:	f000 0001 	and.w	r0, r0, #1
 23fb6c4:	bd08      	pop	{r3, pc}
	...

023fb6c8 <_ZN15Adafruit_BME2806read16Eh>:
{
 23fb6c8:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
 23fb6ca:	f990 3010 	ldrsb.w	r3, [r0, #16]
{
 23fb6ce:	4604      	mov	r4, r0
    if (_cs == -1) {
 23fb6d0:	3301      	adds	r3, #1
{
 23fb6d2:	460d      	mov	r5, r1
 23fb6d4:	b085      	sub	sp, #20
    if (_cs == -1) {
 23fb6d6:	d11f      	bne.n	23fb718 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
 23fb6d8:	7901      	ldrb	r1, [r0, #4]
 23fb6da:	6800      	ldr	r0, [r0, #0]
 23fb6dc:	f002 fd78 	bl	23fe1d0 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
 23fb6e0:	6820      	ldr	r0, [r4, #0]
 23fb6e2:	4629      	mov	r1, r5
 23fb6e4:	6803      	ldr	r3, [r0, #0]
 23fb6e6:	689b      	ldr	r3, [r3, #8]
 23fb6e8:	4798      	blx	r3
        _wire -> endTransmission();
 23fb6ea:	6820      	ldr	r0, [r4, #0]
 23fb6ec:	f002 fd7b 	bl	23fe1e6 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
 23fb6f0:	2202      	movs	r2, #2
 23fb6f2:	7921      	ldrb	r1, [r4, #4]
 23fb6f4:	6820      	ldr	r0, [r4, #0]
 23fb6f6:	f002 fd68 	bl	23fe1ca <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
 23fb6fa:	6820      	ldr	r0, [r4, #0]
 23fb6fc:	6803      	ldr	r3, [r0, #0]
 23fb6fe:	695b      	ldr	r3, [r3, #20]
 23fb700:	4798      	blx	r3
 23fb702:	4605      	mov	r5, r0
 23fb704:	6820      	ldr	r0, [r4, #0]
 23fb706:	6803      	ldr	r3, [r0, #0]
 23fb708:	695b      	ldr	r3, [r3, #20]
 23fb70a:	4798      	blx	r3
 23fb70c:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 23fb710:	b285      	uxth	r5, r0
}
 23fb712:	4628      	mov	r0, r5
 23fb714:	b005      	add	sp, #20
 23fb716:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
 23fb718:	f990 3013 	ldrsb.w	r3, [r0, #19]
 23fb71c:	3301      	adds	r3, #1
 23fb71e:	d10c      	bne.n	23fb73a <_ZN15Adafruit_BME2806read16Eh+0x72>
 23fb720:	4b18      	ldr	r3, [pc, #96]	; (23fb784 <_ZN15Adafruit_BME2806read16Eh+0xbc>)
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23fb722:	4668      	mov	r0, sp
 23fb724:	9300      	str	r3, [sp, #0]
 23fb726:	2300      	movs	r3, #0
 23fb728:	f88d 3004 	strb.w	r3, [sp, #4]
 23fb72c:	4b16      	ldr	r3, [pc, #88]	; (23fb788 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
 23fb72e:	9302      	str	r3, [sp, #8]
 23fb730:	2301      	movs	r3, #1
 23fb732:	f8ad 300c 	strh.w	r3, [sp, #12]
 23fb736:	f7ff fe8e 	bl	23fb456 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
 23fb73a:	f994 0010 	ldrsb.w	r0, [r4, #16]
 23fb73e:	2100      	movs	r1, #0
 23fb740:	b280      	uxth	r0, r0
 23fb742:	f003 f984 	bl	23fea4e <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
 23fb746:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23fb74a:	4620      	mov	r0, r4
 23fb74c:	f7ff fe8d 	bl	23fb46a <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
 23fb750:	2100      	movs	r1, #0
 23fb752:	4620      	mov	r0, r4
 23fb754:	f7ff fe89 	bl	23fb46a <_ZN15Adafruit_BME2807spixferEh>
 23fb758:	2100      	movs	r1, #0
 23fb75a:	4605      	mov	r5, r0
 23fb75c:	4620      	mov	r0, r4
 23fb75e:	f7ff fe84 	bl	23fb46a <_ZN15Adafruit_BME2807spixferEh>
 23fb762:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 23fb766:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
 23fb768:	f994 0010 	ldrsb.w	r0, [r4, #16]
 23fb76c:	2101      	movs	r1, #1
 23fb76e:	b280      	uxth	r0, r0
 23fb770:	f003 f96d 	bl	23fea4e <digitalWrite>
        if (_sck == -1)
 23fb774:	f994 3013 	ldrsb.w	r3, [r4, #19]
 23fb778:	3301      	adds	r3, #1
 23fb77a:	d1ca      	bne.n	23fb712 <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
 23fb77c:	f7ff fe64 	bl	23fb448 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
 23fb780:	e7c7      	b.n	23fb712 <_ZN15Adafruit_BME2806read16Eh+0x4a>
 23fb782:	bf00      	nop
 23fb784:	023ff63c 	.word	0x023ff63c
 23fb788:	0007a120 	.word	0x0007a120

023fb78c <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
 23fb78c:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
 23fb78e:	f7ff ff9b 	bl	23fb6c8 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
 23fb792:	ba40      	rev16	r0, r0
}
 23fb794:	b280      	uxth	r0, r0
 23fb796:	bd08      	pop	{r3, pc}

023fb798 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
 23fb798:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 23fb79a:	2188      	movs	r1, #136	; 0x88
{
 23fb79c:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 23fb79e:	f7ff fff5 	bl	23fb78c <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
 23fb7a2:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 23fb7a4:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
 23fb7a6:	4620      	mov	r0, r4
 23fb7a8:	f7ff fff0 	bl	23fb78c <_ZN15Adafruit_BME2809read16_LEEh>
 23fb7ac:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
 23fb7ae:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
 23fb7b0:	4620      	mov	r0, r4
 23fb7b2:	f7ff ffeb 	bl	23fb78c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 23fb7b6:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
 23fb7b8:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 23fb7ba:	4620      	mov	r0, r4
 23fb7bc:	f7ff ffe6 	bl	23fb78c <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
 23fb7c0:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 23fb7c2:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
 23fb7c4:	4620      	mov	r0, r4
 23fb7c6:	f7ff ffe1 	bl	23fb78c <_ZN15Adafruit_BME2809read16_LEEh>
 23fb7ca:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
 23fb7cc:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
 23fb7ce:	4620      	mov	r0, r4
 23fb7d0:	f7ff ffdc 	bl	23fb78c <_ZN15Adafruit_BME2809read16_LEEh>
 23fb7d4:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
 23fb7d6:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
 23fb7d8:	4620      	mov	r0, r4
 23fb7da:	f7ff ffd7 	bl	23fb78c <_ZN15Adafruit_BME2809read16_LEEh>
 23fb7de:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
 23fb7e0:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
 23fb7e2:	4620      	mov	r0, r4
 23fb7e4:	f7ff ffd2 	bl	23fb78c <_ZN15Adafruit_BME2809read16_LEEh>
 23fb7e8:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
 23fb7ea:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
 23fb7ec:	4620      	mov	r0, r4
 23fb7ee:	f7ff ffcd 	bl	23fb78c <_ZN15Adafruit_BME2809read16_LEEh>
 23fb7f2:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
 23fb7f4:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
 23fb7f6:	4620      	mov	r0, r4
 23fb7f8:	f7ff ffc8 	bl	23fb78c <_ZN15Adafruit_BME2809read16_LEEh>
 23fb7fc:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
 23fb7fe:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
 23fb800:	4620      	mov	r0, r4
 23fb802:	f7ff ffc3 	bl	23fb78c <_ZN15Adafruit_BME2809read16_LEEh>
 23fb806:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
 23fb808:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
 23fb80a:	4620      	mov	r0, r4
 23fb80c:	f7ff ffbe 	bl	23fb78c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 23fb810:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
 23fb812:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 23fb814:	4620      	mov	r0, r4
 23fb816:	f7ff fefb 	bl	23fb610 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
 23fb81a:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 23fb81c:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
 23fb820:	4620      	mov	r0, r4
 23fb822:	f7ff ffb3 	bl	23fb78c <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 23fb826:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
 23fb828:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 23fb82a:	4620      	mov	r0, r4
 23fb82c:	f7ff fef0 	bl	23fb610 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
 23fb830:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 23fb832:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
 23fb836:	4620      	mov	r0, r4
 23fb838:	f7ff feea 	bl	23fb610 <_ZN15Adafruit_BME2805read8Eh>
 23fb83c:	21e5      	movs	r1, #229	; 0xe5
 23fb83e:	4605      	mov	r5, r0
 23fb840:	4620      	mov	r0, r4
 23fb842:	f7ff fee5 	bl	23fb610 <_ZN15Adafruit_BME2805read8Eh>
 23fb846:	f000 030f 	and.w	r3, r0, #15
 23fb84a:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
 23fb84e:	21e6      	movs	r1, #230	; 0xe6
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
 23fb850:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
 23fb852:	4620      	mov	r0, r4
 23fb854:	f7ff fedc 	bl	23fb610 <_ZN15Adafruit_BME2805read8Eh>
 23fb858:	21e5      	movs	r1, #229	; 0xe5
 23fb85a:	4605      	mov	r5, r0
 23fb85c:	4620      	mov	r0, r4
 23fb85e:	f7ff fed7 	bl	23fb610 <_ZN15Adafruit_BME2805read8Eh>
 23fb862:	f3c0 1307 	ubfx	r3, r0, #4, #8
 23fb866:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
 23fb86a:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
 23fb86c:	21e7      	movs	r1, #231	; 0xe7
 23fb86e:	4620      	mov	r0, r4
 23fb870:	f7ff fece 	bl	23fb610 <_ZN15Adafruit_BME2805read8Eh>
 23fb874:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
 23fb878:	bd38      	pop	{r3, r4, r5, pc}
	...

023fb87c <_ZN15Adafruit_BME2806read24Eh>:
{
 23fb87c:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
 23fb87e:	f990 3010 	ldrsb.w	r3, [r0, #16]
{
 23fb882:	4604      	mov	r4, r0
    if (_cs == -1) {
 23fb884:	3301      	adds	r3, #1
{
 23fb886:	460d      	mov	r5, r1
 23fb888:	b085      	sub	sp, #20
    if (_cs == -1) {
 23fb88a:	d123      	bne.n	23fb8d4 <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
 23fb88c:	7901      	ldrb	r1, [r0, #4]
 23fb88e:	6800      	ldr	r0, [r0, #0]
 23fb890:	f002 fc9e 	bl	23fe1d0 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
 23fb894:	6820      	ldr	r0, [r4, #0]
 23fb896:	4629      	mov	r1, r5
 23fb898:	6803      	ldr	r3, [r0, #0]
 23fb89a:	689b      	ldr	r3, [r3, #8]
 23fb89c:	4798      	blx	r3
        _wire -> endTransmission();
 23fb89e:	6820      	ldr	r0, [r4, #0]
 23fb8a0:	f002 fca1 	bl	23fe1e6 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
 23fb8a4:	2203      	movs	r2, #3
 23fb8a6:	7921      	ldrb	r1, [r4, #4]
 23fb8a8:	6820      	ldr	r0, [r4, #0]
 23fb8aa:	f002 fc8e 	bl	23fe1ca <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
 23fb8ae:	6820      	ldr	r0, [r4, #0]
 23fb8b0:	6803      	ldr	r3, [r0, #0]
 23fb8b2:	695b      	ldr	r3, [r3, #20]
 23fb8b4:	4798      	blx	r3
        value <<= 8;
 23fb8b6:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
 23fb8b8:	6820      	ldr	r0, [r4, #0]
 23fb8ba:	6803      	ldr	r3, [r0, #0]
 23fb8bc:	695b      	ldr	r3, [r3, #20]
 23fb8be:	4798      	blx	r3
 23fb8c0:	4328      	orrs	r0, r5
        value <<= 8;
 23fb8c2:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
 23fb8c4:	6820      	ldr	r0, [r4, #0]
 23fb8c6:	6803      	ldr	r3, [r0, #0]
 23fb8c8:	695b      	ldr	r3, [r3, #20]
 23fb8ca:	4798      	blx	r3
 23fb8cc:	4305      	orrs	r5, r0
}
 23fb8ce:	4628      	mov	r0, r5
 23fb8d0:	b005      	add	sp, #20
 23fb8d2:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
 23fb8d4:	f990 3013 	ldrsb.w	r3, [r0, #19]
 23fb8d8:	3301      	adds	r3, #1
 23fb8da:	d10c      	bne.n	23fb8f6 <_ZN15Adafruit_BME2806read24Eh+0x7a>
 23fb8dc:	4b1a      	ldr	r3, [pc, #104]	; (23fb948 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 23fb8de:	4668      	mov	r0, sp
 23fb8e0:	9300      	str	r3, [sp, #0]
 23fb8e2:	2300      	movs	r3, #0
 23fb8e4:	f88d 3004 	strb.w	r3, [sp, #4]
 23fb8e8:	4b18      	ldr	r3, [pc, #96]	; (23fb94c <_ZN15Adafruit_BME2806read24Eh+0xd0>)
 23fb8ea:	9302      	str	r3, [sp, #8]
 23fb8ec:	2301      	movs	r3, #1
 23fb8ee:	f8ad 300c 	strh.w	r3, [sp, #12]
 23fb8f2:	f7ff fdb0 	bl	23fb456 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0>
        digitalWrite(_cs, LOW);
 23fb8f6:	f994 0010 	ldrsb.w	r0, [r4, #16]
 23fb8fa:	2100      	movs	r1, #0
 23fb8fc:	b280      	uxth	r0, r0
 23fb8fe:	f003 f8a6 	bl	23fea4e <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
 23fb902:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 23fb906:	4620      	mov	r0, r4
 23fb908:	f7ff fdaf 	bl	23fb46a <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
 23fb90c:	2100      	movs	r1, #0
 23fb90e:	4620      	mov	r0, r4
 23fb910:	f7ff fdab 	bl	23fb46a <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
 23fb914:	2100      	movs	r1, #0
        value <<= 8;
 23fb916:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
 23fb918:	4620      	mov	r0, r4
 23fb91a:	f7ff fda6 	bl	23fb46a <_ZN15Adafruit_BME2807spixferEh>
 23fb91e:	4328      	orrs	r0, r5
        value |= spixfer(0);
 23fb920:	2100      	movs	r1, #0
        value <<= 8;
 23fb922:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
 23fb924:	4620      	mov	r0, r4
 23fb926:	f7ff fda0 	bl	23fb46a <_ZN15Adafruit_BME2807spixferEh>
 23fb92a:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
 23fb92c:	f994 0010 	ldrsb.w	r0, [r4, #16]
 23fb930:	2101      	movs	r1, #1
 23fb932:	b280      	uxth	r0, r0
 23fb934:	f003 f88b 	bl	23fea4e <digitalWrite>
        if (_sck == -1)
 23fb938:	f994 3013 	ldrsb.w	r3, [r4, #19]
 23fb93c:	3301      	adds	r3, #1
 23fb93e:	d1c6      	bne.n	23fb8ce <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
 23fb940:	f7ff fd82 	bl	23fb448 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
 23fb944:	e7c3      	b.n	23fb8ce <_ZN15Adafruit_BME2806read24Eh+0x52>
 23fb946:	bf00      	nop
 23fb948:	023ff63c 	.word	0x023ff63c
 23fb94c:	0007a120 	.word	0x0007a120

023fb950 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
 23fb950:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
 23fb952:	21fa      	movs	r1, #250	; 0xfa
{
 23fb954:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
 23fb956:	f7ff ff91 	bl	23fb87c <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
 23fb95a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 23fb95e:	d01f      	beq.n	23fb9a0 <_ZN15Adafruit_BME28015readTemperatureEv+0x50>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
 23fb960:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
 23fb962:	ed9f 7a11 	vldr	s14, [pc, #68]	; 23fb9a8 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
 23fb966:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
 23fb968:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
 23fb96c:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
 23fb970:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
 23fb974:	4359      	muls	r1, r3
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
 23fb976:	fb02 f302 	mul.w	r3, r2, r2
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
 23fb97a:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
 23fb97e:	131b      	asrs	r3, r3, #12
 23fb980:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
 23fb982:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
 23fb984:	eb03 23e1 	add.w	r3, r3, r1, asr #11
 23fb988:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
 23fb98a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 23fb98e:	3380      	adds	r3, #128	; 0x80
 23fb990:	121b      	asrs	r3, r3, #8
 23fb992:	ee07 3a90 	vmov	s15, r3
 23fb996:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
 23fb99a:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
 23fb99e:	bd10      	pop	{r4, pc}
        return NAN;
 23fb9a0:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23fb9ac <_ZN15Adafruit_BME28015readTemperatureEv+0x5c>
 23fb9a4:	e7fb      	b.n	23fb99e <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
 23fb9a6:	bf00      	nop
 23fb9a8:	42c80000 	.word	0x42c80000
 23fb9ac:	7fc00000 	.word	0x7fc00000

023fb9b0 <_ZN15Adafruit_BME2804initEv>:
{
 23fb9b0:	b530      	push	{r4, r5, lr}
 23fb9b2:	4604      	mov	r4, r0
    if (_cs == -1) {
 23fb9b4:	f990 0010 	ldrsb.w	r0, [r0, #16]
{
 23fb9b8:	b085      	sub	sp, #20
    if (_cs == -1) {
 23fb9ba:	1c42      	adds	r2, r0, #1
 23fb9bc:	d119      	bne.n	23fb9f2 <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
 23fb9be:	6820      	ldr	r0, [r4, #0]
 23fb9c0:	f002 fbdc 	bl	23fe17c <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
 23fb9c4:	21d0      	movs	r1, #208	; 0xd0
 23fb9c6:	4620      	mov	r0, r4
 23fb9c8:	f7ff fe22 	bl	23fb610 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
 23fb9cc:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
 23fb9ce:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
 23fb9d0:	d145      	bne.n	23fba5e <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
 23fb9d2:	4620      	mov	r0, r4
 23fb9d4:	22b6      	movs	r2, #182	; 0xb6
 23fb9d6:	21e0      	movs	r1, #224	; 0xe0
 23fb9d8:	f7ff fd7e 	bl	23fb4d8 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
 23fb9dc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 23fb9e0:	f002 f8ee 	bl	23fdbc0 <delay>
    while (isReadingCalibration())
 23fb9e4:	4620      	mov	r0, r4
 23fb9e6:	f7ff fe67 	bl	23fb6b8 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
 23fb9ea:	4605      	mov	r5, r0
 23fb9ec:	b328      	cbz	r0, 23fba3a <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
 23fb9ee:	2064      	movs	r0, #100	; 0x64
 23fb9f0:	e7f6      	b.n	23fb9e0 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
 23fb9f2:	2101      	movs	r1, #1
 23fb9f4:	b280      	uxth	r0, r0
 23fb9f6:	f003 f82a 	bl	23fea4e <digitalWrite>
        pinMode(_cs, OUTPUT);
 23fb9fa:	f994 0010 	ldrsb.w	r0, [r4, #16]
 23fb9fe:	2101      	movs	r1, #1
 23fba00:	b280      	uxth	r0, r0
 23fba02:	f003 f813 	bl	23fea2c <pinMode>
        if (_sck == -1) {
 23fba06:	f994 0013 	ldrsb.w	r0, [r4, #19]
 23fba0a:	1c43      	adds	r3, r0, #1
 23fba0c:	d104      	bne.n	23fba18 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
 23fba0e:	f7ff fd01 	bl	23fb414 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fba12:	f001 fd6b 	bl	23fd4ec <_ZN8SPIClass5beginEv>
    }
 23fba16:	e7d5      	b.n	23fb9c4 <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
 23fba18:	2101      	movs	r1, #1
 23fba1a:	b280      	uxth	r0, r0
 23fba1c:	f003 f806 	bl	23fea2c <pinMode>
            pinMode(_mosi, OUTPUT);
 23fba20:	f994 0011 	ldrsb.w	r0, [r4, #17]
 23fba24:	2101      	movs	r1, #1
 23fba26:	b280      	uxth	r0, r0
 23fba28:	f003 f800 	bl	23fea2c <pinMode>
            pinMode(_miso, INPUT);
 23fba2c:	f994 0012 	ldrsb.w	r0, [r4, #18]
 23fba30:	2100      	movs	r1, #0
 23fba32:	b280      	uxth	r0, r0
 23fba34:	f002 fffa 	bl	23fea2c <pinMode>
 23fba38:	e7c4      	b.n	23fb9c4 <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
 23fba3a:	4620      	mov	r0, r4
 23fba3c:	f7ff feac 	bl	23fb798 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
 23fba40:	2305      	movs	r3, #5
 23fba42:	2103      	movs	r1, #3
 23fba44:	461a      	mov	r2, r3
 23fba46:	4620      	mov	r0, r4
 23fba48:	9300      	str	r3, [sp, #0]
 23fba4a:	e9cd 5501 	strd	r5, r5, [sp, #4]
 23fba4e:	f7ff fd95 	bl	23fb57c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
 23fba52:	2064      	movs	r0, #100	; 0x64
 23fba54:	f002 f8b4 	bl	23fdbc0 <delay>
    return true;
 23fba58:	2001      	movs	r0, #1
}
 23fba5a:	b005      	add	sp, #20
 23fba5c:	bd30      	pop	{r4, r5, pc}
        return false;
 23fba5e:	2000      	movs	r0, #0
 23fba60:	e7fb      	b.n	23fba5a <_ZN15Adafruit_BME2804initEv+0xaa>

023fba62 <_ZN15Adafruit_BME2805beginEh>:
{
 23fba62:	b510      	push	{r4, lr}
	_i2caddr = addr;
 23fba64:	7101      	strb	r1, [r0, #4]
{
 23fba66:	4604      	mov	r4, r0
	_wire = &Wire;
 23fba68:	f003 f91a 	bl	23feca0 <_Z19__fetch_global_Wirev>
 23fba6c:	6020      	str	r0, [r4, #0]
	return init();
 23fba6e:	4620      	mov	r0, r4
}
 23fba70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return init();
 23fba74:	f7ff bf9c 	b.w	23fb9b0 <_ZN15Adafruit_BME2804initEv>

023fba78 <_ZNK5spark6Logger5errorEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_WARN, fmt, args);
    va_end(args);
}

inline void spark::Logger::error(const char *fmt, ...) const {
 23fba78:	b40e      	push	{r1, r2, r3}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23fba7a:	f04f 0c20 	mov.w	ip, #32
 23fba7e:	2300      	movs	r3, #0
inline void spark::Logger::error(const char *fmt, ...) const {
 23fba80:	b500      	push	{lr}
 23fba82:	b08c      	sub	sp, #48	; 0x30
 23fba84:	aa0d      	add	r2, sp, #52	; 0x34
 23fba86:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23fba8a:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fba8e:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23fba92:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fba94:	6801      	ldr	r1, [r0, #0]
 23fba96:	aa04      	add	r2, sp, #16
 23fba98:	2032      	movs	r0, #50	; 0x32
 23fba9a:	f001 fb27 	bl	23fd0ec <log_message_v>
}
 23fba9e:	b00c      	add	sp, #48	; 0x30
 23fbaa0:	f85d eb04 	ldr.w	lr, [sp], #4
 23fbaa4:	b003      	add	sp, #12
 23fbaa6:	4770      	bx	lr

023fbaa8 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

uint8_t Adafruit_NeoPixel::getType() const {
    return type;
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 23fbaa8:	b538      	push	{r3, r4, r5, lr}
 23fbaaa:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 23fbaac:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
 23fbaae:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 23fbab0:	b108      	cbz	r0, 23fbab6 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 23fbab2:	f001 fc6b 	bl	23fd38c <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 23fbab6:	79a3      	ldrb	r3, [r4, #6]
 23fbab8:	2b06      	cmp	r3, #6
 23fbaba:	bf0c      	ite	eq
 23fbabc:	2004      	moveq	r0, #4
 23fbabe:	2003      	movne	r0, #3
 23fbac0:	fb10 f005 	smulbb	r0, r0, r5
 23fbac4:	b280      	uxth	r0, r0
 23fbac6:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 23fbac8:	f001 fc52 	bl	23fd370 <malloc>
 23fbacc:	60e0      	str	r0, [r4, #12]
 23fbace:	b128      	cbz	r0, 23fbadc <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
 23fbad0:	2100      	movs	r1, #0
 23fbad2:	88a2      	ldrh	r2, [r4, #4]
 23fbad4:	f003 fa33 	bl	23fef3e <memset>
    numLEDs = n;
 23fbad8:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
 23fbada:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
 23fbadc:	80a0      	strh	r0, [r4, #4]
 23fbade:	8060      	strh	r0, [r4, #2]
}
 23fbae0:	e7fb      	b.n	23fbada <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

023fbae2 <_ZN17Adafruit_NeoPixelC1EtR8SPIClassh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, SPIClass& spi, uint8_t t) :
 23fbae2:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 23fbae4:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, SPIClass& spi, uint8_t t) :
 23fbae6:	4604      	mov	r4, r0
 23fbae8:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 23fbaea:	e9c0 5503 	strd	r5, r5, [r0, #12]
 23fbaee:	7005      	strb	r5, [r0, #0]
 23fbaf0:	7183      	strb	r3, [r0, #6]
 23fbaf2:	7205      	strb	r5, [r0, #8]
  updateLength(n);
 23fbaf4:	f7ff ffd8 	bl	23fbaa8 <_ZN17Adafruit_NeoPixel12updateLengthEt>
}
 23fbaf8:	4620      	mov	r0, r4
  spi_ = &spi;
 23fbafa:	6166      	str	r6, [r4, #20]
}
 23fbafc:	bd70      	pop	{r4, r5, r6, pc}
	...

023fbb00 <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
 23fbb00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if (PLATFORM_ID == 32)
  if (getType() == WS2812B) {
 23fbb04:	7983      	ldrb	r3, [r0, #6]
void Adafruit_NeoPixel::begin(void) {
 23fbb06:	4604      	mov	r4, r0
  if (getType() == WS2812B) {
 23fbb08:	2b02      	cmp	r3, #2
 23fbb0a:	d14e      	bne.n	23fbbaa <_ZN17Adafruit_NeoPixel5beginEv+0xaa>
  // Prevent copying
  SPIClass(const SPIClass&) = delete;
  SPIClass& operator=(const SPIClass&) = delete;

  hal_spi_interface_t interface() const {
    return _spi;
 23fbb0c:	6943      	ldr	r3, [r0, #20]
 23fbb0e:	781b      	ldrb	r3, [r3, #0]
    if (spi_->interface() >= HAL_PLATFORM_SPI_NUM) {
 23fbb10:	2b01      	cmp	r3, #1
 23fbb12:	d906      	bls.n	23fbb22 <_ZN17Adafruit_NeoPixel5beginEv+0x22>
      Log.error("SPI/SPI1 interface not defined!");
 23fbb14:	4929      	ldr	r1, [pc, #164]	; (23fbbbc <_ZN17Adafruit_NeoPixel5beginEv+0xbc>)
 23fbb16:	482a      	ldr	r0, [pc, #168]	; (23fbbc0 <_ZN17Adafruit_NeoPixel5beginEv+0xc0>)
 23fbb18:	f7ff ffae 	bl	23fba78 <_ZNK5spark6Logger5errorEPKcz>
#else
  pinMode(pin, OUTPUT);
  digitalWrite(pin, LOW);
#endif // #if (PLATFORM_ID == 32)
  begun = true;
}
 23fbb1c:	b003      	add	sp, #12
 23fbb1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      misoPin = MISO1;
 23fbb22:	2b00      	cmp	r3, #0
 23fbb24:	bf0c      	ite	eq
 23fbb26:	f04f 0911 	moveq.w	r9, #17
 23fbb2a:	f04f 0904 	movne.w	r9, #4
    PinMode sckPinMode = getPinMode(sckPin);
 23fbb2e:	4648      	mov	r0, r9
      misoPin = MISO1;
 23fbb30:	bf0c      	ite	eq
 23fbb32:	2710      	moveq	r7, #16
 23fbb34:	2703      	movne	r7, #3
    PinMode sckPinMode = getPinMode(sckPin);
 23fbb36:	f002 ff39 	bl	23fe9ac <getPinMode>
 23fbb3a:	4606      	mov	r6, r0
    PinMode misoPinMode = getPinMode(misoPin);
 23fbb3c:	4638      	mov	r0, r7
 23fbb3e:	f002 ff35 	bl	23fe9ac <getPinMode>
    int sckValue = (sckPinMode == OUTPUT) ? digitalRead(sckPin) : 0;
 23fbb42:	2e01      	cmp	r6, #1
    PinMode misoPinMode = getPinMode(misoPin);
 23fbb44:	4605      	mov	r5, r0
    int sckValue = (sckPinMode == OUTPUT) ? digitalRead(sckPin) : 0;
 23fbb46:	d133      	bne.n	23fbbb0 <_ZN17Adafruit_NeoPixel5beginEv+0xb0>
 23fbb48:	4648      	mov	r0, r9
 23fbb4a:	f002 ff99 	bl	23fea80 <digitalRead>
 23fbb4e:	4682      	mov	sl, r0
    int misoValue = (misoPinMode == OUTPUT) ? digitalRead(misoPin) : 0;
 23fbb50:	2d01      	cmp	r5, #1
 23fbb52:	d130      	bne.n	23fbbb6 <_ZN17Adafruit_NeoPixel5beginEv+0xb6>
 23fbb54:	4638      	mov	r0, r7
 23fbb56:	f002 ff93 	bl	23fea80 <digitalRead>
 23fbb5a:	4680      	mov	r8, r0
    spi_config.flags = (uint32_t)HAL_SPI_CONFIG_FLAG_MOSI_ONLY;
 23fbb5c:	f04f 0b01 	mov.w	fp, #1
 23fbb60:	4b18      	ldr	r3, [pc, #96]	; (23fbbc4 <_ZN17Adafruit_NeoPixel5beginEv+0xc4>)
 23fbb62:	6960      	ldr	r0, [r4, #20]
 23fbb64:	e9cd 3b00 	strd	r3, fp, [sp]
    hal_spi_begin_ext(spi_->interface(), SPI_MODE_MASTER, PIN_INVALID, &spi_config);
 23fbb68:	22ff      	movs	r2, #255	; 0xff
 23fbb6a:	466b      	mov	r3, sp
 23fbb6c:	2100      	movs	r1, #0
 23fbb6e:	7800      	ldrb	r0, [r0, #0]
 23fbb70:	f001 f9ea 	bl	23fcf48 <hal_spi_begin_ext>
    spi_->setClockSpeed(3125000); // DVOS 5.7.0 requires setClockSpeed() to be set after begin()
 23fbb74:	465a      	mov	r2, fp
 23fbb76:	4914      	ldr	r1, [pc, #80]	; (23fbbc8 <_ZN17Adafruit_NeoPixel5beginEv+0xc8>)
 23fbb78:	6960      	ldr	r0, [r4, #20]
 23fbb7a:	f001 fd7d 	bl	23fd678 <_ZN8SPIClass13setClockSpeedEjj>
    pinMode(sckPin, sckPinMode);
 23fbb7e:	4631      	mov	r1, r6
 23fbb80:	4648      	mov	r0, r9
 23fbb82:	f002 ff53 	bl	23fea2c <pinMode>
    pinMode(misoPin, misoPinMode);
 23fbb86:	4629      	mov	r1, r5
 23fbb88:	4638      	mov	r0, r7
 23fbb8a:	f002 ff4f 	bl	23fea2c <pinMode>
    if (sckPinMode == OUTPUT) {
 23fbb8e:	455e      	cmp	r6, fp
 23fbb90:	d104      	bne.n	23fbb9c <_ZN17Adafruit_NeoPixel5beginEv+0x9c>
      digitalWrite(sckPin, sckValue);
 23fbb92:	4648      	mov	r0, r9
 23fbb94:	fa5f f18a 	uxtb.w	r1, sl
 23fbb98:	f002 ff59 	bl	23fea4e <digitalWrite>
    if (misoPinMode == OUTPUT) {
 23fbb9c:	2d01      	cmp	r5, #1
 23fbb9e:	d104      	bne.n	23fbbaa <_ZN17Adafruit_NeoPixel5beginEv+0xaa>
      digitalWrite(misoPin, misoValue);
 23fbba0:	4638      	mov	r0, r7
 23fbba2:	fa5f f188 	uxtb.w	r1, r8
 23fbba6:	f002 ff52 	bl	23fea4e <digitalWrite>
  begun = true;
 23fbbaa:	2301      	movs	r3, #1
 23fbbac:	7023      	strb	r3, [r4, #0]
 23fbbae:	e7b5      	b.n	23fbb1c <_ZN17Adafruit_NeoPixel5beginEv+0x1c>
    int sckValue = (sckPinMode == OUTPUT) ? digitalRead(sckPin) : 0;
 23fbbb0:	f04f 0a00 	mov.w	sl, #0
 23fbbb4:	e7cc      	b.n	23fbb50 <_ZN17Adafruit_NeoPixel5beginEv+0x50>
    int misoValue = (misoPinMode == OUTPUT) ? digitalRead(misoPin) : 0;
 23fbbb6:	f04f 0800 	mov.w	r8, #0
 23fbbba:	e7cf      	b.n	23fbb5c <_ZN17Adafruit_NeoPixel5beginEv+0x5c>
 23fbbbc:	023ff648 	.word	0x023ff648
 23fbbc0:	1007ae38 	.word	0x1007ae38
 23fbbc4:	000a0008 	.word	0x000a0008
 23fbbc8:	002faf08 	.word	0x002faf08

023fbbcc <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 23fbbcc:	68c3      	ldr	r3, [r0, #12]
 23fbbce:	2b00      	cmp	r3, #0
 23fbbd0:	f000 80fc 	beq.w	23fbdcc <_ZN17Adafruit_NeoPixel4showEv+0x200>
void Adafruit_NeoPixel::show(void) {
 23fbbd4:	b570      	push	{r4, r5, r6, lr}
    return type;
 23fbbd6:	7983      	ldrb	r3, [r0, #6]
 23fbbd8:	4604      	mov	r4, r0
  }

  __enable_irq();

#elif (PLATFORM_ID == 32)
  if (getType() != WS2812B) { // WS2812 WS2812B and WS2813 supported for P2
 23fbbda:	2b02      	cmp	r3, #2
void Adafruit_NeoPixel::show(void) {
 23fbbdc:	b082      	sub	sp, #8
  if (getType() != WS2812B) { // WS2812 WS2812B and WS2813 supported for P2
 23fbbde:	f040 80ef 	bne.w	23fbdc0 <_ZN17Adafruit_NeoPixel4showEv+0x1f4>
        resetOff = 20;
      } break;
  }

  constexpr uint8_t numBitsPerBit = 3; // How many SPI bits represent one neopixel bit
  uint32_t spiArraySize = (numBytes * numBitsPerBit) + resetOff + resetOff;
 23fbbe2:	8886      	ldrh	r6, [r0, #4]
 23fbbe4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 23fbbe8:	36f0      	adds	r6, #240	; 0xf0
  uint8_t* spiArray = NULL;
  spiArray = (uint8_t*) malloc(spiArraySize);
 23fbbea:	4630      	mov	r0, r6
 23fbbec:	f001 fbc0 	bl	23fd370 <malloc>

  if (spiArray == NULL) {
 23fbbf0:	4605      	mov	r5, r0
 23fbbf2:	2800      	cmp	r0, #0
 23fbbf4:	f000 80eb 	beq.w	23fbdce <_ZN17Adafruit_NeoPixel4showEv+0x202>
    Log.error("Not enough memory available!");
    return;
  }

  memset(spiArray, 0, spiArraySize);
 23fbbf8:	4632      	mov	r2, r6
 23fbbfa:	2100      	movs	r1, #0
 23fbbfc:	f003 f99f 	bl	23fef3e <memset>
uint8_t *Adafruit_NeoPixel::getPixels(void) const {
  return pixels;
}

uint16_t Adafruit_NeoPixel::numPixels(void) const {
  return numLEDs;
 23fbc00:	8862      	ldrh	r2, [r4, #2]
  for (int x = 0; x < numPixels(); x++) {
 23fbc02:	2a00      	cmp	r2, #0
 23fbc04:	f000 80c7 	beq.w	23fbd96 <_ZN17Adafruit_NeoPixel4showEv+0x1ca>
 23fbc08:	46ac      	mov	ip, r5
 23fbc0a:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 23fbc0e:	68e1      	ldr	r1, [r4, #12]
 23fbc10:	442a      	add	r2, r5
      spiArray[(x*9)+(s*3)+0+resetOff] = ((0x80 & pixels[(x*3)+s])?(PIX_HI << 5):(PIX_LO << 5)) + ((0x40 & pixels[(x*3)+s])?(PIX_HI << 2):(PIX_LO << 2)) + ((0x20 & pixels[(x*3)+s])?(0b11):(0b10));
 23fbc12:	f991 3000 	ldrsb.w	r3, [r1]
 23fbc16:	7808      	ldrb	r0, [r1, #0]
 23fbc18:	2b00      	cmp	r3, #0
 23fbc1a:	bfb5      	itete	lt
 23fbc1c:	f04f 0ed0 	movlt.w	lr, #208	; 0xd0
 23fbc20:	f04f 0e90 	movge.w	lr, #144	; 0x90
 23fbc24:	23d8      	movlt	r3, #216	; 0xd8
 23fbc26:	2398      	movge	r3, #152	; 0x98
 23fbc28:	f010 0f40 	tst.w	r0, #64	; 0x40
 23fbc2c:	bf08      	it	eq
 23fbc2e:	4673      	moveq	r3, lr
 23fbc30:	f010 0f20 	tst.w	r0, #32
 23fbc34:	bf14      	ite	ne
 23fbc36:	2003      	movne	r0, #3
 23fbc38:	2002      	moveq	r0, #2
 23fbc3a:	4403      	add	r3, r0
 23fbc3c:	f88c 3078 	strb.w	r3, [ip, #120]	; 0x78
      spiArray[(x*9)+(s*3)+1+resetOff] = 0 /* bit 7 always 0 */ + ((0x10 & pixels[(x*3)+s])?(PIX_HI << 4):(PIX_LO << 4)) + ((0x08 & pixels[(x*3)+s])?(PIX_HI << 1):(PIX_LO << 1)) + 1 /* bit 0 always 1 */;
 23fbc40:	7808      	ldrb	r0, [r1, #0]
  for (int x = 0; x < numPixels(); x++) {
 23fbc42:	f10c 0c09 	add.w	ip, ip, #9
      spiArray[(x*9)+(s*3)+1+resetOff] = 0 /* bit 7 always 0 */ + ((0x10 & pixels[(x*3)+s])?(PIX_HI << 4):(PIX_LO << 4)) + ((0x08 & pixels[(x*3)+s])?(PIX_HI << 1):(PIX_LO << 1)) + 1 /* bit 0 always 1 */;
 23fbc46:	f000 0310 	and.w	r3, r0, #16
 23fbc4a:	2b00      	cmp	r3, #0
 23fbc4c:	bf15      	itete	ne
 23fbc4e:	f04f 0e69 	movne.w	lr, #105	; 0x69
 23fbc52:	f04f 0e49 	moveq.w	lr, #73	; 0x49
 23fbc56:	236d      	movne	r3, #109	; 0x6d
 23fbc58:	234d      	moveq	r3, #77	; 0x4d
 23fbc5a:	f010 0f08 	tst.w	r0, #8
 23fbc5e:	bf08      	it	eq
 23fbc60:	4673      	moveq	r3, lr
 23fbc62:	f88c 3070 	strb.w	r3, [ip, #112]	; 0x70
      spiArray[(x*9)+(s*3)+2+resetOff] = ((0x04 & pixels[(x*3)+s])?(0b10 << 6):(0b00 << 6)) + ((0x02 & pixels[(x*3)+s])?(PIX_HI << 3):(PIX_LO << 3)) + ((0x01 & pixels[(x*3)+s])?(PIX_HI):(PIX_LO));
 23fbc66:	780b      	ldrb	r3, [r1, #0]
  for (int x = 0; x < numPixels(); x++) {
 23fbc68:	3103      	adds	r1, #3
      spiArray[(x*9)+(s*3)+2+resetOff] = ((0x04 & pixels[(x*3)+s])?(0b10 << 6):(0b00 << 6)) + ((0x02 & pixels[(x*3)+s])?(PIX_HI << 3):(PIX_LO << 3)) + ((0x01 & pixels[(x*3)+s])?(PIX_HI):(PIX_LO));
 23fbc6a:	f013 0f02 	tst.w	r3, #2
 23fbc6e:	bf14      	ite	ne
 23fbc70:	2030      	movne	r0, #48	; 0x30
 23fbc72:	2020      	moveq	r0, #32
 23fbc74:	f013 0f01 	tst.w	r3, #1
 23fbc78:	bf0c      	ite	eq
 23fbc7a:	f04f 0e04 	moveq.w	lr, #4
 23fbc7e:	f04f 0e06 	movne.w	lr, #6
 23fbc82:	015b      	lsls	r3, r3, #5
 23fbc84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 23fbc88:	4403      	add	r3, r0
 23fbc8a:	4473      	add	r3, lr
 23fbc8c:	f88c 3071 	strb.w	r3, [ip, #113]	; 0x71
      spiArray[(x*9)+(s*3)+0+resetOff] = ((0x80 & pixels[(x*3)+s])?(PIX_HI << 5):(PIX_LO << 5)) + ((0x40 & pixels[(x*3)+s])?(PIX_HI << 2):(PIX_LO << 2)) + ((0x20 & pixels[(x*3)+s])?(0b11):(0b10));
 23fbc90:	f911 0c02 	ldrsb.w	r0, [r1, #-2]
 23fbc94:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 23fbc98:	2800      	cmp	r0, #0
 23fbc9a:	bfb5      	itete	lt
 23fbc9c:	f04f 0ed0 	movlt.w	lr, #208	; 0xd0
 23fbca0:	f04f 0e90 	movge.w	lr, #144	; 0x90
 23fbca4:	20d8      	movlt	r0, #216	; 0xd8
 23fbca6:	2098      	movge	r0, #152	; 0x98
 23fbca8:	f013 0f40 	tst.w	r3, #64	; 0x40
 23fbcac:	bf08      	it	eq
 23fbcae:	4670      	moveq	r0, lr
 23fbcb0:	f013 0f20 	tst.w	r3, #32
 23fbcb4:	bf14      	ite	ne
 23fbcb6:	2303      	movne	r3, #3
 23fbcb8:	2302      	moveq	r3, #2
 23fbcba:	4403      	add	r3, r0
 23fbcbc:	f88c 3072 	strb.w	r3, [ip, #114]	; 0x72
      spiArray[(x*9)+(s*3)+1+resetOff] = 0 /* bit 7 always 0 */ + ((0x10 & pixels[(x*3)+s])?(PIX_HI << 4):(PIX_LO << 4)) + ((0x08 & pixels[(x*3)+s])?(PIX_HI << 1):(PIX_LO << 1)) + 1 /* bit 0 always 1 */;
 23fbcc0:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 23fbcc4:	f000 0310 	and.w	r3, r0, #16
 23fbcc8:	2b00      	cmp	r3, #0
 23fbcca:	bf15      	itete	ne
 23fbccc:	f04f 0e69 	movne.w	lr, #105	; 0x69
 23fbcd0:	f04f 0e49 	moveq.w	lr, #73	; 0x49
 23fbcd4:	236d      	movne	r3, #109	; 0x6d
 23fbcd6:	234d      	moveq	r3, #77	; 0x4d
 23fbcd8:	f010 0f08 	tst.w	r0, #8
 23fbcdc:	bf08      	it	eq
 23fbcde:	4673      	moveq	r3, lr
 23fbce0:	f88c 3073 	strb.w	r3, [ip, #115]	; 0x73
      spiArray[(x*9)+(s*3)+2+resetOff] = ((0x04 & pixels[(x*3)+s])?(0b10 << 6):(0b00 << 6)) + ((0x02 & pixels[(x*3)+s])?(PIX_HI << 3):(PIX_LO << 3)) + ((0x01 & pixels[(x*3)+s])?(PIX_HI):(PIX_LO));
 23fbce4:	f811 ec02 	ldrb.w	lr, [r1, #-2]
 23fbce8:	f01e 0f02 	tst.w	lr, #2
 23fbcec:	bf14      	ite	ne
 23fbcee:	2030      	movne	r0, #48	; 0x30
 23fbcf0:	2020      	moveq	r0, #32
 23fbcf2:	f01e 0f01 	tst.w	lr, #1
 23fbcf6:	bf14      	ite	ne
 23fbcf8:	2306      	movne	r3, #6
 23fbcfa:	2304      	moveq	r3, #4
 23fbcfc:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
 23fbd00:	f00e 0e80 	and.w	lr, lr, #128	; 0x80
 23fbd04:	4486      	add	lr, r0
 23fbd06:	449e      	add	lr, r3
 23fbd08:	f88c e074 	strb.w	lr, [ip, #116]	; 0x74
      spiArray[(x*9)+(s*3)+0+resetOff] = ((0x80 & pixels[(x*3)+s])?(PIX_HI << 5):(PIX_LO << 5)) + ((0x40 & pixels[(x*3)+s])?(PIX_HI << 2):(PIX_LO << 2)) + ((0x20 & pixels[(x*3)+s])?(0b11):(0b10));
 23fbd0c:	f911 3c01 	ldrsb.w	r3, [r1, #-1]
 23fbd10:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 23fbd14:	2b00      	cmp	r3, #0
 23fbd16:	bfb5      	itete	lt
 23fbd18:	f04f 0ed0 	movlt.w	lr, #208	; 0xd0
 23fbd1c:	f04f 0e90 	movge.w	lr, #144	; 0x90
 23fbd20:	23d8      	movlt	r3, #216	; 0xd8
 23fbd22:	2398      	movge	r3, #152	; 0x98
 23fbd24:	f010 0f40 	tst.w	r0, #64	; 0x40
 23fbd28:	bf08      	it	eq
 23fbd2a:	4673      	moveq	r3, lr
 23fbd2c:	f010 0f20 	tst.w	r0, #32
 23fbd30:	bf14      	ite	ne
 23fbd32:	2003      	movne	r0, #3
 23fbd34:	2002      	moveq	r0, #2
 23fbd36:	4403      	add	r3, r0
 23fbd38:	f88c 3075 	strb.w	r3, [ip, #117]	; 0x75
      spiArray[(x*9)+(s*3)+1+resetOff] = 0 /* bit 7 always 0 */ + ((0x10 & pixels[(x*3)+s])?(PIX_HI << 4):(PIX_LO << 4)) + ((0x08 & pixels[(x*3)+s])?(PIX_HI << 1):(PIX_LO << 1)) + 1 /* bit 0 always 1 */;
 23fbd3c:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 23fbd40:	f000 0310 	and.w	r3, r0, #16
 23fbd44:	2b00      	cmp	r3, #0
 23fbd46:	bf15      	itete	ne
 23fbd48:	f04f 0e69 	movne.w	lr, #105	; 0x69
 23fbd4c:	f04f 0e49 	moveq.w	lr, #73	; 0x49
 23fbd50:	236d      	movne	r3, #109	; 0x6d
 23fbd52:	234d      	moveq	r3, #77	; 0x4d
 23fbd54:	f010 0f08 	tst.w	r0, #8
 23fbd58:	bf08      	it	eq
 23fbd5a:	4673      	moveq	r3, lr
 23fbd5c:	f88c 3076 	strb.w	r3, [ip, #118]	; 0x76
      spiArray[(x*9)+(s*3)+2+resetOff] = ((0x04 & pixels[(x*3)+s])?(0b10 << 6):(0b00 << 6)) + ((0x02 & pixels[(x*3)+s])?(PIX_HI << 3):(PIX_LO << 3)) + ((0x01 & pixels[(x*3)+s])?(PIX_HI):(PIX_LO));
 23fbd60:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 23fbd64:	f010 0f02 	tst.w	r0, #2
 23fbd68:	bf14      	ite	ne
 23fbd6a:	f04f 0e30 	movne.w	lr, #48	; 0x30
 23fbd6e:	f04f 0e20 	moveq.w	lr, #32
 23fbd72:	0143      	lsls	r3, r0, #5
 23fbd74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 23fbd78:	4473      	add	r3, lr
 23fbd7a:	b2db      	uxtb	r3, r3
 23fbd7c:	07c0      	lsls	r0, r0, #31
 23fbd7e:	f103 0e06 	add.w	lr, r3, #6
 23fbd82:	f103 0304 	add.w	r3, r3, #4
 23fbd86:	bf4c      	ite	mi
 23fbd88:	f88c e077 	strbmi.w	lr, [ip, #119]	; 0x77
 23fbd8c:	f88c 3077 	strbpl.w	r3, [ip, #119]	; 0x77
  for (int x = 0; x < numPixels(); x++) {
 23fbd90:	4594      	cmp	ip, r2
 23fbd92:	f47f af3e 	bne.w	23fbc12 <_ZN17Adafruit_NeoPixel4showEv+0x46>
  spi_->beginTransaction();
 23fbd96:	6960      	ldr	r0, [r4, #20]
 23fbd98:	f001 fbe4 	bl	23fd564 <_ZN8SPIClass16beginTransactionEv>
  spi_->transfer(spiArray, nullptr, spiArraySize, nullptr);
 23fbd9c:	2200      	movs	r2, #0
 23fbd9e:	4633      	mov	r3, r6
 23fbda0:	4629      	mov	r1, r5
 23fbda2:	6960      	ldr	r0, [r4, #20]
 23fbda4:	9200      	str	r2, [sp, #0]
 23fbda6:	f001 fcc5 	bl	23fd734 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  spi_->endTransaction();
 23fbdaa:	6960      	ldr	r0, [r4, #20]
 23fbdac:	f001 fbdd 	bl	23fd56a <_ZN8SPIClass14endTransactionEv>
  free(spiArray);
 23fbdb0:	4628      	mov	r0, r5
 23fbdb2:	f001 faeb 	bl	23fd38c <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 23fbdb6:	f000 fe7b 	bl	23fcab0 <HAL_Timer_Get_Micro_Seconds>
  endTime = micros(); // Save EOD time for latch on next call
 23fbdba:	6120      	str	r0, [r4, #16]
}
 23fbdbc:	b002      	add	sp, #8
 23fbdbe:	bd70      	pop	{r4, r5, r6, pc}
    Log.error("Pixel type not supported!");
 23fbdc0:	4904      	ldr	r1, [pc, #16]	; (23fbdd4 <_ZN17Adafruit_NeoPixel4showEv+0x208>)
    Log.error("Not enough memory available!");
 23fbdc2:	4805      	ldr	r0, [pc, #20]	; (23fbdd8 <_ZN17Adafruit_NeoPixel4showEv+0x20c>)
 23fbdc4:	f7ff fe58 	bl	23fba78 <_ZNK5spark6Logger5errorEPKcz>
}
 23fbdc8:	b002      	add	sp, #8
 23fbdca:	bd70      	pop	{r4, r5, r6, pc}
 23fbdcc:	4770      	bx	lr
    Log.error("Not enough memory available!");
 23fbdce:	4903      	ldr	r1, [pc, #12]	; (23fbddc <_ZN17Adafruit_NeoPixel4showEv+0x210>)
 23fbdd0:	e7f7      	b.n	23fbdc2 <_ZN17Adafruit_NeoPixel4showEv+0x1f6>
 23fbdd2:	bf00      	nop
 23fbdd4:	023ff668 	.word	0x023ff668
 23fbdd8:	1007ae38 	.word	0x1007ae38
 23fbddc:	023ff684 	.word	0x023ff684

023fbde0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
  if(n < numLEDs) {
 23fbde0:	8843      	ldrh	r3, [r0, #2]
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 23fbde2:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 23fbde4:	428b      	cmp	r3, r1
 23fbde6:	d92d      	bls.n	23fbe44 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
    if(brightness) { // See notes in setBrightness()
 23fbde8:	7a06      	ldrb	r6, [r0, #8]
 23fbdea:	f3c2 4307 	ubfx	r3, r2, #16, #8
 23fbdee:	f3c2 2407 	ubfx	r4, r2, #8, #8
 23fbdf2:	b2d5      	uxtb	r5, r2
 23fbdf4:	b13e      	cbz	r6, 23fbe06 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
 23fbdf6:	4373      	muls	r3, r6
      g = (g * brightness) >> 8;
 23fbdf8:	4374      	muls	r4, r6
      b = (b * brightness) >> 8;
 23fbdfa:	4375      	muls	r5, r6
      r = (r * brightness) >> 8;
 23fbdfc:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 23fbe00:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 23fbe04:	0a2d      	lsrs	r5, r5, #8
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 23fbe06:	f890 c006 	ldrb.w	ip, [r0, #6]
 23fbe0a:	68c7      	ldr	r7, [r0, #12]
 23fbe0c:	f1bc 0f06 	cmp.w	ip, #6
 23fbe10:	bf0c      	ite	eq
 23fbe12:	2604      	moveq	r6, #4
 23fbe14:	2603      	movne	r6, #3
 23fbe16:	434e      	muls	r6, r1
 23fbe18:	f1ac 0c02 	sub.w	ip, ip, #2
 23fbe1c:	19b9      	adds	r1, r7, r6
    switch(type) {
 23fbe1e:	f1bc 0f06 	cmp.w	ip, #6
 23fbe22:	d81d      	bhi.n	23fbe60 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
 23fbe24:	e8df f00c 	tbb	[pc, ip]
 23fbe28:	04081c04 	.word	0x04081c04
 23fbe2c:	040f      	.short	0x040f
 23fbe2e:	04          	.byte	0x04
 23fbe2f:	00          	.byte	0x00
          *p++ = g;
 23fbe30:	55bc      	strb	r4, [r7, r6]
          *p++ = r;
 23fbe32:	704b      	strb	r3, [r1, #1]
          *p = b;
 23fbe34:	708d      	strb	r5, [r1, #2]
}
 23fbe36:	e005      	b.n	23fbe44 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p++ = r;
 23fbe38:	2bfe      	cmp	r3, #254	; 0xfe
 23fbe3a:	bf28      	it	cs
 23fbe3c:	23fe      	movcs	r3, #254	; 0xfe
 23fbe3e:	55bb      	strb	r3, [r7, r6]
          *p++ = b;
 23fbe40:	704d      	strb	r5, [r1, #1]
          *p = g;
 23fbe42:	708c      	strb	r4, [r1, #2]
}
 23fbe44:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
 23fbe46:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
 23fbe48:	704c      	strb	r4, [r1, #1]
          *p++ = b;
 23fbe4a:	708d      	strb	r5, [r1, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 23fbe4c:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
 23fbe4e:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
 23fbe50:	b913      	cbnz	r3, 23fbe58 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
 23fbe52:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
 23fbe54:	70ca      	strb	r2, [r1, #3]
        } break;
 23fbe56:	e7f5      	b.n	23fbe44 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p = brightness ? ((w * brightness) >> 8) : w;
 23fbe58:	435a      	muls	r2, r3
 23fbe5a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 23fbe5e:	e7f9      	b.n	23fbe54 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
 23fbe60:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
 23fbe62:	704c      	strb	r4, [r1, #1]
 23fbe64:	e7e6      	b.n	23fbe34 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>

023fbe66 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
 23fbe66:	7a03      	ldrb	r3, [r0, #8]
  uint8_t newBrightness = b + 1;
 23fbe68:	1c4a      	adds	r2, r1, #1
 23fbe6a:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
 23fbe6c:	4293      	cmp	r3, r2
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
 23fbe6e:	b570      	push	{r4, r5, r6, lr}
  if(newBrightness != brightness) { // Compare against prior value
 23fbe70:	d01f      	beq.n	23fbeb2 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4c>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
 23fbe72:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 23fbe74:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
            *ptr           = pixels,
 23fbe78:	68c4      	ldr	r4, [r0, #12]
    if(oldBrightness == 0) scale = 0; // Avoid /0
 23fbe7a:	d00c      	beq.n	23fbe96 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
 23fbe7c:	29ff      	cmp	r1, #255	; 0xff
 23fbe7e:	bf0f      	iteee	eq
 23fbe80:	f64f 71ff 	movweq	r1, #65535	; 0xffff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 23fbe84:	0211      	lslne	r1, r2, #8
 23fbe86:	f101 31ff 	addne.w	r1, r1, #4294967295
 23fbe8a:	fbb1 f3f3 	udivne	r3, r1, r3
    else if(b == 255) scale = 65535 / oldBrightness;
 23fbe8e:	bf0c      	ite	eq
 23fbe90:	fbb1 f3f3 	udiveq	r3, r1, r3
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 23fbe94:	b29b      	uxthne	r3, r3
            *ptr           = pixels,
 23fbe96:	4625      	mov	r5, r4
    for(uint16_t i=0; i<numBytes; i++) {
 23fbe98:	8886      	ldrh	r6, [r0, #4]
 23fbe9a:	1b29      	subs	r1, r5, r4
 23fbe9c:	b289      	uxth	r1, r1
 23fbe9e:	428e      	cmp	r6, r1
 23fbea0:	d906      	bls.n	23fbeb0 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
 23fbea2:	7829      	ldrb	r1, [r5, #0]
 23fbea4:	4359      	muls	r1, r3
 23fbea6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 23fbeaa:	f805 1b01 	strb.w	r1, [r5], #1
    for(uint16_t i=0; i<numBytes; i++) {
 23fbeae:	e7f3      	b.n	23fbe98 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
    }
    brightness = newBrightness;
 23fbeb0:	7202      	strb	r2, [r0, #8]
  }
}
 23fbeb2:	bd70      	pop	{r4, r5, r6, pc}

023fbeb4 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 23fbeb4:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
 23fbeb6:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 23fbeb8:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
 23fbebc:	2d02      	cmp	r5, #2
 23fbebe:	d069      	beq.n	23fbf94 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
 23fbec0:	2d03      	cmp	r5, #3
 23fbec2:	f000 809b 	beq.w	23fbffc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x148>
 23fbec6:	2d01      	cmp	r5, #1
 23fbec8:	d16c      	bne.n	23fbfa4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
 23fbeca:	43d2      	mvns	r2, r2
 23fbecc:	8905      	ldrh	r5, [r0, #8]
 23fbece:	442a      	add	r2, r5
 23fbed0:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
 23fbed2:	2a00      	cmp	r2, #0
 23fbed4:	db5d      	blt.n	23fbf92 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
 23fbed6:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 23fbeda:	4295      	cmp	r5, r2
 23fbedc:	dd59      	ble.n	23fbf92 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
 23fbede:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
 23fbee0:	bfbe      	ittt	lt
 23fbee2:	185b      	addlt	r3, r3, r1
    __y = 0;
 23fbee4:	2100      	movlt	r1, #0
    __h += __y;
 23fbee6:	b21b      	sxthlt	r3, r3

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
 23fbee8:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 23fbeec:	18cd      	adds	r5, r1, r3
 23fbeee:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
 23fbef0:	bfc4      	itt	gt
 23fbef2:	1a43      	subgt	r3, r0, r1
 23fbef4:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
 23fbef6:	2b00      	cmp	r3, #0
 23fbef8:	dd4b      	ble.n	23fbf92 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 23fbefa:	f3c1 00c4 	ubfx	r0, r1, #3, #5
 23fbefe:	f8df c124 	ldr.w	ip, [pc, #292]	; 23fc024 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>
 23fbf02:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 23fbf06:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
 23fbf0a:	b2db      	uxtb	r3, r3
  pBuf += x;
 23fbf0c:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
 23fbf10:	d01a      	beq.n	23fbf48 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
 23fbf12:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 23fbf16:	4e41      	ldr	r6, [pc, #260]	; (23fc01c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
    mod = 8-mod;
 23fbf18:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
 23fbf1a:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
 23fbf1c:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
 23fbf1e:	bf3f      	itttt	cc
 23fbf20:	26ff      	movcc	r6, #255	; 0xff
 23fbf22:	eba5 0e03 	subcc.w	lr, r5, r3
 23fbf26:	fa46 f60e 	asrcc.w	r6, r6, lr
 23fbf2a:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
 23fbf2c:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
 23fbf30:	2c01      	cmp	r4, #1
      *pBuf |= mask;
 23fbf32:	bf0c      	ite	eq
 23fbf34:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
 23fbf36:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 23fbf38:	42ab      	cmp	r3, r5
 23fbf3a:	f80c 6002 	strb.w	r6, [ip, r2]
 23fbf3e:	d328      	bcc.n	23fbf92 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
 23fbf40:	3908      	subs	r1, #8
 23fbf42:	440b      	add	r3, r1
 23fbf44:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
 23fbf46:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
 23fbf48:	2b07      	cmp	r3, #7
 23fbf4a:	d919      	bls.n	23fbf80 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
 23fbf4c:	2c01      	cmp	r4, #1
 23fbf4e:	f04f 35ff 	mov.w	r5, #4294967295
 23fbf52:	bf18      	it	ne
 23fbf54:	2500      	movne	r5, #0
 23fbf56:	461a      	mov	r2, r3
 23fbf58:	b2ed      	uxtb	r5, r5
 23fbf5a:	f100 0180 	add.w	r1, r0, #128	; 0x80

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
 23fbf5e:	3a08      	subs	r2, #8
 23fbf60:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
 23fbf62:	2a07      	cmp	r2, #7
      *pBuf = val;
 23fbf64:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
 23fbf68:	f101 0180 	add.w	r1, r1, #128	; 0x80
 23fbf6c:	d8f7      	bhi.n	23fbf5e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
 23fbf6e:	f1a3 0208 	sub.w	r2, r3, #8
 23fbf72:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 23fbf76:	3201      	adds	r2, #1
 23fbf78:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
 23fbf7c:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
 23fbf80:	b13b      	cbz	r3, 23fbf92 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 23fbf82:	4a27      	ldr	r2, [pc, #156]	; (23fc020 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
    if(color == WHITE) { 
 23fbf84:	2c01      	cmp	r4, #1
    register uint8_t mask = postmask[mod];
 23fbf86:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
 23fbf88:	7803      	ldrb	r3, [r0, #0]
 23fbf8a:	bf0c      	ite	eq
 23fbf8c:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
 23fbf8e:	4393      	bicne	r3, r2
 23fbf90:	7003      	strb	r3, [r0, #0]
}
 23fbf92:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
 23fbf94:	43d2      	mvns	r2, r2
 23fbf96:	8945      	ldrh	r5, [r0, #10]
 23fbf98:	442a      	add	r2, r5
      x -= (w-1);
 23fbf9a:	18cd      	adds	r5, r1, r3
 23fbf9c:	8901      	ldrh	r1, [r0, #8]
      y = HEIGHT - y - 1;
 23fbf9e:	b212      	sxth	r2, r2
      x -= (w-1);
 23fbfa0:	1b49      	subs	r1, r1, r5
 23fbfa2:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
 23fbfa4:	2a00      	cmp	r2, #0
 23fbfa6:	dbf4      	blt.n	23fbf92 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
 23fbfa8:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 23fbfac:	4295      	cmp	r5, r2
 23fbfae:	ddf0      	ble.n	23fbf92 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
 23fbfb0:	2900      	cmp	r1, #0
    w += x;
 23fbfb2:	bfbe      	ittt	lt
 23fbfb4:	185b      	addlt	r3, r3, r1
    x = 0;
 23fbfb6:	2100      	movlt	r1, #0
    w += x;
 23fbfb8:	b21b      	sxthlt	r3, r3
  if( (x + w) > WIDTH) { 
 23fbfba:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 23fbfbe:	18ce      	adds	r6, r1, r3
 23fbfc0:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
 23fbfc2:	bfc4      	itt	gt
 23fbfc4:	1a6b      	subgt	r3, r5, r1
 23fbfc6:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
 23fbfc8:	2b00      	cmp	r3, #0
 23fbfca:	dde2      	ble.n	23fbf92 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += x;
 23fbfcc:	2580      	movs	r5, #128	; 0x80
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
 23fbfce:	10d0      	asrs	r0, r2, #3
  pBuf += x;
 23fbfd0:	fb10 1105 	smlabb	r1, r0, r5, r1
 23fbfd4:	4813      	ldr	r0, [pc, #76]	; (23fc024 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
  if(color == WHITE) { 
 23fbfd6:	2c01      	cmp	r4, #1
  pBuf += x;
 23fbfd8:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
 23fbfda:	f002 0007 	and.w	r0, r2, #7
 23fbfde:	f04f 0201 	mov.w	r2, #1
 23fbfe2:	fa02 f200 	lsl.w	r2, r2, r0
 23fbfe6:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
 23fbfe8:	440b      	add	r3, r1
 23fbfea:	d10c      	bne.n	23fc006 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
 23fbfec:	428b      	cmp	r3, r1
 23fbfee:	d0d0      	beq.n	23fbf92 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
 23fbff0:	f811 0b01 	ldrb.w	r0, [r1], #1
 23fbff4:	4310      	orrs	r0, r2
 23fbff6:	f801 0c01 	strb.w	r0, [r1, #-1]
 23fbffa:	e7f7      	b.n	23fbfec <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x138>
      y -= (w-1);
 23fbffc:	18cd      	adds	r5, r1, r3
 23fbffe:	8941      	ldrh	r1, [r0, #10]
 23fc000:	1b49      	subs	r1, r1, r5
 23fc002:	b209      	sxth	r1, r1
      break;
 23fc004:	e765      	b.n	23fbed2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
 23fc006:	43d2      	mvns	r2, r2
 23fc008:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
 23fc00a:	428b      	cmp	r3, r1
 23fc00c:	d0c1      	beq.n	23fbf92 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
 23fc00e:	f811 0b01 	ldrb.w	r0, [r1], #1
 23fc012:	4010      	ands	r0, r2
 23fc014:	f801 0c01 	strb.w	r0, [r1, #-1]
 23fc018:	e7f7      	b.n	23fc00a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x156>
 23fc01a:	bf00      	nop
 23fc01c:	1007a804 	.word	0x1007a804
 23fc020:	1007a7fc 	.word	0x1007a7fc
 23fc024:	1007a80c 	.word	0x1007a80c

023fc028 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 23fc028:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
 23fc02a:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 23fc02c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
 23fc030:	2d02      	cmp	r5, #2
 23fc032:	d036      	beq.n	23fc0a2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x7a>
 23fc034:	2d03      	cmp	r5, #3
 23fc036:	f000 809d 	beq.w	23fc174 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14c>
 23fc03a:	2d01      	cmp	r5, #1
 23fc03c:	d139      	bne.n	23fc0b2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x8a>
      x -= (h-1);
 23fc03e:	18d5      	adds	r5, r2, r3
 23fc040:	8902      	ldrh	r2, [r0, #8]
 23fc042:	1b52      	subs	r2, r2, r5
 23fc044:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
 23fc046:	2900      	cmp	r1, #0
 23fc048:	f2c0 8093 	blt.w	23fc172 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14a>
 23fc04c:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 23fc050:	428d      	cmp	r5, r1
 23fc052:	f340 808e 	ble.w	23fc172 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14a>
  if(x < 0) { 
 23fc056:	2a00      	cmp	r2, #0
    w += x;
 23fc058:	bfbe      	ittt	lt
 23fc05a:	189b      	addlt	r3, r3, r2
    x = 0;
 23fc05c:	2200      	movlt	r2, #0
    w += x;
 23fc05e:	b21b      	sxthlt	r3, r3
  if( (x + w) > WIDTH) { 
 23fc060:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 23fc064:	18d6      	adds	r6, r2, r3
 23fc066:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
 23fc068:	bfc4      	itt	gt
 23fc06a:	1aab      	subgt	r3, r5, r2
 23fc06c:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
 23fc06e:	2b00      	cmp	r3, #0
 23fc070:	dd7f      	ble.n	23fc172 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14a>
  pBuf += x;
 23fc072:	2580      	movs	r5, #128	; 0x80
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
 23fc074:	10c8      	asrs	r0, r1, #3
  pBuf += x;
 23fc076:	fb10 2205 	smlabb	r2, r0, r5, r2
 23fc07a:	4846      	ldr	r0, [pc, #280]	; (23fc194 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
  if(color == WHITE) { 
 23fc07c:	2c01      	cmp	r4, #1
  pBuf += x;
 23fc07e:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
 23fc080:	f001 0007 	and.w	r0, r1, #7
 23fc084:	f04f 0101 	mov.w	r1, #1
 23fc088:	fa01 f100 	lsl.w	r1, r1, r0
 23fc08c:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
 23fc08e:	4413      	add	r3, r2
 23fc090:	d175      	bne.n	23fc17e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
    while(w--) { *pBuf++ |= mask; }
 23fc092:	429a      	cmp	r2, r3
 23fc094:	d06d      	beq.n	23fc172 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14a>
 23fc096:	f812 0b01 	ldrb.w	r0, [r2], #1
 23fc09a:	4308      	orrs	r0, r1
 23fc09c:	f802 0c01 	strb.w	r0, [r2, #-1]
 23fc0a0:	e7f7      	b.n	23fc092 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x6a>
      x = WIDTH - x - 1;
 23fc0a2:	43c9      	mvns	r1, r1
 23fc0a4:	8905      	ldrh	r5, [r0, #8]
 23fc0a6:	4429      	add	r1, r5
      y -= (h-1);
 23fc0a8:	18d5      	adds	r5, r2, r3
 23fc0aa:	8942      	ldrh	r2, [r0, #10]
      x = WIDTH - x - 1;
 23fc0ac:	b209      	sxth	r1, r1
      y -= (h-1);
 23fc0ae:	1b52      	subs	r2, r2, r5
 23fc0b0:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
 23fc0b2:	2900      	cmp	r1, #0
 23fc0b4:	db5d      	blt.n	23fc172 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14a>
 23fc0b6:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 23fc0ba:	428d      	cmp	r5, r1
 23fc0bc:	dd59      	ble.n	23fc172 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14a>
  if(__y < 0) { 
 23fc0be:	2a00      	cmp	r2, #0
    __h += __y;
 23fc0c0:	bfbe      	ittt	lt
 23fc0c2:	189b      	addlt	r3, r3, r2
    __y = 0;
 23fc0c4:	2200      	movlt	r2, #0
    __h += __y;
 23fc0c6:	b21b      	sxthlt	r3, r3
  if( (__y + __h) > HEIGHT) { 
 23fc0c8:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 23fc0cc:	18d5      	adds	r5, r2, r3
 23fc0ce:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
 23fc0d0:	bfc4      	itt	gt
 23fc0d2:	1a83      	subgt	r3, r0, r2
 23fc0d4:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
 23fc0d6:	2b00      	cmp	r3, #0
 23fc0d8:	dd4b      	ble.n	23fc172 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14a>
  pBuf += x;
 23fc0da:	f3c2 00c4 	ubfx	r0, r2, #3, #5
 23fc0de:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 23fc194 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>
 23fc0e2:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
 23fc0e6:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
 23fc0ea:	b2db      	uxtb	r3, r3
  pBuf += x;
 23fc0ec:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
 23fc0f0:	d01a      	beq.n	23fc128 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x100>
    mod = 8-mod;
 23fc0f2:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
 23fc0f6:	4e28      	ldr	r6, [pc, #160]	; (23fc198 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
    mod = 8-mod;
 23fc0f8:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
 23fc0fa:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
 23fc0fc:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
 23fc0fe:	bf3f      	itttt	cc
 23fc100:	26ff      	movcc	r6, #255	; 0xff
 23fc102:	eba5 0e03 	subcc.w	lr, r5, r3
 23fc106:	fa46 f60e 	asrcc.w	r6, r6, lr
 23fc10a:	4037      	andcc	r7, r6
      *pBuf |= mask;
 23fc10c:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
 23fc110:	2c01      	cmp	r4, #1
      *pBuf |= mask;
 23fc112:	bf0c      	ite	eq
 23fc114:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
 23fc116:	43be      	bicne	r6, r7
    if(h<mod) { return; }
 23fc118:	42ab      	cmp	r3, r5
 23fc11a:	f80c 6001 	strb.w	r6, [ip, r1]
 23fc11e:	d328      	bcc.n	23fc172 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14a>
    h -= mod;
 23fc120:	3a08      	subs	r2, #8
 23fc122:	4413      	add	r3, r2
 23fc124:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
 23fc126:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
 23fc128:	2b07      	cmp	r3, #7
 23fc12a:	d919      	bls.n	23fc160 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x138>
    register uint8_t val = (color == WHITE) ? 255 : 0;
 23fc12c:	2c01      	cmp	r4, #1
 23fc12e:	f04f 35ff 	mov.w	r5, #4294967295
 23fc132:	bf18      	it	ne
 23fc134:	2500      	movne	r5, #0
 23fc136:	461a      	mov	r2, r3
 23fc138:	b2ed      	uxtb	r5, r5
 23fc13a:	f100 0180 	add.w	r1, r0, #128	; 0x80
      h -= 8;
 23fc13e:	3a08      	subs	r2, #8
 23fc140:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
 23fc142:	2a07      	cmp	r2, #7
      *pBuf = val;
 23fc144:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
 23fc148:	f101 0180 	add.w	r1, r1, #128	; 0x80
 23fc14c:	d8f7      	bhi.n	23fc13e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x116>
      pBuf += SSD1306_LCDWIDTH;
 23fc14e:	f1a3 0208 	sub.w	r2, r3, #8
 23fc152:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 23fc156:	3201      	adds	r2, #1
 23fc158:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
 23fc15c:	f003 0307 	and.w	r3, r3, #7
  if(h) {
 23fc160:	b13b      	cbz	r3, 23fc172 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14a>
    register uint8_t mask = postmask[mod];
 23fc162:	4a0e      	ldr	r2, [pc, #56]	; (23fc19c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
    if(color == WHITE) { 
 23fc164:	2c01      	cmp	r4, #1
    register uint8_t mask = postmask[mod];
 23fc166:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
 23fc168:	7803      	ldrb	r3, [r0, #0]
 23fc16a:	bf0c      	ite	eq
 23fc16c:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
 23fc16e:	4393      	bicne	r3, r2
 23fc170:	7003      	strb	r3, [r0, #0]
}
 23fc172:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
 23fc174:	43c9      	mvns	r1, r1
 23fc176:	8945      	ldrh	r5, [r0, #10]
 23fc178:	4429      	add	r1, r5
 23fc17a:	b209      	sxth	r1, r1
      break;
 23fc17c:	e763      	b.n	23fc046 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
 23fc17e:	43c9      	mvns	r1, r1
 23fc180:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
 23fc182:	429a      	cmp	r2, r3
 23fc184:	d0f5      	beq.n	23fc172 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14a>
 23fc186:	f812 0b01 	ldrb.w	r0, [r2], #1
 23fc18a:	4008      	ands	r0, r1
 23fc18c:	f802 0c01 	strb.w	r0, [r2, #-1]
 23fc190:	e7f7      	b.n	23fc182 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x15a>
 23fc192:	bf00      	nop
 23fc194:	1007a80c 	.word	0x1007a80c
 23fc198:	1007a804 	.word	0x1007a804
 23fc19c:	1007a7fc 	.word	0x1007a7fc

023fc1a0 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
 23fc1a0:	4770      	bx	lr
	...

023fc1a4 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
 23fc1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
 23fc1a6:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
 23fc1a8:	4606      	mov	r6, r0
 23fc1aa:	4614      	mov	r4, r2
 23fc1ac:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
 23fc1ae:	db2d      	blt.n	23fc20c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
 23fc1b0:	f000 fbb3 	bl	23fc91a <_ZN12Adafruit_GFX5widthEv>
 23fc1b4:	42a8      	cmp	r0, r5
 23fc1b6:	dd29      	ble.n	23fc20c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
 23fc1b8:	2c00      	cmp	r4, #0
 23fc1ba:	db27      	blt.n	23fc20c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
 23fc1bc:	4630      	mov	r0, r6
 23fc1be:	f000 fbaf 	bl	23fc920 <_ZN12Adafruit_GFX6heightEv>
 23fc1c2:	42a0      	cmp	r0, r4
 23fc1c4:	dd22      	ble.n	23fc20c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
 23fc1c6:	4630      	mov	r0, r6
 23fc1c8:	f000 fba5 	bl	23fc916 <_ZN12Adafruit_GFX11getRotationEv>
 23fc1cc:	2802      	cmp	r0, #2
 23fc1ce:	d01e      	beq.n	23fc20e <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
 23fc1d0:	2803      	cmp	r0, #3
 23fc1d2:	d025      	beq.n	23fc220 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
 23fc1d4:	2801      	cmp	r0, #1
 23fc1d6:	d104      	bne.n	23fc1e2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
 23fc1d8:	43e2      	mvns	r2, r4
 23fc1da:	8933      	ldrh	r3, [r6, #8]
    break;
 23fc1dc:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
 23fc1de:	441a      	add	r2, r3
 23fc1e0:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
 23fc1e2:	4622      	mov	r2, r4
 23fc1e4:	2180      	movs	r1, #128	; 0x80
 23fc1e6:	2c00      	cmp	r4, #0
 23fc1e8:	bfb8      	it	lt
 23fc1ea:	1de2      	addlt	r2, r4, #7
 23fc1ec:	10d2      	asrs	r2, r2, #3
 23fc1ee:	fb12 5501 	smlabb	r5, r2, r1, r5
 23fc1f2:	2201      	movs	r2, #1
 23fc1f4:	490d      	ldr	r1, [pc, #52]	; (23fc22c <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
 23fc1f6:	f004 0407 	and.w	r4, r4, #7
 23fc1fa:	574b      	ldrsb	r3, [r1, r5]
 23fc1fc:	fa02 f404 	lsl.w	r4, r2, r4
 23fc200:	b264      	sxtb	r4, r4
  if (color == WHITE) 
 23fc202:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
 23fc204:	bf0c      	ite	eq
 23fc206:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
 23fc208:	43a3      	bicne	r3, r4
 23fc20a:	554b      	strb	r3, [r1, r5]
}
 23fc20c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    y = HEIGHT - y - 1;
 23fc20e:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
 23fc210:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
 23fc212:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
 23fc214:	3901      	subs	r1, #1
 23fc216:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
 23fc218:	4414      	add	r4, r2
    x = WIDTH - x - 1;
 23fc21a:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
 23fc21c:	b224      	sxth	r4, r4
    break;
 23fc21e:	e7e0      	b.n	23fc1e2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
 23fc220:	8973      	ldrh	r3, [r6, #10]
 23fc222:	3b01      	subs	r3, #1
 23fc224:	1b5b      	subs	r3, r3, r5
    break;
 23fc226:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
 23fc228:	b21c      	sxth	r4, r3
    break;
 23fc22a:	e7da      	b.n	23fc1e2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
 23fc22c:	1007a80c 	.word	0x1007a80c

023fc230 <_ZN16Adafruit_SSD1306D0Ev>:
 23fc230:	b510      	push	{r4, lr}
 23fc232:	4604      	mov	r4, r0
 23fc234:	2124      	movs	r1, #36	; 0x24
 23fc236:	f7fe f9ee 	bl	23fa616 <_ZdlPvj>
 23fc23a:	4620      	mov	r0, r4
 23fc23c:	bd10      	pop	{r4, pc}
	...

023fc240 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
 23fc240:	b538      	push	{r3, r4, r5, lr}
 23fc242:	4604      	mov	r4, r0
 23fc244:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
 23fc246:	2240      	movs	r2, #64	; 0x40
 23fc248:	2180      	movs	r1, #128	; 0x80
 23fc24a:	f000 fa8b 	bl	23fc764 <_ZN12Adafruit_GFXC1Ess>
 23fc24e:	4b06      	ldr	r3, [pc, #24]	; (23fc268 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
}
 23fc250:	4620      	mov	r0, r4
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
 23fc252:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
 23fc254:	23ff      	movs	r3, #255	; 0xff
 23fc256:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 23fc25a:	7763      	strb	r3, [r4, #29]
 23fc25c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  rst = reset;
 23fc260:	f884 5020 	strb.w	r5, [r4, #32]
  sclk = dc = cs = sid = -1;
 23fc264:	83e3      	strh	r3, [r4, #30]
}
 23fc266:	bd38      	pop	{r3, r4, r5, pc}
 23fc268:	023ff6ac 	.word	0x023ff6ac

023fc26c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
 23fc26c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 23fc270:	2100      	movs	r1, #0
 23fc272:	4801      	ldr	r0, [pc, #4]	; (23fc278 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
 23fc274:	f002 be63 	b.w	23fef3e <memset>
 23fc278:	1007a80c 	.word	0x1007a80c

023fc27c <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
 23fc27c:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
 23fc27e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 23fc282:	b143      	cbz	r3, 23fc296 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
 23fc284:	9101      	str	r1, [sp, #4]
        return instance().transfer(data);
 23fc286:	f7ff f8c5 	bl	23fb414 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fc28a:	9901      	ldr	r1, [sp, #4]
}
 23fc28c:	b003      	add	sp, #12
 23fc28e:	f85d eb04 	ldr.w	lr, [sp], #4
 23fc292:	f001 ba49 	b.w	23fd728 <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
 23fc296:	460b      	mov	r3, r1
 23fc298:	2201      	movs	r2, #1
 23fc29a:	7f81      	ldrb	r1, [r0, #30]
 23fc29c:	7f40      	ldrb	r0, [r0, #29]
}
 23fc29e:	b003      	add	sp, #12
 23fc2a0:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
 23fc2a4:	f002 bbff 	b.w	23feaa6 <shiftOut>

023fc2a8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
 23fc2a8:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
 23fc2aa:	f990 301d 	ldrsb.w	r3, [r0, #29]
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
 23fc2ae:	4604      	mov	r4, r0
  if (sid != -1)
 23fc2b0:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
 23fc2b2:	460d      	mov	r5, r1
  if (sid != -1)
 23fc2b4:	d01d      	beq.n	23fc2f2 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
 23fc2b6:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
 23fc2ba:	2101      	movs	r1, #1
 23fc2bc:	b280      	uxth	r0, r0
 23fc2be:	f002 fbc6 	bl	23fea4e <digitalWrite>
    digitalWrite(dc, LOW);
 23fc2c2:	f994 001f 	ldrsb.w	r0, [r4, #31]
 23fc2c6:	2100      	movs	r1, #0
 23fc2c8:	b280      	uxth	r0, r0
 23fc2ca:	f002 fbc0 	bl	23fea4e <digitalWrite>
    digitalWrite(cs, LOW);
 23fc2ce:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 23fc2d2:	2100      	movs	r1, #0
 23fc2d4:	b280      	uxth	r0, r0
 23fc2d6:	f002 fbba 	bl	23fea4e <digitalWrite>
    fastSPIwrite(c);
 23fc2da:	4629      	mov	r1, r5
 23fc2dc:	4620      	mov	r0, r4
 23fc2de:	f7ff ffcd 	bl	23fc27c <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
 23fc2e2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 23fc2e6:	2101      	movs	r1, #1
}
 23fc2e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
 23fc2ec:	b280      	uxth	r0, r0
 23fc2ee:	f002 bbae 	b.w	23fea4e <digitalWrite>
    Wire.beginTransmission(_i2caddr);
 23fc2f2:	f002 fcd5 	bl	23feca0 <_Z19__fetch_global_Wirev>
 23fc2f6:	f994 101b 	ldrsb.w	r1, [r4, #27]
 23fc2fa:	f001 ff6d 	bl	23fe1d8 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
 23fc2fe:	f002 fccf 	bl	23feca0 <_Z19__fetch_global_Wirev>
 23fc302:	6803      	ldr	r3, [r0, #0]
 23fc304:	2100      	movs	r1, #0
 23fc306:	689b      	ldr	r3, [r3, #8]
 23fc308:	4798      	blx	r3
    Wire.write(c);
 23fc30a:	f002 fcc9 	bl	23feca0 <_Z19__fetch_global_Wirev>
 23fc30e:	6803      	ldr	r3, [r0, #0]
 23fc310:	4629      	mov	r1, r5
 23fc312:	689b      	ldr	r3, [r3, #8]
 23fc314:	4798      	blx	r3
    Wire.endTransmission();
 23fc316:	f002 fcc3 	bl	23feca0 <_Z19__fetch_global_Wirev>
}
 23fc31a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
 23fc31e:	f001 bf62 	b.w	23fe1e6 <_ZN7TwoWire15endTransmissionEv>
	...

023fc324 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
 23fc324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc326:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
 23fc328:	2121      	movs	r1, #33	; 0x21
 23fc32a:	f7ff ffbd 	bl	23fc2a8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
 23fc32e:	2100      	movs	r1, #0
 23fc330:	4620      	mov	r0, r4
 23fc332:	f7ff ffb9 	bl	23fc2a8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
 23fc336:	217f      	movs	r1, #127	; 0x7f
 23fc338:	4620      	mov	r0, r4
 23fc33a:	f7ff ffb5 	bl	23fc2a8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
 23fc33e:	2122      	movs	r1, #34	; 0x22
 23fc340:	4620      	mov	r0, r4
 23fc342:	f7ff ffb1 	bl	23fc2a8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
 23fc346:	2100      	movs	r1, #0
 23fc348:	4620      	mov	r0, r4
 23fc34a:	f7ff ffad 	bl	23fc2a8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
 23fc34e:	2107      	movs	r1, #7
 23fc350:	4620      	mov	r0, r4
 23fc352:	f7ff ffa9 	bl	23fc2a8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
 23fc356:	f994 301d 	ldrsb.w	r3, [r4, #29]
 23fc35a:	4f29      	ldr	r7, [pc, #164]	; (23fc400 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
 23fc35c:	3301      	adds	r3, #1
 23fc35e:	d02a      	beq.n	23fc3b6 <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
 23fc360:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 23fc364:	2101      	movs	r1, #1
 23fc366:	b280      	uxth	r0, r0
 23fc368:	f002 fb71 	bl	23fea4e <digitalWrite>
    digitalWrite(dc, HIGH);
 23fc36c:	f994 001f 	ldrsb.w	r0, [r4, #31]
 23fc370:	2101      	movs	r1, #1
 23fc372:	b280      	uxth	r0, r0
 23fc374:	f002 fb6b 	bl	23fea4e <digitalWrite>
    digitalWrite(cs, LOW);
 23fc378:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 23fc37c:	2100      	movs	r1, #0
 23fc37e:	b280      	uxth	r0, r0
 23fc380:	f002 fb65 	bl	23fea4e <digitalWrite>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 23fc384:	2001      	movs	r0, #1
 23fc386:	f000 fb85 	bl	23fca94 <HAL_Delay_Microseconds>
 23fc38a:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
 23fc38e:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
 23fc390:	4620      	mov	r0, r4
 23fc392:	f817 1b01 	ldrb.w	r1, [r7], #1
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
 23fc396:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
 23fc398:	f7ff ff70 	bl	23fc27c <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
 23fc39c:	2d00      	cmp	r5, #0
 23fc39e:	d1f6      	bne.n	23fc38e <_ZN16Adafruit_SSD13067displayEv+0x6a>
 23fc3a0:	2001      	movs	r0, #1
 23fc3a2:	f000 fb77 	bl	23fca94 <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
 23fc3a6:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 23fc3aa:	2101      	movs	r1, #1
}
 23fc3ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
 23fc3b0:	b280      	uxth	r0, r0
 23fc3b2:	f002 bb4c 	b.w	23fea4e <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
 23fc3b6:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
 23fc3b8:	f002 fc72 	bl	23feca0 <_Z19__fetch_global_Wirev>
 23fc3bc:	f994 101b 	ldrsb.w	r1, [r4, #27]
 23fc3c0:	f001 ff0a 	bl	23fe1d8 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
 23fc3c4:	f002 fc6c 	bl	23feca0 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 23fc3c8:	6803      	ldr	r3, [r0, #0]
 23fc3ca:	2140      	movs	r1, #64	; 0x40
 23fc3cc:	689b      	ldr	r3, [r3, #8]
 23fc3ce:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
 23fc3d0:	f105 0610 	add.w	r6, r5, #16
 23fc3d4:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
 23fc3d6:	f002 fc63 	bl	23feca0 <_Z19__fetch_global_Wirev>
 23fc3da:	6803      	ldr	r3, [r0, #0]
 23fc3dc:	5d79      	ldrb	r1, [r7, r5]
 23fc3de:	689b      	ldr	r3, [r3, #8]
 23fc3e0:	4798      	blx	r3
		i++;
 23fc3e2:	1c6b      	adds	r3, r5, #1
 23fc3e4:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
 23fc3e6:	42ae      	cmp	r6, r5
 23fc3e8:	d1f5      	bne.n	23fc3d6 <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
 23fc3ea:	f002 fc59 	bl	23feca0 <_Z19__fetch_global_Wirev>
 23fc3ee:	f001 fefa 	bl	23fe1e6 <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
 23fc3f2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 23fc3f6:	d100      	bne.n	23fc3fa <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
 23fc3f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fc3fa:	4635      	mov	r5, r6
 23fc3fc:	e7dc      	b.n	23fc3b8 <_ZN16Adafruit_SSD13067displayEv+0x94>
 23fc3fe:	bf00      	nop
 23fc400:	1007a80c 	.word	0x1007a80c

023fc404 <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
 23fc404:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
 23fc406:	f990 301d 	ldrsb.w	r3, [r0, #29]
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
 23fc40a:	4604      	mov	r4, r0
  if (sid != -1){
 23fc40c:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
 23fc40e:	460d      	mov	r5, r1
  _vccstate = vccstate;
 23fc410:	7701      	strb	r1, [r0, #28]
  _i2caddr = i2caddr;
 23fc412:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
 23fc414:	f000 80c9 	beq.w	23fc5aa <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
 23fc418:	f990 001f 	ldrsb.w	r0, [r0, #31]
 23fc41c:	2101      	movs	r1, #1
 23fc41e:	b280      	uxth	r0, r0
 23fc420:	f002 fb04 	bl	23fea2c <pinMode>
    pinMode(cs, OUTPUT);
 23fc424:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 23fc428:	2101      	movs	r1, #1
 23fc42a:	b280      	uxth	r0, r0
 23fc42c:	f002 fafe 	bl	23fea2c <pinMode>
    if (!hwSPI){
 23fc430:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 23fc434:	2b00      	cmp	r3, #0
 23fc436:	f000 80a6 	beq.w	23fc586 <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
 23fc43a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 23fc43e:	2101      	movs	r1, #1
 23fc440:	b280      	uxth	r0, r0
 23fc442:	f002 fb04 	bl	23fea4e <digitalWrite>
        instance().setBitOrder(order);
 23fc446:	f7fe ffe5 	bl	23fb414 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fc44a:	2101      	movs	r1, #1
 23fc44c:	f001 f862 	bl	23fd514 <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
 23fc450:	f7fe ffe0 	bl	23fb414 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fc454:	2110      	movs	r1, #16
 23fc456:	f001 f941 	bl	23fd6dc <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
 23fc45a:	f7fe ffdb 	bl	23fb414 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fc45e:	2100      	movs	r1, #0
 23fc460:	f001 f86c 	bl	23fd53c <_ZN8SPIClass11setDataModeEh>
        instance().begin();
 23fc464:	f7fe ffd6 	bl	23fb414 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fc468:	f001 f840 	bl	23fd4ec <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
 23fc46c:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23fc470:	2101      	movs	r1, #1
 23fc472:	b280      	uxth	r0, r0
 23fc474:	f002 fada 	bl	23fea2c <pinMode>
  digitalWrite(rst, HIGH);
 23fc478:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23fc47c:	2101      	movs	r1, #1
 23fc47e:	b280      	uxth	r0, r0
 23fc480:	f002 fae5 	bl	23fea4e <digitalWrite>
  delay(1);
 23fc484:	2001      	movs	r0, #1
 23fc486:	f001 fb9b 	bl	23fdbc0 <delay>
  digitalWrite(rst, LOW);
 23fc48a:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23fc48e:	2100      	movs	r1, #0
 23fc490:	b280      	uxth	r0, r0
 23fc492:	f002 fadc 	bl	23fea4e <digitalWrite>
  delay(10);
 23fc496:	200a      	movs	r0, #10
 23fc498:	f001 fb92 	bl	23fdbc0 <delay>
  digitalWrite(rst, HIGH);
 23fc49c:	f994 0020 	ldrsb.w	r0, [r4, #32]
 23fc4a0:	2101      	movs	r1, #1
 23fc4a2:	b280      	uxth	r0, r0
 23fc4a4:	f002 fad3 	bl	23fea4e <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
 23fc4a8:	4620      	mov	r0, r4
 23fc4aa:	21ae      	movs	r1, #174	; 0xae
 23fc4ac:	f7ff fefc 	bl	23fc2a8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
 23fc4b0:	4620      	mov	r0, r4
 23fc4b2:	21d5      	movs	r1, #213	; 0xd5
 23fc4b4:	f7ff fef8 	bl	23fc2a8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
 23fc4b8:	4620      	mov	r0, r4
 23fc4ba:	2180      	movs	r1, #128	; 0x80
 23fc4bc:	f7ff fef4 	bl	23fc2a8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
 23fc4c0:	4620      	mov	r0, r4
 23fc4c2:	21a8      	movs	r1, #168	; 0xa8
 23fc4c4:	f7ff fef0 	bl	23fc2a8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
 23fc4c8:	4620      	mov	r0, r4
 23fc4ca:	213f      	movs	r1, #63	; 0x3f
 23fc4cc:	f7ff feec 	bl	23fc2a8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 23fc4d0:	4620      	mov	r0, r4
 23fc4d2:	21d3      	movs	r1, #211	; 0xd3
 23fc4d4:	f7ff fee8 	bl	23fc2a8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
 23fc4d8:	4620      	mov	r0, r4
 23fc4da:	2100      	movs	r1, #0
 23fc4dc:	f7ff fee4 	bl	23fc2a8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
 23fc4e0:	4620      	mov	r0, r4
 23fc4e2:	2140      	movs	r1, #64	; 0x40
 23fc4e4:	f7ff fee0 	bl	23fc2a8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
 23fc4e8:	218d      	movs	r1, #141	; 0x8d
 23fc4ea:	4620      	mov	r0, r4
 23fc4ec:	f7ff fedc 	bl	23fc2a8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
 23fc4f0:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
 23fc4f2:	bf0c      	ite	eq
 23fc4f4:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
 23fc4f6:	2114      	movne	r1, #20
 23fc4f8:	4620      	mov	r0, r4
 23fc4fa:	f7ff fed5 	bl	23fc2a8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
 23fc4fe:	4620      	mov	r0, r4
 23fc500:	2120      	movs	r1, #32
 23fc502:	f7ff fed1 	bl	23fc2a8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
 23fc506:	4620      	mov	r0, r4
 23fc508:	2100      	movs	r1, #0
 23fc50a:	f7ff fecd 	bl	23fc2a8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
 23fc50e:	4620      	mov	r0, r4
 23fc510:	21a1      	movs	r1, #161	; 0xa1
 23fc512:	f7ff fec9 	bl	23fc2a8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
 23fc516:	4620      	mov	r0, r4
 23fc518:	21c8      	movs	r1, #200	; 0xc8
 23fc51a:	f7ff fec5 	bl	23fc2a8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
 23fc51e:	4620      	mov	r0, r4
 23fc520:	21da      	movs	r1, #218	; 0xda
 23fc522:	f7ff fec1 	bl	23fc2a8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
 23fc526:	4620      	mov	r0, r4
 23fc528:	2112      	movs	r1, #18
 23fc52a:	f7ff febd 	bl	23fc2a8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
 23fc52e:	2181      	movs	r1, #129	; 0x81
 23fc530:	4620      	mov	r0, r4
 23fc532:	f7ff feb9 	bl	23fc2a8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
 23fc536:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
 23fc538:	bf0c      	ite	eq
 23fc53a:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
 23fc53c:	21cf      	movne	r1, #207	; 0xcf
 23fc53e:	4620      	mov	r0, r4
 23fc540:	f7ff feb2 	bl	23fc2a8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
 23fc544:	21d9      	movs	r1, #217	; 0xd9
 23fc546:	4620      	mov	r0, r4
 23fc548:	f7ff feae 	bl	23fc2a8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
 23fc54c:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
 23fc54e:	bf0c      	ite	eq
 23fc550:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
 23fc552:	21f1      	movne	r1, #241	; 0xf1
 23fc554:	4620      	mov	r0, r4
 23fc556:	f7ff fea7 	bl	23fc2a8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
 23fc55a:	4620      	mov	r0, r4
 23fc55c:	21db      	movs	r1, #219	; 0xdb
 23fc55e:	f7ff fea3 	bl	23fc2a8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
 23fc562:	4620      	mov	r0, r4
 23fc564:	2140      	movs	r1, #64	; 0x40
 23fc566:	f7ff fe9f 	bl	23fc2a8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 23fc56a:	4620      	mov	r0, r4
 23fc56c:	21a4      	movs	r1, #164	; 0xa4
 23fc56e:	f7ff fe9b 	bl	23fc2a8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
 23fc572:	4620      	mov	r0, r4
 23fc574:	21a6      	movs	r1, #166	; 0xa6
 23fc576:	f7ff fe97 	bl	23fc2a8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 23fc57a:	4620      	mov	r0, r4
}
 23fc57c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 23fc580:	21af      	movs	r1, #175	; 0xaf
 23fc582:	f7ff be91 	b.w	23fc2a8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
 23fc586:	f994 001d 	ldrsb.w	r0, [r4, #29]
 23fc58a:	2101      	movs	r1, #1
 23fc58c:	b280      	uxth	r0, r0
 23fc58e:	f002 fa4d 	bl	23fea2c <pinMode>
    	pinMode(sclk, OUTPUT);
 23fc592:	f994 001e 	ldrsb.w	r0, [r4, #30]
 23fc596:	2101      	movs	r1, #1
 23fc598:	b280      	uxth	r0, r0
 23fc59a:	f002 fa47 	bl	23fea2c <pinMode>
    if (hwSPI){
 23fc59e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 23fc5a2:	2b00      	cmp	r3, #0
 23fc5a4:	f43f af62 	beq.w	23fc46c <_ZN16Adafruit_SSD13065beginEhh+0x68>
 23fc5a8:	e747      	b.n	23fc43a <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
 23fc5aa:	f002 fb79 	bl	23feca0 <_Z19__fetch_global_Wirev>
 23fc5ae:	f001 fde5 	bl	23fe17c <_ZN7TwoWire5beginEv>
 23fc5b2:	e75b      	b.n	23fc46c <_ZN16Adafruit_SSD13065beginEhh+0x68>

023fc5b4 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 23fc5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fc5b8:	461f      	mov	r7, r3
 23fc5ba:	b085      	sub	sp, #20
 23fc5bc:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 23fc5c0:	eba7 0a01 	sub.w	sl, r7, r1
 23fc5c4:	eba8 0902 	sub.w	r9, r8, r2
 23fc5c8:	f1b9 0f00 	cmp.w	r9, #0
 23fc5cc:	bfb8      	it	lt
 23fc5ce:	f1c9 0900 	rsblt	r9, r9, #0
 23fc5d2:	f1ba 0f00 	cmp.w	sl, #0
 23fc5d6:	bfb8      	it	lt
 23fc5d8:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
 23fc5dc:	45d1      	cmp	r9, sl
			    uint16_t color) {
 23fc5de:	4683      	mov	fp, r0
 23fc5e0:	460c      	mov	r4, r1
 23fc5e2:	4615      	mov	r5, r2
 23fc5e4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  if (steep) {
 23fc5e8:	dd04      	ble.n	23fc5f4 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
 23fc5ea:	463a      	mov	r2, r7
    swap(x0, y0);
 23fc5ec:	462c      	mov	r4, r5
    swap(x1, y1);
 23fc5ee:	4647      	mov	r7, r8
    swap(x0, y0);
 23fc5f0:	460d      	mov	r5, r1
    swap(x1, y1);
 23fc5f2:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
 23fc5f4:	42bc      	cmp	r4, r7
 23fc5f6:	dd05      	ble.n	23fc604 <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
 23fc5f8:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
 23fc5fa:	4645      	mov	r5, r8
 23fc5fc:	4690      	mov	r8, r2
  if (x0 > x1) {
 23fc5fe:	4622      	mov	r2, r4
 23fc600:	463c      	mov	r4, r7
 23fc602:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
 23fc604:	1b3e      	subs	r6, r7, r4
 23fc606:	b2b2      	uxth	r2, r6
 23fc608:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
 23fc60a:	eba8 0205 	sub.w	r2, r8, r5
 23fc60e:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 23fc612:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
 23fc616:	f3c6 32c0 	ubfx	r2, r6, #15, #1
 23fc61a:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 23fc61e:	4545      	cmp	r5, r8
 23fc620:	bfb4      	ite	lt
 23fc622:	2201      	movlt	r2, #1
 23fc624:	f04f 32ff 	movge.w	r2, #4294967295
  dy = abs(y1 - y0);
 23fc628:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
 23fc62a:	1076      	asrs	r6, r6, #1
    ystep = -1;
 23fc62c:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
 23fc62e:	42bc      	cmp	r4, r7
 23fc630:	dc1c      	bgt.n	23fc66c <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
 23fc632:	f8db 2000 	ldr.w	r2, [fp]
    if (steep) {
 23fc636:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
 23fc638:	f8d2 8010 	ldr.w	r8, [r2, #16]
 23fc63c:	bfc7      	ittee	gt
 23fc63e:	4629      	movgt	r1, r5
 23fc640:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
 23fc642:	462a      	movle	r2, r5
 23fc644:	4621      	movle	r1, r4
      drawPixel(y0, x0, color);
 23fc646:	9303      	str	r3, [sp, #12]
      drawPixel(x0, y0, color);
 23fc648:	4658      	mov	r0, fp
 23fc64a:	47c0      	blx	r8
    }
    err -= dy;
 23fc64c:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
 23fc64e:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
 23fc650:	1ab6      	subs	r6, r6, r2
 23fc652:	b2b1      	uxth	r1, r6
 23fc654:	b236      	sxth	r6, r6
    if (err < 0) {
 23fc656:	2e00      	cmp	r6, #0
 23fc658:	da05      	bge.n	23fc666 <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
 23fc65a:	9a02      	ldr	r2, [sp, #8]
 23fc65c:	4415      	add	r5, r2
      err += dx;
 23fc65e:	9a00      	ldr	r2, [sp, #0]
      y0 += ystep;
 23fc660:	b22d      	sxth	r5, r5
      err += dx;
 23fc662:	1856      	adds	r6, r2, r1
 23fc664:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
 23fc666:	3401      	adds	r4, #1
 23fc668:	b224      	sxth	r4, r4
 23fc66a:	e7e0      	b.n	23fc62e <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
 23fc66c:	b005      	add	sp, #20
 23fc66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fc672 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 23fc672:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23fc676:	4604      	mov	r4, r0
 23fc678:	4616      	mov	r6, r2
 23fc67a:	468a      	mov	sl, r1
 23fc67c:	461d      	mov	r5, r3
 23fc67e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
 23fc682:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
 23fc684:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
 23fc688:	f8cd 8000 	str.w	r8, [sp]
 23fc68c:	69ff      	ldr	r7, [r7, #28]
 23fc68e:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
 23fc690:	6823      	ldr	r3, [r4, #0]
 23fc692:	f109 32ff 	add.w	r2, r9, #4294967295
 23fc696:	f8cd 8000 	str.w	r8, [sp]
 23fc69a:	4432      	add	r2, r6
 23fc69c:	4651      	mov	r1, sl
 23fc69e:	4620      	mov	r0, r4
 23fc6a0:	69df      	ldr	r7, [r3, #28]
 23fc6a2:	b212      	sxth	r2, r2
 23fc6a4:	462b      	mov	r3, r5
 23fc6a6:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
 23fc6a8:	6823      	ldr	r3, [r4, #0]
 23fc6aa:	f8cd 8000 	str.w	r8, [sp]
 23fc6ae:	4632      	mov	r2, r6
 23fc6b0:	4651      	mov	r1, sl
 23fc6b2:	4620      	mov	r0, r4
 23fc6b4:	699f      	ldr	r7, [r3, #24]
 23fc6b6:	464b      	mov	r3, r9
 23fc6b8:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
 23fc6ba:	1e6b      	subs	r3, r5, #1
 23fc6bc:	eb03 010a 	add.w	r1, r3, sl
 23fc6c0:	6823      	ldr	r3, [r4, #0]
 23fc6c2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 23fc6c6:	699d      	ldr	r5, [r3, #24]
 23fc6c8:	4632      	mov	r2, r6
 23fc6ca:	464b      	mov	r3, r9
 23fc6cc:	4620      	mov	r0, r4
 23fc6ce:	46ac      	mov	ip, r5
 23fc6d0:	b209      	sxth	r1, r1
}
 23fc6d2:	b002      	add	sp, #8
 23fc6d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
 23fc6d8:	4760      	bx	ip

023fc6da <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
 23fc6da:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
 23fc6dc:	3b01      	subs	r3, #1
 23fc6de:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 23fc6e2:	4413      	add	r3, r2
 23fc6e4:	6804      	ldr	r4, [r0, #0]
 23fc6e6:	b21b      	sxth	r3, r3
 23fc6e8:	9300      	str	r3, [sp, #0]
 23fc6ea:	9501      	str	r5, [sp, #4]
 23fc6ec:	460b      	mov	r3, r1
 23fc6ee:	6964      	ldr	r4, [r4, #20]
 23fc6f0:	47a0      	blx	r4
}
 23fc6f2:	b003      	add	sp, #12
 23fc6f4:	bd30      	pop	{r4, r5, pc}

023fc6f6 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
 23fc6f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
 23fc6f8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 23fc6fc:	6804      	ldr	r4, [r0, #0]
 23fc6fe:	e9cd 2500 	strd	r2, r5, [sp]
 23fc702:	3b01      	subs	r3, #1
 23fc704:	440b      	add	r3, r1
 23fc706:	6964      	ldr	r4, [r4, #20]
 23fc708:	b21b      	sxth	r3, r3
 23fc70a:	47a0      	blx	r4
}
 23fc70c:	b003      	add	sp, #12
 23fc70e:	bd30      	pop	{r4, r5, pc}

023fc710 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 23fc710:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23fc714:	4605      	mov	r5, r0
 23fc716:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 23fc718:	460c      	mov	r4, r1
			    uint16_t color) {
 23fc71a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 23fc71e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  for (int16_t i=x; i<x+w; i++) {
 23fc722:	18ce      	adds	r6, r1, r3
 23fc724:	42b4      	cmp	r4, r6
 23fc726:	da0b      	bge.n	23fc740 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
 23fc728:	682b      	ldr	r3, [r5, #0]
 23fc72a:	f8cd 8000 	str.w	r8, [sp]
 23fc72e:	4621      	mov	r1, r4
 23fc730:	699f      	ldr	r7, [r3, #24]
 23fc732:	4652      	mov	r2, sl
 23fc734:	464b      	mov	r3, r9
 23fc736:	4628      	mov	r0, r5
 23fc738:	3401      	adds	r4, #1
 23fc73a:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
 23fc73c:	b224      	sxth	r4, r4
 23fc73e:	e7f1      	b.n	23fc724 <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
 23fc740:	b002      	add	sp, #8
 23fc742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

023fc746 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
 23fc746:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
 23fc748:	9101      	str	r1, [sp, #4]
 23fc74a:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 23fc74e:	6802      	ldr	r2, [r0, #0]
 23fc750:	9100      	str	r1, [sp, #0]
 23fc752:	6a54      	ldr	r4, [r2, #36]	; 0x24
 23fc754:	2200      	movs	r2, #0
 23fc756:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fc75a:	4611      	mov	r1, r2
 23fc75c:	47a0      	blx	r4
}
 23fc75e:	b002      	add	sp, #8
 23fc760:	bd10      	pop	{r4, pc}

023fc762 <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
 23fc762:	4770      	bx	lr

023fc764 <_ZN12Adafruit_GFXC1Ess>:
  WIDTH(w), HEIGHT(h)
 23fc764:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
 23fc766:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
 23fc768:	f04f 32ff 	mov.w	r2, #4294967295
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 23fc76c:	b530      	push	{r4, r5, lr}
  textcolor = textbgcolor = 0xFFFF;
 23fc76e:	6142      	str	r2, [r0, #20]
    Print() : write_error(0) {}
 23fc770:	2400      	movs	r4, #0
  textsize  = 1;
 23fc772:	2201      	movs	r2, #1
  WIDTH(w), HEIGHT(h)
 23fc774:	4d04      	ldr	r5, [pc, #16]	; (23fc788 <_ZN12Adafruit_GFXC1Ess+0x24>)
 23fc776:	6044      	str	r4, [r0, #4]
 23fc778:	6005      	str	r5, [r0, #0]
 23fc77a:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
 23fc77c:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
 23fc77e:	6104      	str	r4, [r0, #16]
  textsize  = 1;
 23fc780:	8302      	strh	r2, [r0, #24]
  wrap      = true;
 23fc782:	7682      	strb	r2, [r0, #26]
}
 23fc784:	bd30      	pop	{r4, r5, pc}
 23fc786:	bf00      	nop
 23fc788:	023ffbe0 	.word	0x023ffbe0

023fc78c <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
 23fc78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fc790:	ed2d 8b02 	vpush	{d8}
 23fc794:	b08d      	sub	sp, #52	; 0x34
 23fc796:	9104      	str	r1, [sp, #16]
 23fc798:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 23fc79c:	4607      	mov	r7, r0
 23fc79e:	9105      	str	r1, [sp, #20]
 23fc7a0:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 23fc7a4:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 23fc7a8:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
 23fc7aa:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 23fc7ae:	9804      	ldr	r0, [sp, #16]
 23fc7b0:	4281      	cmp	r1, r0
 23fc7b2:	dd52      	ble.n	23fc85a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
 23fc7b4:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 23fc7b8:	4291      	cmp	r1, r2
 23fc7ba:	dd4e      	ble.n	23fc85a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
 23fc7bc:	2106      	movs	r1, #6
 23fc7be:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
 23fc7c2:	2c00      	cmp	r4, #0
 23fc7c4:	dd49      	ble.n	23fc85a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
 23fc7c6:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
 23fc7ca:	2c00      	cmp	r4, #0
 23fc7cc:	dd45      	ble.n	23fc85a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
  for (int8_t i=0; i<6; i++ ) {
 23fc7ce:	2400      	movs	r4, #0
      line = pgm_read_byte(font+(c*5)+i);
 23fc7d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 23fc7d4:	930b      	str	r3, [sp, #44]	; 0x2c
 23fc7d6:	b293      	uxth	r3, r2
 23fc7d8:	9307      	str	r3, [sp, #28]
 23fc7da:	3308      	adds	r3, #8
 23fc7dc:	b29b      	uxth	r3, r3
 23fc7de:	9108      	str	r1, [sp, #32]
 23fc7e0:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
 23fc7e2:	2c05      	cmp	r4, #5
      line = 0x0;
 23fc7e4:	bf0f      	iteee	eq
 23fc7e6:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
 23fc7e8:	4b2b      	ldrne	r3, [pc, #172]	; (23fc898 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
 23fc7ea:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
 23fc7ec:	191b      	addne	r3, r3, r4
 23fc7ee:	bf18      	it	ne
 23fc7f0:	5c9b      	ldrbne	r3, [r3, r2]
          fillRect(x+i*size, y+j*size, size, size, bg);
 23fc7f2:	9a04      	ldr	r2, [sp, #16]
      line = 0x0;
 23fc7f4:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
 23fc7f6:	b2ab      	uxth	r3, r5
 23fc7f8:	930a      	str	r3, [sp, #40]	; 0x28
 23fc7fa:	fb04 f305 	mul.w	r3, r4, r5
 23fc7fe:	9e07      	ldr	r6, [sp, #28]
 23fc800:	fa13 f382 	uxtah	r3, r3, r2
 23fc804:	b21b      	sxth	r3, r3
 23fc806:	ee08 3a10 	vmov	s16, r3
 23fc80a:	46b0      	mov	r8, r6
          drawPixel(x+i, y+j, bg);
 23fc80c:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
 23fc810:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
 23fc814:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
 23fc818:	9b03      	ldr	r3, [sp, #12]
 23fc81a:	07db      	lsls	r3, r3, #31
 23fc81c:	d52f      	bpl.n	23fc87e <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
 23fc81e:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
 23fc820:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
 23fc822:	d11f      	bne.n	23fc864 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
 23fc824:	f8d3 b010 	ldr.w	fp, [r3, #16]
 23fc828:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
 23fc82a:	4651      	mov	r1, sl
 23fc82c:	4638      	mov	r0, r7
 23fc82e:	b232      	sxth	r2, r6
 23fc830:	47d8      	blx	fp
      line >>= 1;
 23fc832:	9b03      	ldr	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
 23fc834:	3601      	adds	r6, #1
      line >>= 1;
 23fc836:	085b      	lsrs	r3, r3, #1
 23fc838:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
 23fc83a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23fc83c:	b2b6      	uxth	r6, r6
 23fc83e:	4498      	add	r8, r3
 23fc840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fc842:	fa1f f888 	uxth.w	r8, r8
 23fc846:	42b3      	cmp	r3, r6
 23fc848:	d1e6      	bne.n	23fc818 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
 23fc84a:	9b08      	ldr	r3, [sp, #32]
 23fc84c:	3401      	adds	r4, #1
 23fc84e:	3b01      	subs	r3, #1
 23fc850:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 23fc854:	b264      	sxtb	r4, r4
 23fc856:	9308      	str	r3, [sp, #32]
 23fc858:	d1c3      	bne.n	23fc7e2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
 23fc85a:	b00d      	add	sp, #52	; 0x34
 23fc85c:	ecbd 8b02 	vpop	{d8}
 23fc860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
 23fc864:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
 23fc866:	e9cd 9200 	strd	r9, r2, [sp]
 23fc86a:	ee18 1a10 	vmov	r1, s16
 23fc86e:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
 23fc872:	4638      	mov	r0, r7
 23fc874:	464b      	mov	r3, r9
 23fc876:	fa0f f288 	sxth.w	r2, r8
 23fc87a:	47d8      	blx	fp
 23fc87c:	e7d9      	b.n	23fc832 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
 23fc87e:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 23fc882:	4293      	cmp	r3, r2
 23fc884:	d0d5      	beq.n	23fc832 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
 23fc886:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
 23fc888:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
 23fc88a:	d103      	bne.n	23fc894 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
 23fc88c:	f8d3 b010 	ldr.w	fp, [r3, #16]
 23fc890:	9b06      	ldr	r3, [sp, #24]
 23fc892:	e7ca      	b.n	23fc82a <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
 23fc894:	9a06      	ldr	r2, [sp, #24]
 23fc896:	e7e6      	b.n	23fc866 <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
 23fc898:	023ff6dc 	.word	0x023ff6dc

023fc89c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
 23fc89c:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
 23fc89e:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
 23fc8a0:	4604      	mov	r4, r0
 23fc8a2:	b085      	sub	sp, #20
  if (c == '\n') {
 23fc8a4:	d107      	bne.n	23fc8b6 <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
 23fc8a6:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
 23fc8a8:	8a63      	ldrh	r3, [r4, #18]
 23fc8aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 23fc8ae:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
 23fc8b0:	2300      	movs	r3, #0
 23fc8b2:	8223      	strh	r3, [r4, #16]
 23fc8b4:	e021      	b.n	23fc8fa <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
 23fc8b6:	290d      	cmp	r1, #13
 23fc8b8:	d01f      	beq.n	23fc8fa <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 23fc8ba:	7e03      	ldrb	r3, [r0, #24]
 23fc8bc:	9302      	str	r3, [sp, #8]
 23fc8be:	8ac3      	ldrh	r3, [r0, #22]
 23fc8c0:	9301      	str	r3, [sp, #4]
 23fc8c2:	8a83      	ldrh	r3, [r0, #20]
 23fc8c4:	9300      	str	r3, [sp, #0]
 23fc8c6:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
 23fc8ca:	460b      	mov	r3, r1
 23fc8cc:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 23fc8d0:	f7ff ff5c 	bl	23fc78c <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
 23fc8d4:	7e20      	ldrb	r0, [r4, #24]
 23fc8d6:	8a23      	ldrh	r3, [r4, #16]
 23fc8d8:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 23fc8dc:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
 23fc8e0:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
 23fc8e2:	b21b      	sxth	r3, r3
 23fc8e4:	4602      	mov	r2, r0
 23fc8e6:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
 23fc8e8:	b139      	cbz	r1, 23fc8fa <_ZN12Adafruit_GFX5writeEh+0x5e>
 23fc8ea:	f06f 0505 	mvn.w	r5, #5
 23fc8ee:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 23fc8f2:	fb05 1100 	mla	r1, r5, r0, r1
 23fc8f6:	428b      	cmp	r3, r1
 23fc8f8:	dcd6      	bgt.n	23fc8a8 <_ZN12Adafruit_GFX5writeEh+0xc>
}
 23fc8fa:	2001      	movs	r0, #1
 23fc8fc:	b005      	add	sp, #20
 23fc8fe:	bd30      	pop	{r4, r5, pc}

023fc900 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
 23fc900:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
 23fc902:	8242      	strh	r2, [r0, #18]
}
 23fc904:	4770      	bx	lr

023fc906 <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
 23fc906:	2901      	cmp	r1, #1
 23fc908:	bf38      	it	cc
 23fc90a:	2101      	movcc	r1, #1
 23fc90c:	7601      	strb	r1, [r0, #24]
}
 23fc90e:	4770      	bx	lr

023fc910 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
 23fc910:	82c1      	strh	r1, [r0, #22]
 23fc912:	8281      	strh	r1, [r0, #20]
}
 23fc914:	4770      	bx	lr

023fc916 <_ZN12Adafruit_GFX11getRotationEv>:
}
 23fc916:	7e40      	ldrb	r0, [r0, #25]
 23fc918:	4770      	bx	lr

023fc91a <_ZN12Adafruit_GFX5widthEv>:
}
 23fc91a:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 23fc91e:	4770      	bx	lr

023fc920 <_ZN12Adafruit_GFX6heightEv>:
}
 23fc920:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 23fc924:	4770      	bx	lr
	...

023fc928 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fc928:	b509      	push	{r0, r3, lr}
 23fc92a:	4804      	ldr	r0, [pc, #16]	; (23fc93c <netdb_freeaddrinfo+0x14>)
 23fc92c:	6800      	ldr	r0, [r0, #0]
 23fc92e:	4b04      	ldr	r3, [pc, #16]	; (23fc940 <netdb_freeaddrinfo+0x18>)
 23fc930:	4403      	add	r3, r0
 23fc932:	681b      	ldr	r3, [r3, #0]
 23fc934:	689b      	ldr	r3, [r3, #8]
 23fc936:	9302      	str	r3, [sp, #8]
 23fc938:	bd09      	pop	{r0, r3, pc}
 23fc93a:	0000      	.short	0x0000
 23fc93c:	1007a7c0 	.word	0x1007a7c0
 23fc940:	00000050 	.word	0x00000050

023fc944 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fc944:	b509      	push	{r0, r3, lr}
 23fc946:	4804      	ldr	r0, [pc, #16]	; (23fc958 <netdb_getaddrinfo+0x14>)
 23fc948:	6800      	ldr	r0, [r0, #0]
 23fc94a:	4b04      	ldr	r3, [pc, #16]	; (23fc95c <netdb_getaddrinfo+0x18>)
 23fc94c:	4403      	add	r3, r0
 23fc94e:	681b      	ldr	r3, [r3, #0]
 23fc950:	68db      	ldr	r3, [r3, #12]
 23fc952:	9302      	str	r3, [sp, #8]
 23fc954:	bd09      	pop	{r0, r3, pc}
 23fc956:	0000      	.short	0x0000
 23fc958:	1007a7c0 	.word	0x1007a7c0
 23fc95c:	00000050 	.word	0x00000050

023fc960 <hal_pin_map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
 23fc960:	b509      	push	{r0, r3, lr}
 23fc962:	4804      	ldr	r0, [pc, #16]	; (23fc974 <hal_pin_map+0x14>)
 23fc964:	6800      	ldr	r0, [r0, #0]
 23fc966:	4b04      	ldr	r3, [pc, #16]	; (23fc978 <hal_pin_map+0x18>)
 23fc968:	4403      	add	r3, r0
 23fc96a:	681b      	ldr	r3, [r3, #0]
 23fc96c:	681b      	ldr	r3, [r3, #0]
 23fc96e:	9302      	str	r3, [sp, #8]
 23fc970:	bd09      	pop	{r0, r3, pc}
 23fc972:	0000      	.short	0x0000
 23fc974:	1007a7c0 	.word	0x1007a7c0
 23fc978:	00000014 	.word	0x00000014

023fc97c <hal_gpio_mode>:
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fc97c:	b509      	push	{r0, r3, lr}
 23fc97e:	4804      	ldr	r0, [pc, #16]	; (23fc990 <hal_gpio_mode+0x14>)
 23fc980:	6800      	ldr	r0, [r0, #0]
 23fc982:	4b04      	ldr	r3, [pc, #16]	; (23fc994 <hal_gpio_mode+0x18>)
 23fc984:	4403      	add	r3, r0
 23fc986:	681b      	ldr	r3, [r3, #0]
 23fc988:	689b      	ldr	r3, [r3, #8]
 23fc98a:	9302      	str	r3, [sp, #8]
 23fc98c:	bd09      	pop	{r0, r3, pc}
 23fc98e:	0000      	.short	0x0000
 23fc990:	1007a7c0 	.word	0x1007a7c0
 23fc994:	00000014 	.word	0x00000014

023fc998 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fc998:	b509      	push	{r0, r3, lr}
 23fc99a:	4804      	ldr	r0, [pc, #16]	; (23fc9ac <hal_gpio_get_mode+0x14>)
 23fc99c:	6800      	ldr	r0, [r0, #0]
 23fc99e:	4b04      	ldr	r3, [pc, #16]	; (23fc9b0 <hal_gpio_get_mode+0x18>)
 23fc9a0:	4403      	add	r3, r0
 23fc9a2:	681b      	ldr	r3, [r3, #0]
 23fc9a4:	68db      	ldr	r3, [r3, #12]
 23fc9a6:	9302      	str	r3, [sp, #8]
 23fc9a8:	bd09      	pop	{r0, r3, pc}
 23fc9aa:	0000      	.short	0x0000
 23fc9ac:	1007a7c0 	.word	0x1007a7c0
 23fc9b0:	00000014 	.word	0x00000014

023fc9b4 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fc9b4:	b509      	push	{r0, r3, lr}
 23fc9b6:	4804      	ldr	r0, [pc, #16]	; (23fc9c8 <hal_gpio_write+0x14>)
 23fc9b8:	6800      	ldr	r0, [r0, #0]
 23fc9ba:	4b04      	ldr	r3, [pc, #16]	; (23fc9cc <hal_gpio_write+0x18>)
 23fc9bc:	4403      	add	r3, r0
 23fc9be:	681b      	ldr	r3, [r3, #0]
 23fc9c0:	691b      	ldr	r3, [r3, #16]
 23fc9c2:	9302      	str	r3, [sp, #8]
 23fc9c4:	bd09      	pop	{r0, r3, pc}
 23fc9c6:	0000      	.short	0x0000
 23fc9c8:	1007a7c0 	.word	0x1007a7c0
 23fc9cc:	00000014 	.word	0x00000014

023fc9d0 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
 23fc9d0:	b509      	push	{r0, r3, lr}
 23fc9d2:	4804      	ldr	r0, [pc, #16]	; (23fc9e4 <hal_gpio_read+0x14>)
 23fc9d4:	6800      	ldr	r0, [r0, #0]
 23fc9d6:	4b04      	ldr	r3, [pc, #16]	; (23fc9e8 <hal_gpio_read+0x18>)
 23fc9d8:	4403      	add	r3, r0
 23fc9da:	681b      	ldr	r3, [r3, #0]
 23fc9dc:	695b      	ldr	r3, [r3, #20]
 23fc9de:	9302      	str	r3, [sp, #8]
 23fc9e0:	bd09      	pop	{r0, r3, pc}
 23fc9e2:	0000      	.short	0x0000
 23fc9e4:	1007a7c0 	.word	0x1007a7c0
 23fc9e8:	00000014 	.word	0x00000014

023fc9ec <hal_interrupt_attach>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
 23fc9ec:	b509      	push	{r0, r3, lr}
 23fc9ee:	4804      	ldr	r0, [pc, #16]	; (23fca00 <hal_interrupt_attach+0x14>)
 23fc9f0:	6800      	ldr	r0, [r0, #0]
 23fc9f2:	4b04      	ldr	r3, [pc, #16]	; (23fca04 <hal_interrupt_attach+0x18>)
 23fc9f4:	4403      	add	r3, r0
 23fc9f6:	681b      	ldr	r3, [r3, #0]
 23fc9f8:	699b      	ldr	r3, [r3, #24]
 23fc9fa:	9302      	str	r3, [sp, #8]
 23fc9fc:	bd09      	pop	{r0, r3, pc}
 23fc9fe:	0000      	.short	0x0000
 23fca00:	1007a7c0 	.word	0x1007a7c0
 23fca04:	00000014 	.word	0x00000014

023fca08 <hal_interrupt_detach>:
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
 23fca08:	b509      	push	{r0, r3, lr}
 23fca0a:	4804      	ldr	r0, [pc, #16]	; (23fca1c <hal_interrupt_detach+0x14>)
 23fca0c:	6800      	ldr	r0, [r0, #0]
 23fca0e:	4b04      	ldr	r3, [pc, #16]	; (23fca20 <hal_interrupt_detach+0x18>)
 23fca10:	4403      	add	r3, r0
 23fca12:	681b      	ldr	r3, [r3, #0]
 23fca14:	69db      	ldr	r3, [r3, #28]
 23fca16:	9302      	str	r3, [sp, #8]
 23fca18:	bd09      	pop	{r0, r3, pc}
 23fca1a:	0000      	.short	0x0000
 23fca1c:	1007a7c0 	.word	0x1007a7c0
 23fca20:	00000014 	.word	0x00000014

023fca24 <hal_interrupt_enable_all>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
 23fca24:	b509      	push	{r0, r3, lr}
 23fca26:	4804      	ldr	r0, [pc, #16]	; (23fca38 <hal_interrupt_enable_all+0x14>)
 23fca28:	6800      	ldr	r0, [r0, #0]
 23fca2a:	4b04      	ldr	r3, [pc, #16]	; (23fca3c <hal_interrupt_enable_all+0x18>)
 23fca2c:	4403      	add	r3, r0
 23fca2e:	681b      	ldr	r3, [r3, #0]
 23fca30:	6a1b      	ldr	r3, [r3, #32]
 23fca32:	9302      	str	r3, [sp, #8]
 23fca34:	bd09      	pop	{r0, r3, pc}
 23fca36:	0000      	.short	0x0000
 23fca38:	1007a7c0 	.word	0x1007a7c0
 23fca3c:	00000014 	.word	0x00000014

023fca40 <hal_interrupt_disable_all>:
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))
 23fca40:	b509      	push	{r0, r3, lr}
 23fca42:	4804      	ldr	r0, [pc, #16]	; (23fca54 <hal_interrupt_disable_all+0x14>)
 23fca44:	6800      	ldr	r0, [r0, #0]
 23fca46:	4b04      	ldr	r3, [pc, #16]	; (23fca58 <hal_interrupt_disable_all+0x18>)
 23fca48:	4403      	add	r3, r0
 23fca4a:	681b      	ldr	r3, [r3, #0]
 23fca4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fca4e:	9302      	str	r3, [sp, #8]
 23fca50:	bd09      	pop	{r0, r3, pc}
 23fca52:	0000      	.short	0x0000
 23fca54:	1007a7c0 	.word	0x1007a7c0
 23fca58:	00000014 	.word	0x00000014

023fca5c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
 23fca5c:	b509      	push	{r0, r3, lr}
 23fca5e:	4804      	ldr	r0, [pc, #16]	; (23fca70 <if_index_to_name+0x14>)
 23fca60:	6800      	ldr	r0, [r0, #0]
 23fca62:	4b04      	ldr	r3, [pc, #16]	; (23fca74 <if_index_to_name+0x18>)
 23fca64:	4403      	add	r3, r0
 23fca66:	681b      	ldr	r3, [r3, #0]
 23fca68:	695b      	ldr	r3, [r3, #20]
 23fca6a:	9302      	str	r3, [sp, #8]
 23fca6c:	bd09      	pop	{r0, r3, pc}
 23fca6e:	0000      	.short	0x0000
 23fca70:	1007a7c0 	.word	0x1007a7c0
 23fca74:	00000054 	.word	0x00000054

023fca78 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fca78:	b509      	push	{r0, r3, lr}
 23fca7a:	4804      	ldr	r0, [pc, #16]	; (23fca8c <HAL_RNG_GetRandomNumber+0x14>)
 23fca7c:	6800      	ldr	r0, [r0, #0]
 23fca7e:	4b04      	ldr	r3, [pc, #16]	; (23fca90 <HAL_RNG_GetRandomNumber+0x18>)
 23fca80:	4403      	add	r3, r0
 23fca82:	681b      	ldr	r3, [r3, #0]
 23fca84:	685b      	ldr	r3, [r3, #4]
 23fca86:	9302      	str	r3, [sp, #8]
 23fca88:	bd09      	pop	{r0, r3, pc}
 23fca8a:	0000      	.short	0x0000
 23fca8c:	1007a7c0 	.word	0x1007a7c0
 23fca90:	00000000 	.word	0x00000000

023fca94 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fca94:	b509      	push	{r0, r3, lr}
 23fca96:	4804      	ldr	r0, [pc, #16]	; (23fcaa8 <HAL_Delay_Microseconds+0x14>)
 23fca98:	6800      	ldr	r0, [r0, #0]
 23fca9a:	4b04      	ldr	r3, [pc, #16]	; (23fcaac <HAL_Delay_Microseconds+0x18>)
 23fca9c:	4403      	add	r3, r0
 23fca9e:	681b      	ldr	r3, [r3, #0]
 23fcaa0:	68db      	ldr	r3, [r3, #12]
 23fcaa2:	9302      	str	r3, [sp, #8]
 23fcaa4:	bd09      	pop	{r0, r3, pc}
 23fcaa6:	0000      	.short	0x0000
 23fcaa8:	1007a7c0 	.word	0x1007a7c0
 23fcaac:	00000000 	.word	0x00000000

023fcab0 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 23fcab0:	b509      	push	{r0, r3, lr}
 23fcab2:	4804      	ldr	r0, [pc, #16]	; (23fcac4 <HAL_Timer_Get_Micro_Seconds+0x14>)
 23fcab4:	6800      	ldr	r0, [r0, #0]
 23fcab6:	4b04      	ldr	r3, [pc, #16]	; (23fcac8 <HAL_Timer_Get_Micro_Seconds+0x18>)
 23fcab8:	4403      	add	r3, r0
 23fcaba:	681b      	ldr	r3, [r3, #0]
 23fcabc:	691b      	ldr	r3, [r3, #16]
 23fcabe:	9302      	str	r3, [sp, #8]
 23fcac0:	bd09      	pop	{r0, r3, pc}
 23fcac2:	0000      	.short	0x0000
 23fcac4:	1007a7c0 	.word	0x1007a7c0
 23fcac8:	00000000 	.word	0x00000000

023fcacc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fcacc:	b509      	push	{r0, r3, lr}
 23fcace:	4804      	ldr	r0, [pc, #16]	; (23fcae0 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fcad0:	6800      	ldr	r0, [r0, #0]
 23fcad2:	4b04      	ldr	r3, [pc, #16]	; (23fcae4 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fcad4:	4403      	add	r3, r0
 23fcad6:	681b      	ldr	r3, [r3, #0]
 23fcad8:	695b      	ldr	r3, [r3, #20]
 23fcada:	9302      	str	r3, [sp, #8]
 23fcadc:	bd09      	pop	{r0, r3, pc}
 23fcade:	0000      	.short	0x0000
 23fcae0:	1007a7c0 	.word	0x1007a7c0
 23fcae4:	00000000 	.word	0x00000000

023fcae8 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 23fcae8:	b509      	push	{r0, r3, lr}
 23fcaea:	4804      	ldr	r0, [pc, #16]	; (23fcafc <hal_timer_millis+0x14>)
 23fcaec:	6800      	ldr	r0, [r0, #0]
 23fcaee:	4b04      	ldr	r3, [pc, #16]	; (23fcb00 <hal_timer_millis+0x18>)
 23fcaf0:	4403      	add	r3, r0
 23fcaf2:	681b      	ldr	r3, [r3, #0]
 23fcaf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23fcaf6:	9302      	str	r3, [sp, #8]
 23fcaf8:	bd09      	pop	{r0, r3, pc}
 23fcafa:	0000      	.short	0x0000
 23fcafc:	1007a7c0 	.word	0x1007a7c0
 23fcb00:	00000000 	.word	0x00000000

023fcb04 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fcb04:	b509      	push	{r0, r3, lr}
 23fcb06:	4804      	ldr	r0, [pc, #16]	; (23fcb18 <os_mutex_recursive_create+0x14>)
 23fcb08:	6800      	ldr	r0, [r0, #0]
 23fcb0a:	4b04      	ldr	r3, [pc, #16]	; (23fcb1c <os_mutex_recursive_create+0x18>)
 23fcb0c:	4403      	add	r3, r0
 23fcb0e:	681b      	ldr	r3, [r3, #0]
 23fcb10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fcb12:	9302      	str	r3, [sp, #8]
 23fcb14:	bd09      	pop	{r0, r3, pc}
 23fcb16:	0000      	.short	0x0000
 23fcb18:	1007a7c0 	.word	0x1007a7c0
 23fcb1c:	00000030 	.word	0x00000030

023fcb20 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fcb20:	b509      	push	{r0, r3, lr}
 23fcb22:	4804      	ldr	r0, [pc, #16]	; (23fcb34 <inet_inet_ntop+0x14>)
 23fcb24:	6800      	ldr	r0, [r0, #0]
 23fcb26:	4b04      	ldr	r3, [pc, #16]	; (23fcb38 <inet_inet_ntop+0x18>)
 23fcb28:	4403      	add	r3, r0
 23fcb2a:	681b      	ldr	r3, [r3, #0]
 23fcb2c:	695b      	ldr	r3, [r3, #20]
 23fcb2e:	9302      	str	r3, [sp, #8]
 23fcb30:	bd09      	pop	{r0, r3, pc}
 23fcb32:	0000      	.short	0x0000
 23fcb34:	1007a7c0 	.word	0x1007a7c0
 23fcb38:	0000004c 	.word	0x0000004c

023fcb3c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
 23fcb3c:	b509      	push	{r0, r3, lr}
 23fcb3e:	4804      	ldr	r0, [pc, #16]	; (23fcb50 <inet_htonl+0x14>)
 23fcb40:	6800      	ldr	r0, [r0, #0]
 23fcb42:	4b04      	ldr	r3, [pc, #16]	; (23fcb54 <inet_htonl+0x18>)
 23fcb44:	4403      	add	r3, r0
 23fcb46:	681b      	ldr	r3, [r3, #0]
 23fcb48:	6a1b      	ldr	r3, [r3, #32]
 23fcb4a:	9302      	str	r3, [sp, #8]
 23fcb4c:	bd09      	pop	{r0, r3, pc}
 23fcb4e:	0000      	.short	0x0000
 23fcb50:	1007a7c0 	.word	0x1007a7c0
 23fcb54:	0000004c 	.word	0x0000004c

023fcb58 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
 23fcb58:	b509      	push	{r0, r3, lr}
 23fcb5a:	4804      	ldr	r0, [pc, #16]	; (23fcb6c <inet_htons+0x14>)
 23fcb5c:	6800      	ldr	r0, [r0, #0]
 23fcb5e:	4b04      	ldr	r3, [pc, #16]	; (23fcb70 <inet_htons+0x18>)
 23fcb60:	4403      	add	r3, r0
 23fcb62:	681b      	ldr	r3, [r3, #0]
 23fcb64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fcb66:	9302      	str	r3, [sp, #8]
 23fcb68:	bd09      	pop	{r0, r3, pc}
 23fcb6a:	0000      	.short	0x0000
 23fcb6c:	1007a7c0 	.word	0x1007a7c0
 23fcb70:	0000004c 	.word	0x0000004c

023fcb74 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fcb74:	b509      	push	{r0, r3, lr}
 23fcb76:	4804      	ldr	r0, [pc, #16]	; (23fcb88 <hal_usart_write+0x14>)
 23fcb78:	6800      	ldr	r0, [r0, #0]
 23fcb7a:	4b04      	ldr	r3, [pc, #16]	; (23fcb8c <hal_usart_write+0x18>)
 23fcb7c:	4403      	add	r3, r0
 23fcb7e:	681b      	ldr	r3, [r3, #0]
 23fcb80:	68db      	ldr	r3, [r3, #12]
 23fcb82:	9302      	str	r3, [sp, #8]
 23fcb84:	bd09      	pop	{r0, r3, pc}
 23fcb86:	0000      	.short	0x0000
 23fcb88:	1007a7c0 	.word	0x1007a7c0
 23fcb8c:	00000024 	.word	0x00000024

023fcb90 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fcb90:	b509      	push	{r0, r3, lr}
 23fcb92:	4804      	ldr	r0, [pc, #16]	; (23fcba4 <hal_usart_available+0x14>)
 23fcb94:	6800      	ldr	r0, [r0, #0]
 23fcb96:	4b04      	ldr	r3, [pc, #16]	; (23fcba8 <hal_usart_available+0x18>)
 23fcb98:	4403      	add	r3, r0
 23fcb9a:	681b      	ldr	r3, [r3, #0]
 23fcb9c:	691b      	ldr	r3, [r3, #16]
 23fcb9e:	9302      	str	r3, [sp, #8]
 23fcba0:	bd09      	pop	{r0, r3, pc}
 23fcba2:	0000      	.short	0x0000
 23fcba4:	1007a7c0 	.word	0x1007a7c0
 23fcba8:	00000024 	.word	0x00000024

023fcbac <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fcbac:	b509      	push	{r0, r3, lr}
 23fcbae:	4804      	ldr	r0, [pc, #16]	; (23fcbc0 <hal_usart_read+0x14>)
 23fcbb0:	6800      	ldr	r0, [r0, #0]
 23fcbb2:	4b04      	ldr	r3, [pc, #16]	; (23fcbc4 <hal_usart_read+0x18>)
 23fcbb4:	4403      	add	r3, r0
 23fcbb6:	681b      	ldr	r3, [r3, #0]
 23fcbb8:	695b      	ldr	r3, [r3, #20]
 23fcbba:	9302      	str	r3, [sp, #8]
 23fcbbc:	bd09      	pop	{r0, r3, pc}
 23fcbbe:	0000      	.short	0x0000
 23fcbc0:	1007a7c0 	.word	0x1007a7c0
 23fcbc4:	00000024 	.word	0x00000024

023fcbc8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fcbc8:	b509      	push	{r0, r3, lr}
 23fcbca:	4804      	ldr	r0, [pc, #16]	; (23fcbdc <hal_usart_peek+0x14>)
 23fcbcc:	6800      	ldr	r0, [r0, #0]
 23fcbce:	4b04      	ldr	r3, [pc, #16]	; (23fcbe0 <hal_usart_peek+0x18>)
 23fcbd0:	4403      	add	r3, r0
 23fcbd2:	681b      	ldr	r3, [r3, #0]
 23fcbd4:	699b      	ldr	r3, [r3, #24]
 23fcbd6:	9302      	str	r3, [sp, #8]
 23fcbd8:	bd09      	pop	{r0, r3, pc}
 23fcbda:	0000      	.short	0x0000
 23fcbdc:	1007a7c0 	.word	0x1007a7c0
 23fcbe0:	00000024 	.word	0x00000024

023fcbe4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fcbe4:	b509      	push	{r0, r3, lr}
 23fcbe6:	4804      	ldr	r0, [pc, #16]	; (23fcbf8 <hal_usart_flush+0x14>)
 23fcbe8:	6800      	ldr	r0, [r0, #0]
 23fcbea:	4b04      	ldr	r3, [pc, #16]	; (23fcbfc <hal_usart_flush+0x18>)
 23fcbec:	4403      	add	r3, r0
 23fcbee:	681b      	ldr	r3, [r3, #0]
 23fcbf0:	69db      	ldr	r3, [r3, #28]
 23fcbf2:	9302      	str	r3, [sp, #8]
 23fcbf4:	bd09      	pop	{r0, r3, pc}
 23fcbf6:	0000      	.short	0x0000
 23fcbf8:	1007a7c0 	.word	0x1007a7c0
 23fcbfc:	00000024 	.word	0x00000024

023fcc00 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fcc00:	b509      	push	{r0, r3, lr}
 23fcc02:	4804      	ldr	r0, [pc, #16]	; (23fcc14 <hal_usart_is_enabled+0x14>)
 23fcc04:	6800      	ldr	r0, [r0, #0]
 23fcc06:	4b04      	ldr	r3, [pc, #16]	; (23fcc18 <hal_usart_is_enabled+0x18>)
 23fcc08:	4403      	add	r3, r0
 23fcc0a:	681b      	ldr	r3, [r3, #0]
 23fcc0c:	6a1b      	ldr	r3, [r3, #32]
 23fcc0e:	9302      	str	r3, [sp, #8]
 23fcc10:	bd09      	pop	{r0, r3, pc}
 23fcc12:	0000      	.short	0x0000
 23fcc14:	1007a7c0 	.word	0x1007a7c0
 23fcc18:	00000024 	.word	0x00000024

023fcc1c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fcc1c:	b509      	push	{r0, r3, lr}
 23fcc1e:	4804      	ldr	r0, [pc, #16]	; (23fcc30 <hal_usart_available_data_for_write+0x14>)
 23fcc20:	6800      	ldr	r0, [r0, #0]
 23fcc22:	4b04      	ldr	r3, [pc, #16]	; (23fcc34 <hal_usart_available_data_for_write+0x18>)
 23fcc24:	4403      	add	r3, r0
 23fcc26:	681b      	ldr	r3, [r3, #0]
 23fcc28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fcc2a:	9302      	str	r3, [sp, #8]
 23fcc2c:	bd09      	pop	{r0, r3, pc}
 23fcc2e:	0000      	.short	0x0000
 23fcc30:	1007a7c0 	.word	0x1007a7c0
 23fcc34:	00000024 	.word	0x00000024

023fcc38 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23fcc38:	b509      	push	{r0, r3, lr}
 23fcc3a:	4804      	ldr	r0, [pc, #16]	; (23fcc4c <hal_usart_begin_config+0x14>)
 23fcc3c:	6800      	ldr	r0, [r0, #0]
 23fcc3e:	4b04      	ldr	r3, [pc, #16]	; (23fcc50 <hal_usart_begin_config+0x18>)
 23fcc40:	4403      	add	r3, r0
 23fcc42:	681b      	ldr	r3, [r3, #0]
 23fcc44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fcc46:	9302      	str	r3, [sp, #8]
 23fcc48:	bd09      	pop	{r0, r3, pc}
 23fcc4a:	0000      	.short	0x0000
 23fcc4c:	1007a7c0 	.word	0x1007a7c0
 23fcc50:	00000024 	.word	0x00000024

023fcc54 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fcc54:	b509      	push	{r0, r3, lr}
 23fcc56:	4804      	ldr	r0, [pc, #16]	; (23fcc68 <hal_usart_init_ex+0x14>)
 23fcc58:	6800      	ldr	r0, [r0, #0]
 23fcc5a:	4b04      	ldr	r3, [pc, #16]	; (23fcc6c <hal_usart_init_ex+0x18>)
 23fcc5c:	4403      	add	r3, r0
 23fcc5e:	681b      	ldr	r3, [r3, #0]
 23fcc60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fcc62:	9302      	str	r3, [sp, #8]
 23fcc64:	bd09      	pop	{r0, r3, pc}
 23fcc66:	0000      	.short	0x0000
 23fcc68:	1007a7c0 	.word	0x1007a7c0
 23fcc6c:	00000024 	.word	0x00000024

023fcc70 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 23fcc70:	b509      	push	{r0, r3, lr}
 23fcc72:	4804      	ldr	r0, [pc, #16]	; (23fcc84 <hal_i2c_begin+0x14>)
 23fcc74:	6800      	ldr	r0, [r0, #0]
 23fcc76:	4b04      	ldr	r3, [pc, #16]	; (23fcc88 <hal_i2c_begin+0x18>)
 23fcc78:	4403      	add	r3, r0
 23fcc7a:	681b      	ldr	r3, [r3, #0]
 23fcc7c:	68db      	ldr	r3, [r3, #12]
 23fcc7e:	9302      	str	r3, [sp, #8]
 23fcc80:	bd09      	pop	{r0, r3, pc}
 23fcc82:	0000      	.short	0x0000
 23fcc84:	1007a7c0 	.word	0x1007a7c0
 23fcc88:	00000010 	.word	0x00000010

023fcc8c <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23fcc8c:	b509      	push	{r0, r3, lr}
 23fcc8e:	4804      	ldr	r0, [pc, #16]	; (23fcca0 <hal_i2c_begin_transmission+0x14>)
 23fcc90:	6800      	ldr	r0, [r0, #0]
 23fcc92:	4b04      	ldr	r3, [pc, #16]	; (23fcca4 <hal_i2c_begin_transmission+0x18>)
 23fcc94:	4403      	add	r3, r0
 23fcc96:	681b      	ldr	r3, [r3, #0]
 23fcc98:	699b      	ldr	r3, [r3, #24]
 23fcc9a:	9302      	str	r3, [sp, #8]
 23fcc9c:	bd09      	pop	{r0, r3, pc}
 23fcc9e:	0000      	.short	0x0000
 23fcca0:	1007a7c0 	.word	0x1007a7c0
 23fcca4:	00000010 	.word	0x00000010

023fcca8 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23fcca8:	b509      	push	{r0, r3, lr}
 23fccaa:	4804      	ldr	r0, [pc, #16]	; (23fccbc <hal_i2c_end_transmission+0x14>)
 23fccac:	6800      	ldr	r0, [r0, #0]
 23fccae:	4b04      	ldr	r3, [pc, #16]	; (23fccc0 <hal_i2c_end_transmission+0x18>)
 23fccb0:	4403      	add	r3, r0
 23fccb2:	681b      	ldr	r3, [r3, #0]
 23fccb4:	69db      	ldr	r3, [r3, #28]
 23fccb6:	9302      	str	r3, [sp, #8]
 23fccb8:	bd09      	pop	{r0, r3, pc}
 23fccba:	0000      	.short	0x0000
 23fccbc:	1007a7c0 	.word	0x1007a7c0
 23fccc0:	00000010 	.word	0x00000010

023fccc4 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fccc4:	b509      	push	{r0, r3, lr}
 23fccc6:	4804      	ldr	r0, [pc, #16]	; (23fccd8 <hal_i2c_write+0x14>)
 23fccc8:	6800      	ldr	r0, [r0, #0]
 23fccca:	4b04      	ldr	r3, [pc, #16]	; (23fccdc <hal_i2c_write+0x18>)
 23fcccc:	4403      	add	r3, r0
 23fccce:	681b      	ldr	r3, [r3, #0]
 23fccd0:	6a1b      	ldr	r3, [r3, #32]
 23fccd2:	9302      	str	r3, [sp, #8]
 23fccd4:	bd09      	pop	{r0, r3, pc}
 23fccd6:	0000      	.short	0x0000
 23fccd8:	1007a7c0 	.word	0x1007a7c0
 23fccdc:	00000010 	.word	0x00000010

023fcce0 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fcce0:	b509      	push	{r0, r3, lr}
 23fcce2:	4804      	ldr	r0, [pc, #16]	; (23fccf4 <hal_i2c_available+0x14>)
 23fcce4:	6800      	ldr	r0, [r0, #0]
 23fcce6:	4b04      	ldr	r3, [pc, #16]	; (23fccf8 <hal_i2c_available+0x18>)
 23fcce8:	4403      	add	r3, r0
 23fccea:	681b      	ldr	r3, [r3, #0]
 23fccec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fccee:	9302      	str	r3, [sp, #8]
 23fccf0:	bd09      	pop	{r0, r3, pc}
 23fccf2:	0000      	.short	0x0000
 23fccf4:	1007a7c0 	.word	0x1007a7c0
 23fccf8:	00000010 	.word	0x00000010

023fccfc <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fccfc:	b509      	push	{r0, r3, lr}
 23fccfe:	4804      	ldr	r0, [pc, #16]	; (23fcd10 <hal_i2c_read+0x14>)
 23fcd00:	6800      	ldr	r0, [r0, #0]
 23fcd02:	4b04      	ldr	r3, [pc, #16]	; (23fcd14 <hal_i2c_read+0x18>)
 23fcd04:	4403      	add	r3, r0
 23fcd06:	681b      	ldr	r3, [r3, #0]
 23fcd08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fcd0a:	9302      	str	r3, [sp, #8]
 23fcd0c:	bd09      	pop	{r0, r3, pc}
 23fcd0e:	0000      	.short	0x0000
 23fcd10:	1007a7c0 	.word	0x1007a7c0
 23fcd14:	00000010 	.word	0x00000010

023fcd18 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fcd18:	b509      	push	{r0, r3, lr}
 23fcd1a:	4804      	ldr	r0, [pc, #16]	; (23fcd2c <hal_i2c_peek+0x14>)
 23fcd1c:	6800      	ldr	r0, [r0, #0]
 23fcd1e:	4b04      	ldr	r3, [pc, #16]	; (23fcd30 <hal_i2c_peek+0x18>)
 23fcd20:	4403      	add	r3, r0
 23fcd22:	681b      	ldr	r3, [r3, #0]
 23fcd24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fcd26:	9302      	str	r3, [sp, #8]
 23fcd28:	bd09      	pop	{r0, r3, pc}
 23fcd2a:	0000      	.short	0x0000
 23fcd2c:	1007a7c0 	.word	0x1007a7c0
 23fcd30:	00000010 	.word	0x00000010

023fcd34 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fcd34:	b509      	push	{r0, r3, lr}
 23fcd36:	4804      	ldr	r0, [pc, #16]	; (23fcd48 <hal_i2c_flush+0x14>)
 23fcd38:	6800      	ldr	r0, [r0, #0]
 23fcd3a:	4b04      	ldr	r3, [pc, #16]	; (23fcd4c <hal_i2c_flush+0x18>)
 23fcd3c:	4403      	add	r3, r0
 23fcd3e:	681b      	ldr	r3, [r3, #0]
 23fcd40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fcd42:	9302      	str	r3, [sp, #8]
 23fcd44:	bd09      	pop	{r0, r3, pc}
 23fcd46:	0000      	.short	0x0000
 23fcd48:	1007a7c0 	.word	0x1007a7c0
 23fcd4c:	00000010 	.word	0x00000010

023fcd50 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fcd50:	b509      	push	{r0, r3, lr}
 23fcd52:	4804      	ldr	r0, [pc, #16]	; (23fcd64 <hal_i2c_is_enabled+0x14>)
 23fcd54:	6800      	ldr	r0, [r0, #0]
 23fcd56:	4b04      	ldr	r3, [pc, #16]	; (23fcd68 <hal_i2c_is_enabled+0x18>)
 23fcd58:	4403      	add	r3, r0
 23fcd5a:	681b      	ldr	r3, [r3, #0]
 23fcd5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fcd5e:	9302      	str	r3, [sp, #8]
 23fcd60:	bd09      	pop	{r0, r3, pc}
 23fcd62:	0000      	.short	0x0000
 23fcd64:	1007a7c0 	.word	0x1007a7c0
 23fcd68:	00000010 	.word	0x00000010

023fcd6c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fcd6c:	b509      	push	{r0, r3, lr}
 23fcd6e:	4804      	ldr	r0, [pc, #16]	; (23fcd80 <hal_i2c_init+0x14>)
 23fcd70:	6800      	ldr	r0, [r0, #0]
 23fcd72:	4b04      	ldr	r3, [pc, #16]	; (23fcd84 <hal_i2c_init+0x18>)
 23fcd74:	4403      	add	r3, r0
 23fcd76:	681b      	ldr	r3, [r3, #0]
 23fcd78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fcd7a:	9302      	str	r3, [sp, #8]
 23fcd7c:	bd09      	pop	{r0, r3, pc}
 23fcd7e:	0000      	.short	0x0000
 23fcd80:	1007a7c0 	.word	0x1007a7c0
 23fcd84:	00000010 	.word	0x00000010

023fcd88 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 23fcd88:	b509      	push	{r0, r3, lr}
 23fcd8a:	4804      	ldr	r0, [pc, #16]	; (23fcd9c <hal_i2c_request_ex+0x14>)
 23fcd8c:	6800      	ldr	r0, [r0, #0]
 23fcd8e:	4b04      	ldr	r3, [pc, #16]	; (23fcda0 <hal_i2c_request_ex+0x18>)
 23fcd90:	4403      	add	r3, r0
 23fcd92:	681b      	ldr	r3, [r3, #0]
 23fcd94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fcd96:	9302      	str	r3, [sp, #8]
 23fcd98:	bd09      	pop	{r0, r3, pc}
 23fcd9a:	0000      	.short	0x0000
 23fcd9c:	1007a7c0 	.word	0x1007a7c0
 23fcda0:	00000010 	.word	0x00000010

023fcda4 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
 23fcda4:	b509      	push	{r0, r3, lr}
 23fcda6:	4804      	ldr	r0, [pc, #16]	; (23fcdb8 <sock_setsockopt+0x14>)
 23fcda8:	6800      	ldr	r0, [r0, #0]
 23fcdaa:	4b04      	ldr	r3, [pc, #16]	; (23fcdbc <sock_setsockopt+0x18>)
 23fcdac:	4403      	add	r3, r0
 23fcdae:	681b      	ldr	r3, [r3, #0]
 23fcdb0:	699b      	ldr	r3, [r3, #24]
 23fcdb2:	9302      	str	r3, [sp, #8]
 23fcdb4:	bd09      	pop	{r0, r3, pc}
 23fcdb6:	0000      	.short	0x0000
 23fcdb8:	1007a7c0 	.word	0x1007a7c0
 23fcdbc:	00000020 	.word	0x00000020

023fcdc0 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
 23fcdc0:	b509      	push	{r0, r3, lr}
 23fcdc2:	4804      	ldr	r0, [pc, #16]	; (23fcdd4 <sock_close+0x14>)
 23fcdc4:	6800      	ldr	r0, [r0, #0]
 23fcdc6:	4b04      	ldr	r3, [pc, #16]	; (23fcdd8 <sock_close+0x18>)
 23fcdc8:	4403      	add	r3, r0
 23fcdca:	681b      	ldr	r3, [r3, #0]
 23fcdcc:	69db      	ldr	r3, [r3, #28]
 23fcdce:	9302      	str	r3, [sp, #8]
 23fcdd0:	bd09      	pop	{r0, r3, pc}
 23fcdd2:	0000      	.short	0x0000
 23fcdd4:	1007a7c0 	.word	0x1007a7c0
 23fcdd8:	00000020 	.word	0x00000020

023fcddc <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
 23fcddc:	b509      	push	{r0, r3, lr}
 23fcdde:	4804      	ldr	r0, [pc, #16]	; (23fcdf0 <sock_connect+0x14>)
 23fcde0:	6800      	ldr	r0, [r0, #0]
 23fcde2:	4b04      	ldr	r3, [pc, #16]	; (23fcdf4 <sock_connect+0x18>)
 23fcde4:	4403      	add	r3, r0
 23fcde6:	681b      	ldr	r3, [r3, #0]
 23fcde8:	6a1b      	ldr	r3, [r3, #32]
 23fcdea:	9302      	str	r3, [sp, #8]
 23fcdec:	bd09      	pop	{r0, r3, pc}
 23fcdee:	0000      	.short	0x0000
 23fcdf0:	1007a7c0 	.word	0x1007a7c0
 23fcdf4:	00000020 	.word	0x00000020

023fcdf8 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
 23fcdf8:	b509      	push	{r0, r3, lr}
 23fcdfa:	4804      	ldr	r0, [pc, #16]	; (23fce0c <sock_recv+0x14>)
 23fcdfc:	6800      	ldr	r0, [r0, #0]
 23fcdfe:	4b04      	ldr	r3, [pc, #16]	; (23fce10 <sock_recv+0x18>)
 23fce00:	4403      	add	r3, r0
 23fce02:	681b      	ldr	r3, [r3, #0]
 23fce04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fce06:	9302      	str	r3, [sp, #8]
 23fce08:	bd09      	pop	{r0, r3, pc}
 23fce0a:	0000      	.short	0x0000
 23fce0c:	1007a7c0 	.word	0x1007a7c0
 23fce10:	00000020 	.word	0x00000020

023fce14 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
 23fce14:	b509      	push	{r0, r3, lr}
 23fce16:	4804      	ldr	r0, [pc, #16]	; (23fce28 <sock_send+0x14>)
 23fce18:	6800      	ldr	r0, [r0, #0]
 23fce1a:	4b04      	ldr	r3, [pc, #16]	; (23fce2c <sock_send+0x18>)
 23fce1c:	4403      	add	r3, r0
 23fce1e:	681b      	ldr	r3, [r3, #0]
 23fce20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fce22:	9302      	str	r3, [sp, #8]
 23fce24:	bd09      	pop	{r0, r3, pc}
 23fce26:	0000      	.short	0x0000
 23fce28:	1007a7c0 	.word	0x1007a7c0
 23fce2c:	00000020 	.word	0x00000020

023fce30 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
 23fce30:	b509      	push	{r0, r3, lr}
 23fce32:	4804      	ldr	r0, [pc, #16]	; (23fce44 <sock_socket+0x14>)
 23fce34:	6800      	ldr	r0, [r0, #0]
 23fce36:	4b04      	ldr	r3, [pc, #16]	; (23fce48 <sock_socket+0x18>)
 23fce38:	4403      	add	r3, r0
 23fce3a:	681b      	ldr	r3, [r3, #0]
 23fce3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23fce3e:	9302      	str	r3, [sp, #8]
 23fce40:	bd09      	pop	{r0, r3, pc}
 23fce42:	0000      	.short	0x0000
 23fce44:	1007a7c0 	.word	0x1007a7c0
 23fce48:	00000020 	.word	0x00000020

023fce4c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 23fce4c:	b509      	push	{r0, r3, lr}
 23fce4e:	4804      	ldr	r0, [pc, #16]	; (23fce60 <hal_spi_begin+0x14>)
 23fce50:	6800      	ldr	r0, [r0, #0]
 23fce52:	4b04      	ldr	r3, [pc, #16]	; (23fce64 <hal_spi_begin+0x18>)
 23fce54:	4403      	add	r3, r0
 23fce56:	681b      	ldr	r3, [r3, #0]
 23fce58:	681b      	ldr	r3, [r3, #0]
 23fce5a:	9302      	str	r3, [sp, #8]
 23fce5c:	bd09      	pop	{r0, r3, pc}
 23fce5e:	0000      	.short	0x0000
 23fce60:	1007a7c0 	.word	0x1007a7c0
 23fce64:	00000018 	.word	0x00000018

023fce68 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
 23fce68:	b509      	push	{r0, r3, lr}
 23fce6a:	4804      	ldr	r0, [pc, #16]	; (23fce7c <hal_spi_set_bit_order+0x14>)
 23fce6c:	6800      	ldr	r0, [r0, #0]
 23fce6e:	4b04      	ldr	r3, [pc, #16]	; (23fce80 <hal_spi_set_bit_order+0x18>)
 23fce70:	4403      	add	r3, r0
 23fce72:	681b      	ldr	r3, [r3, #0]
 23fce74:	689b      	ldr	r3, [r3, #8]
 23fce76:	9302      	str	r3, [sp, #8]
 23fce78:	bd09      	pop	{r0, r3, pc}
 23fce7a:	0000      	.short	0x0000
 23fce7c:	1007a7c0 	.word	0x1007a7c0
 23fce80:	00000018 	.word	0x00000018

023fce84 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
 23fce84:	b509      	push	{r0, r3, lr}
 23fce86:	4804      	ldr	r0, [pc, #16]	; (23fce98 <hal_spi_set_data_mode+0x14>)
 23fce88:	6800      	ldr	r0, [r0, #0]
 23fce8a:	4b04      	ldr	r3, [pc, #16]	; (23fce9c <hal_spi_set_data_mode+0x18>)
 23fce8c:	4403      	add	r3, r0
 23fce8e:	681b      	ldr	r3, [r3, #0]
 23fce90:	68db      	ldr	r3, [r3, #12]
 23fce92:	9302      	str	r3, [sp, #8]
 23fce94:	bd09      	pop	{r0, r3, pc}
 23fce96:	0000      	.short	0x0000
 23fce98:	1007a7c0 	.word	0x1007a7c0
 23fce9c:	00000018 	.word	0x00000018

023fcea0 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
 23fcea0:	b509      	push	{r0, r3, lr}
 23fcea2:	4804      	ldr	r0, [pc, #16]	; (23fceb4 <hal_spi_set_clock_divider+0x14>)
 23fcea4:	6800      	ldr	r0, [r0, #0]
 23fcea6:	4b04      	ldr	r3, [pc, #16]	; (23fceb8 <hal_spi_set_clock_divider+0x18>)
 23fcea8:	4403      	add	r3, r0
 23fceaa:	681b      	ldr	r3, [r3, #0]
 23fceac:	691b      	ldr	r3, [r3, #16]
 23fceae:	9302      	str	r3, [sp, #8]
 23fceb0:	bd09      	pop	{r0, r3, pc}
 23fceb2:	0000      	.short	0x0000
 23fceb4:	1007a7c0 	.word	0x1007a7c0
 23fceb8:	00000018 	.word	0x00000018

023fcebc <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 23fcebc:	b509      	push	{r0, r3, lr}
 23fcebe:	4804      	ldr	r0, [pc, #16]	; (23fced0 <hal_spi_transfer+0x14>)
 23fcec0:	6800      	ldr	r0, [r0, #0]
 23fcec2:	4b04      	ldr	r3, [pc, #16]	; (23fced4 <hal_spi_transfer+0x18>)
 23fcec4:	4403      	add	r3, r0
 23fcec6:	681b      	ldr	r3, [r3, #0]
 23fcec8:	695b      	ldr	r3, [r3, #20]
 23fceca:	9302      	str	r3, [sp, #8]
 23fcecc:	bd09      	pop	{r0, r3, pc}
 23fcece:	0000      	.short	0x0000
 23fced0:	1007a7c0 	.word	0x1007a7c0
 23fced4:	00000018 	.word	0x00000018

023fced8 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fced8:	b509      	push	{r0, r3, lr}
 23fceda:	4804      	ldr	r0, [pc, #16]	; (23fceec <hal_spi_init+0x14>)
 23fcedc:	6800      	ldr	r0, [r0, #0]
 23fcede:	4b04      	ldr	r3, [pc, #16]	; (23fcef0 <hal_spi_init+0x18>)
 23fcee0:	4403      	add	r3, r0
 23fcee2:	681b      	ldr	r3, [r3, #0]
 23fcee4:	69db      	ldr	r3, [r3, #28]
 23fcee6:	9302      	str	r3, [sp, #8]
 23fcee8:	bd09      	pop	{r0, r3, pc}
 23fceea:	0000      	.short	0x0000
 23fceec:	1007a7c0 	.word	0x1007a7c0
 23fcef0:	00000018 	.word	0x00000018

023fcef4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fcef4:	b509      	push	{r0, r3, lr}
 23fcef6:	4804      	ldr	r0, [pc, #16]	; (23fcf08 <hal_spi_is_enabled+0x14>)
 23fcef8:	6800      	ldr	r0, [r0, #0]
 23fcefa:	4b04      	ldr	r3, [pc, #16]	; (23fcf0c <hal_spi_is_enabled+0x18>)
 23fcefc:	4403      	add	r3, r0
 23fcefe:	681b      	ldr	r3, [r3, #0]
 23fcf00:	6a1b      	ldr	r3, [r3, #32]
 23fcf02:	9302      	str	r3, [sp, #8]
 23fcf04:	bd09      	pop	{r0, r3, pc}
 23fcf06:	0000      	.short	0x0000
 23fcf08:	1007a7c0 	.word	0x1007a7c0
 23fcf0c:	00000018 	.word	0x00000018

023fcf10 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 23fcf10:	b509      	push	{r0, r3, lr}
 23fcf12:	4804      	ldr	r0, [pc, #16]	; (23fcf24 <hal_spi_info+0x14>)
 23fcf14:	6800      	ldr	r0, [r0, #0]
 23fcf16:	4b04      	ldr	r3, [pc, #16]	; (23fcf28 <hal_spi_info+0x18>)
 23fcf18:	4403      	add	r3, r0
 23fcf1a:	681b      	ldr	r3, [r3, #0]
 23fcf1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fcf1e:	9302      	str	r3, [sp, #8]
 23fcf20:	bd09      	pop	{r0, r3, pc}
 23fcf22:	0000      	.short	0x0000
 23fcf24:	1007a7c0 	.word	0x1007a7c0
 23fcf28:	00000018 	.word	0x00000018

023fcf2c <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
 23fcf2c:	b509      	push	{r0, r3, lr}
 23fcf2e:	4804      	ldr	r0, [pc, #16]	; (23fcf40 <hal_spi_transfer_dma+0x14>)
 23fcf30:	6800      	ldr	r0, [r0, #0]
 23fcf32:	4b04      	ldr	r3, [pc, #16]	; (23fcf44 <hal_spi_transfer_dma+0x18>)
 23fcf34:	4403      	add	r3, r0
 23fcf36:	681b      	ldr	r3, [r3, #0]
 23fcf38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fcf3a:	9302      	str	r3, [sp, #8]
 23fcf3c:	bd09      	pop	{r0, r3, pc}
 23fcf3e:	0000      	.short	0x0000
 23fcf40:	1007a7c0 	.word	0x1007a7c0
 23fcf44:	00000018 	.word	0x00000018

023fcf48 <hal_spi_begin_ext>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
 23fcf48:	b509      	push	{r0, r3, lr}
 23fcf4a:	4804      	ldr	r0, [pc, #16]	; (23fcf5c <hal_spi_begin_ext+0x14>)
 23fcf4c:	6800      	ldr	r0, [r0, #0]
 23fcf4e:	4b04      	ldr	r3, [pc, #16]	; (23fcf60 <hal_spi_begin_ext+0x18>)
 23fcf50:	4403      	add	r3, r0
 23fcf52:	681b      	ldr	r3, [r3, #0]
 23fcf54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fcf56:	9302      	str	r3, [sp, #8]
 23fcf58:	bd09      	pop	{r0, r3, pc}
 23fcf5a:	0000      	.short	0x0000
 23fcf5c:	1007a7c0 	.word	0x1007a7c0
 23fcf60:	00000018 	.word	0x00000018

023fcf64 <hal_spi_transfer_dma_status>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
 23fcf64:	b509      	push	{r0, r3, lr}
 23fcf66:	4804      	ldr	r0, [pc, #16]	; (23fcf78 <hal_spi_transfer_dma_status+0x14>)
 23fcf68:	6800      	ldr	r0, [r0, #0]
 23fcf6a:	4b04      	ldr	r3, [pc, #16]	; (23fcf7c <hal_spi_transfer_dma_status+0x18>)
 23fcf6c:	4403      	add	r3, r0
 23fcf6e:	681b      	ldr	r3, [r3, #0]
 23fcf70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23fcf72:	9302      	str	r3, [sp, #8]
 23fcf74:	bd09      	pop	{r0, r3, pc}
 23fcf76:	0000      	.short	0x0000
 23fcf78:	1007a7c0 	.word	0x1007a7c0
 23fcf7c:	00000018 	.word	0x00000018

023fcf80 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 23fcf80:	b509      	push	{r0, r3, lr}
 23fcf82:	4804      	ldr	r0, [pc, #16]	; (23fcf94 <hal_spi_set_settings+0x14>)
 23fcf84:	6800      	ldr	r0, [r0, #0]
 23fcf86:	4b04      	ldr	r3, [pc, #16]	; (23fcf98 <hal_spi_set_settings+0x18>)
 23fcf88:	4403      	add	r3, r0
 23fcf8a:	681b      	ldr	r3, [r3, #0]
 23fcf8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fcf8e:	9302      	str	r3, [sp, #8]
 23fcf90:	bd09      	pop	{r0, r3, pc}
 23fcf92:	0000      	.short	0x0000
 23fcf94:	1007a7c0 	.word	0x1007a7c0
 23fcf98:	00000018 	.word	0x00000018

023fcf9c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
 23fcf9c:	b509      	push	{r0, r3, lr}
 23fcf9e:	4804      	ldr	r0, [pc, #16]	; (23fcfb0 <hal_spi_acquire+0x14>)
 23fcfa0:	6800      	ldr	r0, [r0, #0]
 23fcfa2:	4b04      	ldr	r3, [pc, #16]	; (23fcfb4 <hal_spi_acquire+0x18>)
 23fcfa4:	4403      	add	r3, r0
 23fcfa6:	681b      	ldr	r3, [r3, #0]
 23fcfa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fcfaa:	9302      	str	r3, [sp, #8]
 23fcfac:	bd09      	pop	{r0, r3, pc}
 23fcfae:	0000      	.short	0x0000
 23fcfb0:	1007a7c0 	.word	0x1007a7c0
 23fcfb4:	00000018 	.word	0x00000018

023fcfb8 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
 23fcfb8:	b509      	push	{r0, r3, lr}
 23fcfba:	4804      	ldr	r0, [pc, #16]	; (23fcfcc <hal_spi_release+0x14>)
 23fcfbc:	6800      	ldr	r0, [r0, #0]
 23fcfbe:	4b04      	ldr	r3, [pc, #16]	; (23fcfd0 <hal_spi_release+0x18>)
 23fcfc0:	4403      	add	r3, r0
 23fcfc2:	681b      	ldr	r3, [r3, #0]
 23fcfc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fcfc6:	9302      	str	r3, [sp, #8]
 23fcfc8:	bd09      	pop	{r0, r3, pc}
 23fcfca:	0000      	.short	0x0000
 23fcfcc:	1007a7c0 	.word	0x1007a7c0
 23fcfd0:	00000018 	.word	0x00000018

023fcfd4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fcfd4:	b509      	push	{r0, r3, lr}
 23fcfd6:	4804      	ldr	r0, [pc, #16]	; (23fcfe8 <HAL_USB_USART_Init+0x14>)
 23fcfd8:	6800      	ldr	r0, [r0, #0]
 23fcfda:	4b04      	ldr	r3, [pc, #16]	; (23fcfec <HAL_USB_USART_Init+0x18>)
 23fcfdc:	4403      	add	r3, r0
 23fcfde:	681b      	ldr	r3, [r3, #0]
 23fcfe0:	681b      	ldr	r3, [r3, #0]
 23fcfe2:	9302      	str	r3, [sp, #8]
 23fcfe4:	bd09      	pop	{r0, r3, pc}
 23fcfe6:	0000      	.short	0x0000
 23fcfe8:	1007a7c0 	.word	0x1007a7c0
 23fcfec:	00000034 	.word	0x00000034

023fcff0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fcff0:	b509      	push	{r0, r3, lr}
 23fcff2:	4804      	ldr	r0, [pc, #16]	; (23fd004 <HAL_USB_USART_Begin+0x14>)
 23fcff4:	6800      	ldr	r0, [r0, #0]
 23fcff6:	4b04      	ldr	r3, [pc, #16]	; (23fd008 <HAL_USB_USART_Begin+0x18>)
 23fcff8:	4403      	add	r3, r0
 23fcffa:	681b      	ldr	r3, [r3, #0]
 23fcffc:	685b      	ldr	r3, [r3, #4]
 23fcffe:	9302      	str	r3, [sp, #8]
 23fd000:	bd09      	pop	{r0, r3, pc}
 23fd002:	0000      	.short	0x0000
 23fd004:	1007a7c0 	.word	0x1007a7c0
 23fd008:	00000034 	.word	0x00000034

023fd00c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fd00c:	b509      	push	{r0, r3, lr}
 23fd00e:	4804      	ldr	r0, [pc, #16]	; (23fd020 <HAL_USB_USART_Available_Data+0x14>)
 23fd010:	6800      	ldr	r0, [r0, #0]
 23fd012:	4b04      	ldr	r3, [pc, #16]	; (23fd024 <HAL_USB_USART_Available_Data+0x18>)
 23fd014:	4403      	add	r3, r0
 23fd016:	681b      	ldr	r3, [r3, #0]
 23fd018:	691b      	ldr	r3, [r3, #16]
 23fd01a:	9302      	str	r3, [sp, #8]
 23fd01c:	bd09      	pop	{r0, r3, pc}
 23fd01e:	0000      	.short	0x0000
 23fd020:	1007a7c0 	.word	0x1007a7c0
 23fd024:	00000034 	.word	0x00000034

023fd028 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fd028:	b509      	push	{r0, r3, lr}
 23fd02a:	4804      	ldr	r0, [pc, #16]	; (23fd03c <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fd02c:	6800      	ldr	r0, [r0, #0]
 23fd02e:	4b04      	ldr	r3, [pc, #16]	; (23fd040 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fd030:	4403      	add	r3, r0
 23fd032:	681b      	ldr	r3, [r3, #0]
 23fd034:	695b      	ldr	r3, [r3, #20]
 23fd036:	9302      	str	r3, [sp, #8]
 23fd038:	bd09      	pop	{r0, r3, pc}
 23fd03a:	0000      	.short	0x0000
 23fd03c:	1007a7c0 	.word	0x1007a7c0
 23fd040:	00000034 	.word	0x00000034

023fd044 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fd044:	b509      	push	{r0, r3, lr}
 23fd046:	4804      	ldr	r0, [pc, #16]	; (23fd058 <HAL_USB_USART_Receive_Data+0x14>)
 23fd048:	6800      	ldr	r0, [r0, #0]
 23fd04a:	4b04      	ldr	r3, [pc, #16]	; (23fd05c <HAL_USB_USART_Receive_Data+0x18>)
 23fd04c:	4403      	add	r3, r0
 23fd04e:	681b      	ldr	r3, [r3, #0]
 23fd050:	699b      	ldr	r3, [r3, #24]
 23fd052:	9302      	str	r3, [sp, #8]
 23fd054:	bd09      	pop	{r0, r3, pc}
 23fd056:	0000      	.short	0x0000
 23fd058:	1007a7c0 	.word	0x1007a7c0
 23fd05c:	00000034 	.word	0x00000034

023fd060 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fd060:	b509      	push	{r0, r3, lr}
 23fd062:	4804      	ldr	r0, [pc, #16]	; (23fd074 <HAL_USB_USART_Send_Data+0x14>)
 23fd064:	6800      	ldr	r0, [r0, #0]
 23fd066:	4b04      	ldr	r3, [pc, #16]	; (23fd078 <HAL_USB_USART_Send_Data+0x18>)
 23fd068:	4403      	add	r3, r0
 23fd06a:	681b      	ldr	r3, [r3, #0]
 23fd06c:	69db      	ldr	r3, [r3, #28]
 23fd06e:	9302      	str	r3, [sp, #8]
 23fd070:	bd09      	pop	{r0, r3, pc}
 23fd072:	0000      	.short	0x0000
 23fd074:	1007a7c0 	.word	0x1007a7c0
 23fd078:	00000034 	.word	0x00000034

023fd07c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fd07c:	b509      	push	{r0, r3, lr}
 23fd07e:	4804      	ldr	r0, [pc, #16]	; (23fd090 <HAL_USB_USART_Flush_Data+0x14>)
 23fd080:	6800      	ldr	r0, [r0, #0]
 23fd082:	4b04      	ldr	r3, [pc, #16]	; (23fd094 <HAL_USB_USART_Flush_Data+0x18>)
 23fd084:	4403      	add	r3, r0
 23fd086:	681b      	ldr	r3, [r3, #0]
 23fd088:	6a1b      	ldr	r3, [r3, #32]
 23fd08a:	9302      	str	r3, [sp, #8]
 23fd08c:	bd09      	pop	{r0, r3, pc}
 23fd08e:	0000      	.short	0x0000
 23fd090:	1007a7c0 	.word	0x1007a7c0
 23fd094:	00000034 	.word	0x00000034

023fd098 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
 23fd098:	b509      	push	{r0, r3, lr}
 23fd09a:	4804      	ldr	r0, [pc, #16]	; (23fd0ac <HAL_USB_USART_Is_Connected+0x14>)
 23fd09c:	6800      	ldr	r0, [r0, #0]
 23fd09e:	4b04      	ldr	r3, [pc, #16]	; (23fd0b0 <HAL_USB_USART_Is_Connected+0x18>)
 23fd0a0:	4403      	add	r3, r0
 23fd0a2:	681b      	ldr	r3, [r3, #0]
 23fd0a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fd0a6:	9302      	str	r3, [sp, #8]
 23fd0a8:	bd09      	pop	{r0, r3, pc}
 23fd0aa:	0000      	.short	0x0000
 23fd0ac:	1007a7c0 	.word	0x1007a7c0
 23fd0b0:	00000034 	.word	0x00000034

023fd0b4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fd0b4:	b509      	push	{r0, r3, lr}
 23fd0b6:	4804      	ldr	r0, [pc, #16]	; (23fd0c8 <panic_+0x14>)
 23fd0b8:	6800      	ldr	r0, [r0, #0]
 23fd0ba:	4b04      	ldr	r3, [pc, #16]	; (23fd0cc <panic_+0x18>)
 23fd0bc:	4403      	add	r3, r0
 23fd0be:	681b      	ldr	r3, [r3, #0]
 23fd0c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fd0c2:	9302      	str	r3, [sp, #8]
 23fd0c4:	bd09      	pop	{r0, r3, pc}
 23fd0c6:	0000      	.short	0x0000
 23fd0c8:	1007a7c0 	.word	0x1007a7c0
 23fd0cc:	00000048 	.word	0x00000048

023fd0d0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 23fd0d0:	b509      	push	{r0, r3, lr}
 23fd0d2:	4804      	ldr	r0, [pc, #16]	; (23fd0e4 <log_message+0x14>)
 23fd0d4:	6800      	ldr	r0, [r0, #0]
 23fd0d6:	4b04      	ldr	r3, [pc, #16]	; (23fd0e8 <log_message+0x18>)
 23fd0d8:	4403      	add	r3, r0
 23fd0da:	681b      	ldr	r3, [r3, #0]
 23fd0dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fd0de:	9302      	str	r3, [sp, #8]
 23fd0e0:	bd09      	pop	{r0, r3, pc}
 23fd0e2:	0000      	.short	0x0000
 23fd0e4:	1007a7c0 	.word	0x1007a7c0
 23fd0e8:	00000048 	.word	0x00000048

023fd0ec <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23fd0ec:	b509      	push	{r0, r3, lr}
 23fd0ee:	4804      	ldr	r0, [pc, #16]	; (23fd100 <log_message_v+0x14>)
 23fd0f0:	6800      	ldr	r0, [r0, #0]
 23fd0f2:	4b04      	ldr	r3, [pc, #16]	; (23fd104 <log_message_v+0x18>)
 23fd0f4:	4403      	add	r3, r0
 23fd0f6:	681b      	ldr	r3, [r3, #0]
 23fd0f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fd0fa:	9302      	str	r3, [sp, #8]
 23fd0fc:	bd09      	pop	{r0, r3, pc}
 23fd0fe:	0000      	.short	0x0000
 23fd100:	1007a7c0 	.word	0x1007a7c0
 23fd104:	00000048 	.word	0x00000048

023fd108 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fd108:	b509      	push	{r0, r3, lr}
 23fd10a:	4804      	ldr	r0, [pc, #16]	; (23fd11c <set_system_mode+0x14>)
 23fd10c:	6800      	ldr	r0, [r0, #0]
 23fd10e:	4b04      	ldr	r3, [pc, #16]	; (23fd120 <set_system_mode+0x18>)
 23fd110:	4403      	add	r3, r0
 23fd112:	681b      	ldr	r3, [r3, #0]
 23fd114:	685b      	ldr	r3, [r3, #4]
 23fd116:	9302      	str	r3, [sp, #8]
 23fd118:	bd09      	pop	{r0, r3, pc}
 23fd11a:	0000      	.short	0x0000
 23fd11c:	1007a7c0 	.word	0x1007a7c0
 23fd120:	00000008 	.word	0x00000008

023fd124 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fd124:	b509      	push	{r0, r3, lr}
 23fd126:	4804      	ldr	r0, [pc, #16]	; (23fd138 <system_delay_ms+0x14>)
 23fd128:	6800      	ldr	r0, [r0, #0]
 23fd12a:	4b04      	ldr	r3, [pc, #16]	; (23fd13c <system_delay_ms+0x18>)
 23fd12c:	4403      	add	r3, r0
 23fd12e:	681b      	ldr	r3, [r3, #0]
 23fd130:	695b      	ldr	r3, [r3, #20]
 23fd132:	9302      	str	r3, [sp, #8]
 23fd134:	bd09      	pop	{r0, r3, pc}
 23fd136:	0000      	.short	0x0000
 23fd138:	1007a7c0 	.word	0x1007a7c0
 23fd13c:	00000008 	.word	0x00000008

023fd140 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fd140:	b509      	push	{r0, r3, lr}
 23fd142:	4804      	ldr	r0, [pc, #16]	; (23fd154 <system_ctrl_set_app_request_handler+0x14>)
 23fd144:	6800      	ldr	r0, [r0, #0]
 23fd146:	4b04      	ldr	r3, [pc, #16]	; (23fd158 <system_ctrl_set_app_request_handler+0x18>)
 23fd148:	4403      	add	r3, r0
 23fd14a:	681b      	ldr	r3, [r3, #0]
 23fd14c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fd150:	9302      	str	r3, [sp, #8]
 23fd152:	bd09      	pop	{r0, r3, pc}
 23fd154:	1007a7c0 	.word	0x1007a7c0
 23fd158:	00000008 	.word	0x00000008

023fd15c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fd15c:	b509      	push	{r0, r3, lr}
 23fd15e:	4804      	ldr	r0, [pc, #16]	; (23fd170 <system_ctrl_set_result+0x14>)
 23fd160:	6800      	ldr	r0, [r0, #0]
 23fd162:	4b04      	ldr	r3, [pc, #16]	; (23fd174 <system_ctrl_set_result+0x18>)
 23fd164:	4403      	add	r3, r0
 23fd166:	681b      	ldr	r3, [r3, #0]
 23fd168:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fd16c:	9302      	str	r3, [sp, #8]
 23fd16e:	bd09      	pop	{r0, r3, pc}
 23fd170:	1007a7c0 	.word	0x1007a7c0
 23fd174:	00000008 	.word	0x00000008

023fd178 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fd178:	b509      	push	{r0, r3, lr}
 23fd17a:	4804      	ldr	r0, [pc, #16]	; (23fd18c <network_connect+0x14>)
 23fd17c:	6800      	ldr	r0, [r0, #0]
 23fd17e:	4b04      	ldr	r3, [pc, #16]	; (23fd190 <network_connect+0x18>)
 23fd180:	4403      	add	r3, r0
 23fd182:	681b      	ldr	r3, [r3, #0]
 23fd184:	685b      	ldr	r3, [r3, #4]
 23fd186:	9302      	str	r3, [sp, #8]
 23fd188:	bd09      	pop	{r0, r3, pc}
 23fd18a:	0000      	.short	0x0000
 23fd18c:	1007a7c0 	.word	0x1007a7c0
 23fd190:	00000028 	.word	0x00000028

023fd194 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fd194:	b509      	push	{r0, r3, lr}
 23fd196:	4804      	ldr	r0, [pc, #16]	; (23fd1a8 <network_connecting+0x14>)
 23fd198:	6800      	ldr	r0, [r0, #0]
 23fd19a:	4b04      	ldr	r3, [pc, #16]	; (23fd1ac <network_connecting+0x18>)
 23fd19c:	4403      	add	r3, r0
 23fd19e:	681b      	ldr	r3, [r3, #0]
 23fd1a0:	689b      	ldr	r3, [r3, #8]
 23fd1a2:	9302      	str	r3, [sp, #8]
 23fd1a4:	bd09      	pop	{r0, r3, pc}
 23fd1a6:	0000      	.short	0x0000
 23fd1a8:	1007a7c0 	.word	0x1007a7c0
 23fd1ac:	00000028 	.word	0x00000028

023fd1b0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fd1b0:	b509      	push	{r0, r3, lr}
 23fd1b2:	4804      	ldr	r0, [pc, #16]	; (23fd1c4 <network_disconnect+0x14>)
 23fd1b4:	6800      	ldr	r0, [r0, #0]
 23fd1b6:	4b04      	ldr	r3, [pc, #16]	; (23fd1c8 <network_disconnect+0x18>)
 23fd1b8:	4403      	add	r3, r0
 23fd1ba:	681b      	ldr	r3, [r3, #0]
 23fd1bc:	68db      	ldr	r3, [r3, #12]
 23fd1be:	9302      	str	r3, [sp, #8]
 23fd1c0:	bd09      	pop	{r0, r3, pc}
 23fd1c2:	0000      	.short	0x0000
 23fd1c4:	1007a7c0 	.word	0x1007a7c0
 23fd1c8:	00000028 	.word	0x00000028

023fd1cc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fd1cc:	b509      	push	{r0, r3, lr}
 23fd1ce:	4804      	ldr	r0, [pc, #16]	; (23fd1e0 <network_ready+0x14>)
 23fd1d0:	6800      	ldr	r0, [r0, #0]
 23fd1d2:	4b04      	ldr	r3, [pc, #16]	; (23fd1e4 <network_ready+0x18>)
 23fd1d4:	4403      	add	r3, r0
 23fd1d6:	681b      	ldr	r3, [r3, #0]
 23fd1d8:	691b      	ldr	r3, [r3, #16]
 23fd1da:	9302      	str	r3, [sp, #8]
 23fd1dc:	bd09      	pop	{r0, r3, pc}
 23fd1de:	0000      	.short	0x0000
 23fd1e0:	1007a7c0 	.word	0x1007a7c0
 23fd1e4:	00000028 	.word	0x00000028

023fd1e8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fd1e8:	b509      	push	{r0, r3, lr}
 23fd1ea:	4804      	ldr	r0, [pc, #16]	; (23fd1fc <network_on+0x14>)
 23fd1ec:	6800      	ldr	r0, [r0, #0]
 23fd1ee:	4b04      	ldr	r3, [pc, #16]	; (23fd200 <network_on+0x18>)
 23fd1f0:	4403      	add	r3, r0
 23fd1f2:	681b      	ldr	r3, [r3, #0]
 23fd1f4:	695b      	ldr	r3, [r3, #20]
 23fd1f6:	9302      	str	r3, [sp, #8]
 23fd1f8:	bd09      	pop	{r0, r3, pc}
 23fd1fa:	0000      	.short	0x0000
 23fd1fc:	1007a7c0 	.word	0x1007a7c0
 23fd200:	00000028 	.word	0x00000028

023fd204 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fd204:	b509      	push	{r0, r3, lr}
 23fd206:	4804      	ldr	r0, [pc, #16]	; (23fd218 <network_off+0x14>)
 23fd208:	6800      	ldr	r0, [r0, #0]
 23fd20a:	4b04      	ldr	r3, [pc, #16]	; (23fd21c <network_off+0x18>)
 23fd20c:	4403      	add	r3, r0
 23fd20e:	681b      	ldr	r3, [r3, #0]
 23fd210:	699b      	ldr	r3, [r3, #24]
 23fd212:	9302      	str	r3, [sp, #8]
 23fd214:	bd09      	pop	{r0, r3, pc}
 23fd216:	0000      	.short	0x0000
 23fd218:	1007a7c0 	.word	0x1007a7c0
 23fd21c:	00000028 	.word	0x00000028

023fd220 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fd220:	b509      	push	{r0, r3, lr}
 23fd222:	4804      	ldr	r0, [pc, #16]	; (23fd234 <network_listen+0x14>)
 23fd224:	6800      	ldr	r0, [r0, #0]
 23fd226:	4b04      	ldr	r3, [pc, #16]	; (23fd238 <network_listen+0x18>)
 23fd228:	4403      	add	r3, r0
 23fd22a:	681b      	ldr	r3, [r3, #0]
 23fd22c:	69db      	ldr	r3, [r3, #28]
 23fd22e:	9302      	str	r3, [sp, #8]
 23fd230:	bd09      	pop	{r0, r3, pc}
 23fd232:	0000      	.short	0x0000
 23fd234:	1007a7c0 	.word	0x1007a7c0
 23fd238:	00000028 	.word	0x00000028

023fd23c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fd23c:	b509      	push	{r0, r3, lr}
 23fd23e:	4804      	ldr	r0, [pc, #16]	; (23fd250 <network_listening+0x14>)
 23fd240:	6800      	ldr	r0, [r0, #0]
 23fd242:	4b04      	ldr	r3, [pc, #16]	; (23fd254 <network_listening+0x18>)
 23fd244:	4403      	add	r3, r0
 23fd246:	681b      	ldr	r3, [r3, #0]
 23fd248:	6a1b      	ldr	r3, [r3, #32]
 23fd24a:	9302      	str	r3, [sp, #8]
 23fd24c:	bd09      	pop	{r0, r3, pc}
 23fd24e:	0000      	.short	0x0000
 23fd250:	1007a7c0 	.word	0x1007a7c0
 23fd254:	00000028 	.word	0x00000028

023fd258 <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
 23fd258:	b509      	push	{r0, r3, lr}
 23fd25a:	4804      	ldr	r0, [pc, #16]	; (23fd26c <network_set_credentials+0x14>)
 23fd25c:	6800      	ldr	r0, [r0, #0]
 23fd25e:	4b04      	ldr	r3, [pc, #16]	; (23fd270 <network_set_credentials+0x18>)
 23fd260:	4403      	add	r3, r0
 23fd262:	681b      	ldr	r3, [r3, #0]
 23fd264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fd266:	9302      	str	r3, [sp, #8]
 23fd268:	bd09      	pop	{r0, r3, pc}
 23fd26a:	0000      	.short	0x0000
 23fd26c:	1007a7c0 	.word	0x1007a7c0
 23fd270:	00000028 	.word	0x00000028

023fd274 <network_clear_credentials>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
 23fd274:	b509      	push	{r0, r3, lr}
 23fd276:	4804      	ldr	r0, [pc, #16]	; (23fd288 <network_clear_credentials+0x14>)
 23fd278:	6800      	ldr	r0, [r0, #0]
 23fd27a:	4b04      	ldr	r3, [pc, #16]	; (23fd28c <network_clear_credentials+0x18>)
 23fd27c:	4403      	add	r3, r0
 23fd27e:	681b      	ldr	r3, [r3, #0]
 23fd280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fd282:	9302      	str	r3, [sp, #8]
 23fd284:	bd09      	pop	{r0, r3, pc}
 23fd286:	0000      	.short	0x0000
 23fd288:	1007a7c0 	.word	0x1007a7c0
 23fd28c:	00000028 	.word	0x00000028

023fd290 <network_set_listen_timeout>:
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fd290:	b509      	push	{r0, r3, lr}
 23fd292:	4804      	ldr	r0, [pc, #16]	; (23fd2a4 <network_set_listen_timeout+0x14>)
 23fd294:	6800      	ldr	r0, [r0, #0]
 23fd296:	4b04      	ldr	r3, [pc, #16]	; (23fd2a8 <network_set_listen_timeout+0x18>)
 23fd298:	4403      	add	r3, r0
 23fd29a:	681b      	ldr	r3, [r3, #0]
 23fd29c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fd29e:	9302      	str	r3, [sp, #8]
 23fd2a0:	bd09      	pop	{r0, r3, pc}
 23fd2a2:	0000      	.short	0x0000
 23fd2a4:	1007a7c0 	.word	0x1007a7c0
 23fd2a8:	00000028 	.word	0x00000028

023fd2ac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fd2ac:	b509      	push	{r0, r3, lr}
 23fd2ae:	4804      	ldr	r0, [pc, #16]	; (23fd2c0 <network_get_listen_timeout+0x14>)
 23fd2b0:	6800      	ldr	r0, [r0, #0]
 23fd2b2:	4b04      	ldr	r3, [pc, #16]	; (23fd2c4 <network_get_listen_timeout+0x18>)
 23fd2b4:	4403      	add	r3, r0
 23fd2b6:	681b      	ldr	r3, [r3, #0]
 23fd2b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fd2ba:	9302      	str	r3, [sp, #8]
 23fd2bc:	bd09      	pop	{r0, r3, pc}
 23fd2be:	0000      	.short	0x0000
 23fd2c0:	1007a7c0 	.word	0x1007a7c0
 23fd2c4:	00000028 	.word	0x00000028

023fd2c8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fd2c8:	b509      	push	{r0, r3, lr}
 23fd2ca:	4804      	ldr	r0, [pc, #16]	; (23fd2dc <network_is_on+0x14>)
 23fd2cc:	6800      	ldr	r0, [r0, #0]
 23fd2ce:	4b04      	ldr	r3, [pc, #16]	; (23fd2e0 <network_is_on+0x18>)
 23fd2d0:	4403      	add	r3, r0
 23fd2d2:	681b      	ldr	r3, [r3, #0]
 23fd2d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd2d6:	9302      	str	r3, [sp, #8]
 23fd2d8:	bd09      	pop	{r0, r3, pc}
 23fd2da:	0000      	.short	0x0000
 23fd2dc:	1007a7c0 	.word	0x1007a7c0
 23fd2e0:	00000028 	.word	0x00000028

023fd2e4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fd2e4:	b509      	push	{r0, r3, lr}
 23fd2e6:	4804      	ldr	r0, [pc, #16]	; (23fd2f8 <network_is_off+0x14>)
 23fd2e8:	6800      	ldr	r0, [r0, #0]
 23fd2ea:	4b04      	ldr	r3, [pc, #16]	; (23fd2fc <network_is_off+0x18>)
 23fd2ec:	4403      	add	r3, r0
 23fd2ee:	681b      	ldr	r3, [r3, #0]
 23fd2f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fd2f2:	9302      	str	r3, [sp, #8]
 23fd2f4:	bd09      	pop	{r0, r3, pc}
 23fd2f6:	0000      	.short	0x0000
 23fd2f8:	1007a7c0 	.word	0x1007a7c0
 23fd2fc:	00000028 	.word	0x00000028

023fd300 <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
 23fd300:	b509      	push	{r0, r3, lr}
 23fd302:	4804      	ldr	r0, [pc, #16]	; (23fd314 <network_prefer+0x14>)
 23fd304:	6800      	ldr	r0, [r0, #0]
 23fd306:	4b04      	ldr	r3, [pc, #16]	; (23fd318 <network_prefer+0x18>)
 23fd308:	4403      	add	r3, r0
 23fd30a:	681b      	ldr	r3, [r3, #0]
 23fd30c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fd30e:	9302      	str	r3, [sp, #8]
 23fd310:	bd09      	pop	{r0, r3, pc}
 23fd312:	0000      	.short	0x0000
 23fd314:	1007a7c0 	.word	0x1007a7c0
 23fd318:	00000028 	.word	0x00000028

023fd31c <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
 23fd31c:	b509      	push	{r0, r3, lr}
 23fd31e:	4804      	ldr	r0, [pc, #16]	; (23fd330 <network_is_preferred+0x14>)
 23fd320:	6800      	ldr	r0, [r0, #0]
 23fd322:	4b04      	ldr	r3, [pc, #16]	; (23fd334 <network_is_preferred+0x18>)
 23fd324:	4403      	add	r3, r0
 23fd326:	681b      	ldr	r3, [r3, #0]
 23fd328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23fd32a:	9302      	str	r3, [sp, #8]
 23fd32c:	bd09      	pop	{r0, r3, pc}
 23fd32e:	0000      	.short	0x0000
 23fd330:	1007a7c0 	.word	0x1007a7c0
 23fd334:	00000028 	.word	0x00000028

023fd338 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23fd338:	b509      	push	{r0, r3, lr}
 23fd33a:	4804      	ldr	r0, [pc, #16]	; (23fd34c <spark_process+0x14>)
 23fd33c:	6800      	ldr	r0, [r0, #0]
 23fd33e:	4b04      	ldr	r3, [pc, #16]	; (23fd350 <spark_process+0x18>)
 23fd340:	4403      	add	r3, r0
 23fd342:	681b      	ldr	r3, [r3, #0]
 23fd344:	689b      	ldr	r3, [r3, #8]
 23fd346:	9302      	str	r3, [sp, #8]
 23fd348:	bd09      	pop	{r0, r3, pc}
 23fd34a:	0000      	.short	0x0000
 23fd34c:	1007a7c0 	.word	0x1007a7c0
 23fd350:	0000002c 	.word	0x0000002c

023fd354 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fd354:	b509      	push	{r0, r3, lr}
 23fd356:	4804      	ldr	r0, [pc, #16]	; (23fd368 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fd358:	6800      	ldr	r0, [r0, #0]
 23fd35a:	4b04      	ldr	r3, [pc, #16]	; (23fd36c <spark_set_random_seed_from_cloud_handler+0x18>)
 23fd35c:	4403      	add	r3, r0
 23fd35e:	681b      	ldr	r3, [r3, #0]
 23fd360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fd362:	9302      	str	r3, [sp, #8]
 23fd364:	bd09      	pop	{r0, r3, pc}
 23fd366:	0000      	.short	0x0000
 23fd368:	1007a7c0 	.word	0x1007a7c0
 23fd36c:	0000002c 	.word	0x0000002c

023fd370 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fd370:	b509      	push	{r0, r3, lr}
 23fd372:	4804      	ldr	r0, [pc, #16]	; (23fd384 <malloc+0x14>)
 23fd374:	6800      	ldr	r0, [r0, #0]
 23fd376:	4b04      	ldr	r3, [pc, #16]	; (23fd388 <malloc+0x18>)
 23fd378:	4403      	add	r3, r0
 23fd37a:	681b      	ldr	r3, [r3, #0]
 23fd37c:	681b      	ldr	r3, [r3, #0]
 23fd37e:	9302      	str	r3, [sp, #8]
 23fd380:	bd09      	pop	{r0, r3, pc}
 23fd382:	0000      	.short	0x0000
 23fd384:	1007a7c0 	.word	0x1007a7c0
 23fd388:	00000004 	.word	0x00000004

023fd38c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fd38c:	b509      	push	{r0, r3, lr}
 23fd38e:	4804      	ldr	r0, [pc, #16]	; (23fd3a0 <free+0x14>)
 23fd390:	6800      	ldr	r0, [r0, #0]
 23fd392:	4b04      	ldr	r3, [pc, #16]	; (23fd3a4 <free+0x18>)
 23fd394:	4403      	add	r3, r0
 23fd396:	681b      	ldr	r3, [r3, #0]
 23fd398:	685b      	ldr	r3, [r3, #4]
 23fd39a:	9302      	str	r3, [sp, #8]
 23fd39c:	bd09      	pop	{r0, r3, pc}
 23fd39e:	0000      	.short	0x0000
 23fd3a0:	1007a7c0 	.word	0x1007a7c0
 23fd3a4:	00000004 	.word	0x00000004

023fd3a8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fd3a8:	b509      	push	{r0, r3, lr}
 23fd3aa:	4804      	ldr	r0, [pc, #16]	; (23fd3bc <realloc+0x14>)
 23fd3ac:	6800      	ldr	r0, [r0, #0]
 23fd3ae:	4b04      	ldr	r3, [pc, #16]	; (23fd3c0 <realloc+0x18>)
 23fd3b0:	4403      	add	r3, r0
 23fd3b2:	681b      	ldr	r3, [r3, #0]
 23fd3b4:	689b      	ldr	r3, [r3, #8]
 23fd3b6:	9302      	str	r3, [sp, #8]
 23fd3b8:	bd09      	pop	{r0, r3, pc}
 23fd3ba:	0000      	.short	0x0000
 23fd3bc:	1007a7c0 	.word	0x1007a7c0
 23fd3c0:	00000004 	.word	0x00000004

023fd3c4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fd3c4:	b509      	push	{r0, r3, lr}
 23fd3c6:	4804      	ldr	r0, [pc, #16]	; (23fd3d8 <vsnprintf+0x14>)
 23fd3c8:	6800      	ldr	r0, [r0, #0]
 23fd3ca:	4b04      	ldr	r3, [pc, #16]	; (23fd3dc <vsnprintf+0x18>)
 23fd3cc:	4403      	add	r3, r0
 23fd3ce:	681b      	ldr	r3, [r3, #0]
 23fd3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fd3d2:	9302      	str	r3, [sp, #8]
 23fd3d4:	bd09      	pop	{r0, r3, pc}
 23fd3d6:	0000      	.short	0x0000
 23fd3d8:	1007a7c0 	.word	0x1007a7c0
 23fd3dc:	00000004 	.word	0x00000004

023fd3e0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23fd3e0:	b509      	push	{r0, r3, lr}
 23fd3e2:	4804      	ldr	r0, [pc, #16]	; (23fd3f4 <abort+0x14>)
 23fd3e4:	6800      	ldr	r0, [r0, #0]
 23fd3e6:	4b04      	ldr	r3, [pc, #16]	; (23fd3f8 <abort+0x18>)
 23fd3e8:	4403      	add	r3, r0
 23fd3ea:	681b      	ldr	r3, [r3, #0]
 23fd3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fd3ee:	9302      	str	r3, [sp, #8]
 23fd3f0:	bd09      	pop	{r0, r3, pc}
 23fd3f2:	0000      	.short	0x0000
 23fd3f4:	1007a7c0 	.word	0x1007a7c0
 23fd3f8:	00000004 	.word	0x00000004

023fd3fc <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23fd3fc:	b509      	push	{r0, r3, lr}
 23fd3fe:	4804      	ldr	r0, [pc, #16]	; (23fd410 <__errno+0x14>)
 23fd400:	6800      	ldr	r0, [r0, #0]
 23fd402:	4b04      	ldr	r3, [pc, #16]	; (23fd414 <__errno+0x18>)
 23fd404:	4403      	add	r3, r0
 23fd406:	681b      	ldr	r3, [r3, #0]
 23fd408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fd40a:	9302      	str	r3, [sp, #8]
 23fd40c:	bd09      	pop	{r0, r3, pc}
 23fd40e:	0000      	.short	0x0000
 23fd410:	1007a7c0 	.word	0x1007a7c0
 23fd414:	00000004 	.word	0x00000004

023fd418 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fd418:	b509      	push	{r0, r3, lr}
 23fd41a:	4804      	ldr	r0, [pc, #16]	; (23fd42c <__assert_func+0x14>)
 23fd41c:	6800      	ldr	r0, [r0, #0]
 23fd41e:	4b04      	ldr	r3, [pc, #16]	; (23fd430 <__assert_func+0x18>)
 23fd420:	4403      	add	r3, r0
 23fd422:	681b      	ldr	r3, [r3, #0]
 23fd424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd426:	9302      	str	r3, [sp, #8]
 23fd428:	bd09      	pop	{r0, r3, pc}
 23fd42a:	0000      	.short	0x0000
 23fd42c:	1007a7c0 	.word	0x1007a7c0
 23fd430:	00000004 	.word	0x00000004

023fd434 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fd434:	b509      	push	{r0, r3, lr}
 23fd436:	4804      	ldr	r0, [pc, #16]	; (23fd448 <newlib_impure_ptr_callback+0x14>)
 23fd438:	6800      	ldr	r0, [r0, #0]
 23fd43a:	4b04      	ldr	r3, [pc, #16]	; (23fd44c <newlib_impure_ptr_callback+0x18>)
 23fd43c:	4403      	add	r3, r0
 23fd43e:	681b      	ldr	r3, [r3, #0]
 23fd440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fd442:	9302      	str	r3, [sp, #8]
 23fd444:	bd09      	pop	{r0, r3, pc}
 23fd446:	0000      	.short	0x0000
 23fd448:	1007a7c0 	.word	0x1007a7c0
 23fd44c:	00000004 	.word	0x00000004

023fd450 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fd450:	2200      	movs	r2, #0
 23fd452:	6840      	ldr	r0, [r0, #4]
 23fd454:	4611      	mov	r1, r2
 23fd456:	f7ff bef1 	b.w	23fd23c <network_listening>

023fd45a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fd45a:	2200      	movs	r2, #0
 23fd45c:	6840      	ldr	r0, [r0, #4]
 23fd45e:	4611      	mov	r1, r2
 23fd460:	f7ff bf24 	b.w	23fd2ac <network_get_listen_timeout>

023fd464 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fd464:	2200      	movs	r2, #0
 23fd466:	6840      	ldr	r0, [r0, #4]
 23fd468:	f7ff bf12 	b.w	23fd290 <network_set_listen_timeout>

023fd46c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fd46c:	2200      	movs	r2, #0
 23fd46e:	6840      	ldr	r0, [r0, #4]
 23fd470:	f081 0101 	eor.w	r1, r1, #1
 23fd474:	f7ff bed4 	b.w	23fd220 <network_listen>

023fd478 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fd478:	2300      	movs	r3, #0
 23fd47a:	6840      	ldr	r0, [r0, #4]
 23fd47c:	461a      	mov	r2, r3
 23fd47e:	4619      	mov	r1, r3
 23fd480:	f7ff bec0 	b.w	23fd204 <network_off>

023fd484 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fd484:	2300      	movs	r3, #0
 23fd486:	6840      	ldr	r0, [r0, #4]
 23fd488:	461a      	mov	r2, r3
 23fd48a:	4619      	mov	r1, r3
 23fd48c:	f7ff beac 	b.w	23fd1e8 <network_on>

023fd490 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fd490:	2200      	movs	r2, #0
 23fd492:	6840      	ldr	r0, [r0, #4]
 23fd494:	4611      	mov	r1, r2
 23fd496:	f7ff be99 	b.w	23fd1cc <network_ready>

023fd49a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fd49a:	2200      	movs	r2, #0
 23fd49c:	6840      	ldr	r0, [r0, #4]
 23fd49e:	4611      	mov	r1, r2
 23fd4a0:	f7ff be78 	b.w	23fd194 <network_connecting>

023fd4a4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fd4a4:	2200      	movs	r2, #0
 23fd4a6:	2102      	movs	r1, #2
 23fd4a8:	6840      	ldr	r0, [r0, #4]
 23fd4aa:	f7ff be81 	b.w	23fd1b0 <network_disconnect>

023fd4ae <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fd4ae:	2300      	movs	r3, #0
 23fd4b0:	6840      	ldr	r0, [r0, #4]
 23fd4b2:	461a      	mov	r2, r3
 23fd4b4:	f7ff be60 	b.w	23fd178 <network_connect>

023fd4b8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fd4b8:	2203      	movs	r2, #3
 23fd4ba:	4b02      	ldr	r3, [pc, #8]	; (23fd4c4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fd4bc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fd4be:	4a02      	ldr	r2, [pc, #8]	; (23fd4c8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fd4c0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fd4c2:	4770      	bx	lr
 23fd4c4:	1007ae1c 	.word	0x1007ae1c
 23fd4c8:	023ffc18 	.word	0x023ffc18

023fd4cc <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
 23fd4cc:	2100      	movs	r1, #0
 23fd4ce:	f7ff bd73 	b.w	23fcfb8 <hal_spi_release>

023fd4d2 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
 23fd4d2:	2100      	movs	r1, #0
 23fd4d4:	f7ff bd62 	b.w	23fcf9c <hal_spi_acquire>

023fd4d8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fd4d8:	b510      	push	{r4, lr}
 23fd4da:	4604      	mov	r4, r0
 23fd4dc:	4608      	mov	r0, r1
{
    _spi = spi;
 23fd4de:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fd4e0:	f7ff fcfa 	bl	23fced8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fd4e4:	2300      	movs	r3, #0
}
 23fd4e6:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fd4e8:	6063      	str	r3, [r4, #4]
}
 23fd4ea:	bd10      	pop	{r4, pc}

023fd4ec <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 23fd4ec:	b513      	push	{r0, r1, r4, lr}
 23fd4ee:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
 23fd4f0:	7800      	ldrb	r0, [r0, #0]
 23fd4f2:	f7ff ffee 	bl	23fd4d2 <_ZN8SPIClass4lockEv.isra.0>
 23fd4f6:	b958      	cbnz	r0, 23fd510 <_ZN8SPIClass5beginEv+0x24>
 23fd4f8:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 23fd4fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 23fd4fe:	9001      	str	r0, [sp, #4]
 23fd500:	f7ff fca4 	bl	23fce4c <hal_spi_begin>
        unlock();
 23fd504:	9801      	ldr	r0, [sp, #4]
    }
}
 23fd506:	b002      	add	sp, #8
 23fd508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fd50c:	f7ff bfde 	b.w	23fd4cc <_ZN8SPIClass6unlockEv.isra.0>
 23fd510:	b002      	add	sp, #8
 23fd512:	bd10      	pop	{r4, pc}

023fd514 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
 23fd514:	b513      	push	{r0, r1, r4, lr}
 23fd516:	4604      	mov	r4, r0
    if (!lock())
 23fd518:	7800      	ldrb	r0, [r0, #0]
{
 23fd51a:	9101      	str	r1, [sp, #4]
    if (!lock())
 23fd51c:	f7ff ffd9 	bl	23fd4d2 <_ZN8SPIClass4lockEv.isra.0>
 23fd520:	9901      	ldr	r1, [sp, #4]
 23fd522:	b948      	cbnz	r0, 23fd538 <_ZN8SPIClass11setBitOrderEh+0x24>
 23fd524:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
 23fd526:	9001      	str	r0, [sp, #4]
 23fd528:	f7ff fc9e 	bl	23fce68 <hal_spi_set_bit_order>
        unlock();
 23fd52c:	9801      	ldr	r0, [sp, #4]
    }
}
 23fd52e:	b002      	add	sp, #8
 23fd530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fd534:	f7ff bfca 	b.w	23fd4cc <_ZN8SPIClass6unlockEv.isra.0>
 23fd538:	b002      	add	sp, #8
 23fd53a:	bd10      	pop	{r4, pc}

023fd53c <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
 23fd53c:	b513      	push	{r0, r1, r4, lr}
 23fd53e:	4604      	mov	r4, r0
    if (!lock())
 23fd540:	7800      	ldrb	r0, [r0, #0]
{
 23fd542:	9101      	str	r1, [sp, #4]
    if (!lock())
 23fd544:	f7ff ffc5 	bl	23fd4d2 <_ZN8SPIClass4lockEv.isra.0>
 23fd548:	9901      	ldr	r1, [sp, #4]
 23fd54a:	b948      	cbnz	r0, 23fd560 <_ZN8SPIClass11setDataModeEh+0x24>
 23fd54c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
 23fd54e:	9001      	str	r0, [sp, #4]
 23fd550:	f7ff fc98 	bl	23fce84 <hal_spi_set_data_mode>
        unlock();
 23fd554:	9801      	ldr	r0, [sp, #4]
    }
}
 23fd556:	b002      	add	sp, #8
 23fd558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fd55c:	f7ff bfb6 	b.w	23fd4cc <_ZN8SPIClass6unlockEv.isra.0>
 23fd560:	b002      	add	sp, #8
 23fd562:	bd10      	pop	{r4, pc}

023fd564 <_ZN8SPIClass16beginTransactionEv>:

int32_t SPIClass::beginTransaction()
{
    return lock();
 23fd564:	7800      	ldrb	r0, [r0, #0]
 23fd566:	f7ff bfb4 	b.w	23fd4d2 <_ZN8SPIClass4lockEv.isra.0>

023fd56a <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
 23fd56a:	7800      	ldrb	r0, [r0, #0]
 23fd56c:	f7ff bfae 	b.w	23fd4cc <_ZN8SPIClass6unlockEv.isra.0>

023fd570 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 23fd570:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 23fd572:	2400      	movs	r4, #0
 23fd574:	0840      	lsrs	r0, r0, #1
 23fd576:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fd578:	6818      	ldr	r0, [r3, #0]
 23fd57a:	b2e5      	uxtb	r5, r4
 23fd57c:	4288      	cmp	r0, r1
 23fd57e:	d906      	bls.n	23fd58e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 23fd580:	3401      	adds	r4, #1
 23fd582:	2c08      	cmp	r4, #8
 23fd584:	d002      	beq.n	23fd58c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 23fd586:	0840      	lsrs	r0, r0, #1
 23fd588:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fd58a:	e7f5      	b.n	23fd578 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 23fd58c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 23fd58e:	4b02      	ldr	r3, [pc, #8]	; (23fd598 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 23fd590:	5d5b      	ldrb	r3, [r3, r5]
 23fd592:	7013      	strb	r3, [r2, #0]
}
 23fd594:	bd30      	pop	{r4, r5, pc}
 23fd596:	bf00      	nop
 23fd598:	023ffc54 	.word	0x023ffc54

023fd59c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
 23fd59c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fd5a0:	4606      	mov	r6, r0
 23fd5a2:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
 23fd5a4:	7800      	ldrb	r0, [r0, #0]
{
 23fd5a6:	460c      	mov	r4, r1
    CHECK(lock());
 23fd5a8:	f7ff ff93 	bl	23fd4d2 <_ZN8SPIClass4lockEv.isra.0>
 23fd5ac:	2800      	cmp	r0, #0
 23fd5ae:	db1b      	blt.n	23fd5e8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    memset(info, 0, sizeof(hal_spi_info_t));
 23fd5b0:	2214      	movs	r2, #20
 23fd5b2:	2100      	movs	r1, #0
 23fd5b4:	a809      	add	r0, sp, #36	; 0x24
    querySpiInfo(_spi, &spi_info);
 23fd5b6:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 23fd5b8:	f001 fcc1 	bl	23fef3e <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 23fd5bc:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 23fd5be:	2200      	movs	r2, #0
 23fd5c0:	4628      	mov	r0, r5
 23fd5c2:	a909      	add	r1, sp, #36	; 0x24
    info->version = HAL_SPI_INFO_VERSION_1;
 23fd5c4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
 23fd5c8:	f7ff fca2 	bl	23fcf10 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
 23fd5cc:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 23fd5d0:	b113      	cbz	r3, 23fd5d8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
 23fd5d2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 23fd5d6:	b155      	cbz	r5, 23fd5ee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
 23fd5d8:	2700      	movs	r7, #0
 23fd5da:	2501      	movs	r5, #1
 23fd5dc:	46b9      	mov	r9, r7
 23fd5de:	46b8      	mov	r8, r7
    if (default_ && other.default_)
 23fd5e0:	7923      	ldrb	r3, [r4, #4]
 23fd5e2:	b15d      	cbz	r5, 23fd5fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
 23fd5e4:	b1c3      	cbz	r3, 23fd618 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
 23fd5e6:	2000      	movs	r0, #0
}
 23fd5e8:	b00f      	add	sp, #60	; 0x3c
 23fd5ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
 23fd5ee:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 23fd5f2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 23fd5f6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
 23fd5fa:	e7f1      	b.n	23fd5e0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
 23fd5fc:	2b00      	cmp	r3, #0
 23fd5fe:	d135      	bne.n	23fd66c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
 23fd600:	68a3      	ldr	r3, [r4, #8]
 23fd602:	4543      	cmp	r3, r8
 23fd604:	d108      	bne.n	23fd618 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
 23fd606:	f88d 9020 	strb.w	r9, [sp, #32]
 23fd60a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23fd60e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23fd612:	89a3      	ldrh	r3, [r4, #12]
 23fd614:	429a      	cmp	r2, r3
 23fd616:	d0e6      	beq.n	23fd5e6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
 23fd618:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23fd61a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
 23fd61c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23fd620:	980a      	ldr	r0, [sp, #40]	; 0x28
 23fd622:	ab04      	add	r3, sp, #16
 23fd624:	f10d 020f 	add.w	r2, sp, #15
 23fd628:	f7ff ffa2 	bl	23fd570 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
 23fd62c:	7921      	ldrb	r1, [r4, #4]
 23fd62e:	b985      	cbnz	r5, 23fd652 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
 23fd630:	b989      	cbnz	r1, 23fd656 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23fd632:	68a3      	ldr	r3, [r4, #8]
 23fd634:	4543      	cmp	r3, r8
 23fd636:	d30e      	bcc.n	23fd656 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
 23fd638:	f88d 9020 	strb.w	r9, [sp, #32]
 23fd63c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23fd640:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23fd644:	89a3      	ldrh	r3, [r4, #12]
 23fd646:	429a      	cmp	r2, r3
 23fd648:	d105      	bne.n	23fd656 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 23fd64a:	9b04      	ldr	r3, [sp, #16]
 23fd64c:	4543      	cmp	r3, r8
 23fd64e:	d102      	bne.n	23fd656 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23fd650:	e7c9      	b.n	23fd5e6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
 23fd652:	2900      	cmp	r1, #0
 23fd654:	d1f9      	bne.n	23fd64a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
 23fd656:	2300      	movs	r3, #0
 23fd658:	9301      	str	r3, [sp, #4]
 23fd65a:	7b63      	ldrb	r3, [r4, #13]
 23fd65c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 23fd660:	9300      	str	r3, [sp, #0]
 23fd662:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 23fd664:	7830      	ldrb	r0, [r6, #0]
 23fd666:	f7ff fc8b 	bl	23fcf80 <hal_spi_set_settings>
 23fd66a:	e7bc      	b.n	23fd5e6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
 23fd66c:	462b      	mov	r3, r5
 23fd66e:	462a      	mov	r2, r5
 23fd670:	2101      	movs	r1, #1
 23fd672:	e9cd 5500 	strd	r5, r5, [sp]
 23fd676:	e7f5      	b.n	23fd664 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

023fd678 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
 23fd678:	2300      	movs	r3, #0
{
 23fd67a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fd67e:	4604      	mov	r4, r0
 23fd680:	b088      	sub	sp, #32

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
 23fd682:	7800      	ldrb	r0, [r0, #0]
{
 23fd684:	460e      	mov	r6, r1
 23fd686:	4617      	mov	r7, r2
    unsigned clock = 0;
 23fd688:	9302      	str	r3, [sp, #8]
    if (!lock())
 23fd68a:	f7ff ff22 	bl	23fd4d2 <_ZN8SPIClass4lockEv.isra.0>
 23fd68e:	4605      	mov	r5, r0
 23fd690:	bb00      	cbnz	r0, 23fd6d4 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    memset(info, 0, sizeof(hal_spi_info_t));
 23fd692:	4601      	mov	r1, r0
 23fd694:	2214      	movs	r2, #20
 23fd696:	a803      	add	r0, sp, #12
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 23fd698:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
 23fd69c:	f001 fc4f 	bl	23fef3e <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 23fd6a0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 23fd6a2:	462a      	mov	r2, r5
 23fd6a4:	4640      	mov	r0, r8
 23fd6a6:	a903      	add	r1, sp, #12
    info->version = HAL_SPI_INFO_VERSION_1;
 23fd6a8:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
 23fd6ac:	f7ff fc30 	bl	23fcf10 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 23fd6b0:	fb07 f106 	mul.w	r1, r7, r6
 23fd6b4:	9804      	ldr	r0, [sp, #16]
 23fd6b6:	ab02      	add	r3, sp, #8
 23fd6b8:	f10d 0207 	add.w	r2, sp, #7
        uint8_t divisor = 0;
 23fd6bc:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 23fd6c0:	f7ff ff56 	bl	23fd570 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
 23fd6c4:	7820      	ldrb	r0, [r4, #0]
 23fd6c6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 23fd6ca:	f7ff fbe9 	bl	23fcea0 <hal_spi_set_clock_divider>
        unlock();
 23fd6ce:	7820      	ldrb	r0, [r4, #0]
 23fd6d0:	f7ff fefc 	bl	23fd4cc <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
 23fd6d4:	9802      	ldr	r0, [sp, #8]
 23fd6d6:	b008      	add	sp, #32
 23fd6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fd6dc <_ZN8SPIClass15setClockDividerEh>:
{
 23fd6dc:	b538      	push	{r3, r4, r5, lr}
 23fd6de:	4604      	mov	r4, r0
    if (!lock())
 23fd6e0:	7800      	ldrb	r0, [r0, #0]
{
 23fd6e2:	460d      	mov	r5, r1
    if (!lock())
 23fd6e4:	f7ff fef5 	bl	23fd4d2 <_ZN8SPIClass4lockEv.isra.0>
 23fd6e8:	4603      	mov	r3, r0
 23fd6ea:	b9d0      	cbnz	r0, 23fd722 <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
 23fd6ec:	6861      	ldr	r1, [r4, #4]
 23fd6ee:	b199      	cbz	r1, 23fd718 <_ZN8SPIClass15setClockDividerEh+0x3c>
 23fd6f0:	4a0c      	ldr	r2, [pc, #48]	; (23fd724 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
 23fd6f2:	f812 0b01 	ldrb.w	r0, [r2], #1
 23fd6f6:	4285      	cmp	r5, r0
 23fd6f8:	d002      	beq.n	23fd700 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
 23fd6fa:	3301      	adds	r3, #1
 23fd6fc:	2b08      	cmp	r3, #8
 23fd6fe:	d1f8      	bne.n	23fd6f2 <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
 23fd700:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
 23fd702:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
 23fd704:	2201      	movs	r2, #1
 23fd706:	4620      	mov	r0, r4
 23fd708:	40d9      	lsrs	r1, r3
 23fd70a:	f7ff ffb5 	bl	23fd678 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
 23fd70e:	7820      	ldrb	r0, [r4, #0]
}
 23fd710:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
 23fd714:	f7ff beda 	b.w	23fd4cc <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
 23fd718:	4629      	mov	r1, r5
 23fd71a:	7820      	ldrb	r0, [r4, #0]
 23fd71c:	f7ff fbc0 	bl	23fcea0 <hal_spi_set_clock_divider>
 23fd720:	e7f5      	b.n	23fd70e <_ZN8SPIClass15setClockDividerEh+0x32>
}
 23fd722:	bd38      	pop	{r3, r4, r5, pc}
 23fd724:	023ffc54 	.word	0x023ffc54

023fd728 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
 23fd728:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 23fd72a:	7800      	ldrb	r0, [r0, #0]
 23fd72c:	f7ff fbc6 	bl	23fcebc <hal_spi_transfer>
}
 23fd730:	b2c0      	uxtb	r0, r0
 23fd732:	bd08      	pop	{r3, pc}

023fd734 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 23fd734:	b530      	push	{r4, r5, lr}
 23fd736:	b087      	sub	sp, #28
 23fd738:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 23fd73a:	4604      	mov	r4, r0
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
 23fd73c:	9500      	str	r5, [sp, #0]
 23fd73e:	7800      	ldrb	r0, [r0, #0]
 23fd740:	f7ff fbf4 	bl	23fcf2c <hal_spi_transfer_dma>
    if (user_callback == NULL)
 23fd744:	b93d      	cbnz	r5, 23fd756 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
 23fd746:	7820      	ldrb	r0, [r4, #0]
 23fd748:	a902      	add	r1, sp, #8
 23fd74a:	f7ff fc0b 	bl	23fcf64 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
 23fd74e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 23fd752:	07db      	lsls	r3, r3, #31
 23fd754:	d4f7      	bmi.n	23fd746 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
 23fd756:	b007      	add	sp, #28
 23fd758:	bd30      	pop	{r4, r5, pc}

023fd75a <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 23fd75a:	b510      	push	{r4, lr}
      if (_M_manager)
 23fd75c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23fd75e:	4604      	mov	r4, r0
      if (_M_manager)
 23fd760:	b113      	cbz	r3, 23fd768 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fd762:	2203      	movs	r2, #3
 23fd764:	4601      	mov	r1, r0
 23fd766:	4798      	blx	r3
    }
 23fd768:	4620      	mov	r0, r4
 23fd76a:	bd10      	pop	{r4, pc}

023fd76c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fd76c:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fd76e:	2000      	movs	r0, #0
 23fd770:	4b04      	ldr	r3, [pc, #16]	; (23fd784 <_GLOBAL__sub_I_System+0x18>)
 23fd772:	601a      	str	r2, [r3, #0]
 23fd774:	4b04      	ldr	r3, [pc, #16]	; (23fd788 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fd776:	4a05      	ldr	r2, [pc, #20]	; (23fd78c <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fd778:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fd77c:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fd77e:	f7ff bcc3 	b.w	23fd108 <set_system_mode>
 23fd782:	bf00      	nop
 23fd784:	1007ae30 	.word	0x1007ae30
 23fd788:	1007ae24 	.word	0x1007ae24
 23fd78c:	ffff0000 	.word	0xffff0000

023fd790 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 23fd790:	b510      	push	{r4, lr}
 23fd792:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 23fd794:	f7fc ff16 	bl	23fa5c4 <strlen>
 23fd798:	3801      	subs	r0, #1
 23fd79a:	1823      	adds	r3, r4, r0
 23fd79c:	4620      	mov	r0, r4
	while(i<j){
 23fd79e:	4283      	cmp	r3, r0
 23fd7a0:	d906      	bls.n	23fd7b0 <_Z11str_reversePc+0x20>
		c = *i;
 23fd7a2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 23fd7a4:	7819      	ldrb	r1, [r3, #0]
 23fd7a6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 23fd7aa:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 23fd7ae:	e7f6      	b.n	23fd79e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 23fd7b0:	bd10      	pop	{r4, pc}

023fd7b2 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 23fd7b2:	b570      	push	{r4, r5, r6, lr}
 23fd7b4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 23fd7b6:	1e91      	subs	r1, r2, #2
 23fd7b8:	2922      	cmp	r1, #34	; 0x22
 23fd7ba:	d81d      	bhi.n	23fd7f8 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
 23fd7bc:	4625      	mov	r5, r4

	div_t result;
	while(a){
 23fd7be:	b930      	cbnz	r0, 23fd7ce <ultoa+0x1c>
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 23fd7c0:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
 23fd7c2:	4423      	add	r3, r4
 23fd7c4:	429d      	cmp	r5, r3
 23fd7c6:	d210      	bcs.n	23fd7ea <ultoa+0x38>
            *ptr++ = '0';
 23fd7c8:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
 23fd7cc:	e7fa      	b.n	23fd7c4 <ultoa+0x12>
            result.quot = a/radix;
 23fd7ce:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 23fd7d2:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 23fd7d6:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 23fd7d8:	2809      	cmp	r0, #9
                *ptr += '0';
 23fd7da:	bf94      	ite	ls
 23fd7dc:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
 23fd7de:	3157      	addhi	r1, #87	; 0x57
 23fd7e0:	b2c9      	uxtb	r1, r1
            a = result.quot;
 23fd7e2:	4630      	mov	r0, r6
 23fd7e4:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 23fd7e8:	e7e9      	b.n	23fd7be <ultoa+0xc>

	*ptr = '\0';
 23fd7ea:	2300      	movs	r3, #0
	str_reverse(buffer);
 23fd7ec:	4620      	mov	r0, r4
	*ptr = '\0';
 23fd7ee:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
 23fd7f0:	f7ff ffce 	bl	23fd790 <_Z11str_reversePc>
	return buffer;
 23fd7f4:	4620      	mov	r0, r4
}
 23fd7f6:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 23fd7f8:	2000      	movs	r0, #0
 23fd7fa:	e7fc      	b.n	23fd7f6 <ultoa+0x44>

023fd7fc <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 23fd7fc:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 23fd7fe:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 23fd800:	460c      	mov	r4, r1
 23fd802:	4615      	mov	r5, r2
	if(a<0){
 23fd804:	da0d      	bge.n	23fd822 <itoa+0x26>
		*buffer = '-';
 23fd806:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 23fd808:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23fd80c:	bf0c      	ite	eq
 23fd80e:	4618      	moveq	r0, r3
 23fd810:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 23fd812:	2301      	movs	r3, #1
		*buffer = '-';
 23fd814:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 23fd816:	462a      	mov	r2, r5
 23fd818:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 23fd81a:	f7ff ffca 	bl	23fd7b2 <ultoa>
	}
	return buffer;
}
 23fd81e:	4620      	mov	r0, r4
 23fd820:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 23fd822:	2301      	movs	r3, #1
 23fd824:	e7f9      	b.n	23fd81a <itoa+0x1e>

023fd826 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
 23fd826:	b510      	push	{r4, lr}
 23fd828:	4604      	mov	r4, r0
{
    free(buffer);
 23fd82a:	6800      	ldr	r0, [r0, #0]
 23fd82c:	f7ff fdae 	bl	23fd38c <free>
}
 23fd830:	4620      	mov	r0, r4
 23fd832:	bd10      	pop	{r4, pc}

023fd834 <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
 23fd834:	b510      	push	{r4, lr}
 23fd836:	4604      	mov	r4, r0
    if (buffer) {
 23fd838:	6800      	ldr	r0, [r0, #0]
 23fd83a:	b108      	cbz	r0, 23fd840 <_ZN6String10invalidateEv+0xc>
        free(buffer);
 23fd83c:	f7ff fda6 	bl	23fd38c <free>
    }
    buffer = nullptr;
 23fd840:	2300      	movs	r3, #0
    capacity_ = len = 0;
 23fd842:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
 23fd846:	6023      	str	r3, [r4, #0]
}
 23fd848:	bd10      	pop	{r4, pc}

023fd84a <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fd84a:	b538      	push	{r3, r4, r5, lr}
 23fd84c:	4604      	mov	r4, r0
 23fd84e:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fd850:	6800      	ldr	r0, [r0, #0]
 23fd852:	3101      	adds	r1, #1
 23fd854:	f7ff fda8 	bl	23fd3a8 <realloc>
    if (newbuffer) {
 23fd858:	b110      	cbz	r0, 23fd860 <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity_ = maxStrLen;
 23fd85a:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
 23fd85e:	2001      	movs	r0, #1
    }
    return 0;
}
 23fd860:	bd38      	pop	{r3, r4, r5, pc}

023fd862 <_ZN6String7reserveEj>:
{
 23fd862:	b510      	push	{r4, lr}
    if (buffer && capacity_ >= size) {
 23fd864:	6803      	ldr	r3, [r0, #0]
{
 23fd866:	4604      	mov	r4, r0
    if (buffer && capacity_ >= size) {
 23fd868:	b123      	cbz	r3, 23fd874 <_ZN6String7reserveEj+0x12>
 23fd86a:	6843      	ldr	r3, [r0, #4]
 23fd86c:	428b      	cmp	r3, r1
 23fd86e:	d301      	bcc.n	23fd874 <_ZN6String7reserveEj+0x12>
 23fd870:	2001      	movs	r0, #1
}
 23fd872:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
 23fd874:	4620      	mov	r0, r4
 23fd876:	f7ff ffe8 	bl	23fd84a <_ZN6String12changeBufferEj>
 23fd87a:	2800      	cmp	r0, #0
 23fd87c:	d0f9      	beq.n	23fd872 <_ZN6String7reserveEj+0x10>
        if (len == 0) {
 23fd87e:	68a3      	ldr	r3, [r4, #8]
 23fd880:	2b00      	cmp	r3, #0
 23fd882:	d1f5      	bne.n	23fd870 <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
 23fd884:	6822      	ldr	r2, [r4, #0]
 23fd886:	7013      	strb	r3, [r2, #0]
 23fd888:	e7f2      	b.n	23fd870 <_ZN6String7reserveEj+0xe>

023fd88a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fd88a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd88c:	460d      	mov	r5, r1
    if (!reserve(length)) {
 23fd88e:	4611      	mov	r1, r2
 23fd890:	9201      	str	r2, [sp, #4]
{
 23fd892:	4604      	mov	r4, r0
    if (!reserve(length)) {
 23fd894:	f7ff ffe5 	bl	23fd862 <_ZN6String7reserveEj>
 23fd898:	9a01      	ldr	r2, [sp, #4]
 23fd89a:	b928      	cbnz	r0, 23fd8a8 <_ZN6String4copyEPKcj+0x1e>
        invalidate();
 23fd89c:	4620      	mov	r0, r4
 23fd89e:	f7ff ffc9 	bl	23fd834 <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
 23fd8a2:	4620      	mov	r0, r4
 23fd8a4:	b003      	add	sp, #12
 23fd8a6:	bd30      	pop	{r4, r5, pc}
    memcpy(buffer, cstr, length);
 23fd8a8:	4629      	mov	r1, r5
    len = length;
 23fd8aa:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
 23fd8ac:	6820      	ldr	r0, [r4, #0]
 23fd8ae:	f001 fb39 	bl	23fef24 <memcpy>
    buffer[len] = 0;
 23fd8b2:	2100      	movs	r1, #0
 23fd8b4:	6822      	ldr	r2, [r4, #0]
 23fd8b6:	68a3      	ldr	r3, [r4, #8]
 23fd8b8:	54d1      	strb	r1, [r2, r3]
    return *this;
 23fd8ba:	e7f2      	b.n	23fd8a2 <_ZN6String4copyEPKcj+0x18>

023fd8bc <_ZN6StringC1EPK19__FlashStringHelper>:
    buffer = nullptr;
 23fd8bc:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23fd8be:	b513      	push	{r0, r1, r4, lr}
 23fd8c0:	4604      	mov	r4, r0
    capacity_ = 0;
 23fd8c2:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fd8c6:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fd8c8:	7303      	strb	r3, [r0, #12]
    if (cstr) {
 23fd8ca:	b141      	cbz	r1, 23fd8de <_ZN6StringC1EPK19__FlashStringHelper+0x22>
        copy(cstr, strlen(cstr));
 23fd8cc:	4608      	mov	r0, r1
 23fd8ce:	9101      	str	r1, [sp, #4]
 23fd8d0:	f7fc fe78 	bl	23fa5c4 <strlen>
 23fd8d4:	9901      	ldr	r1, [sp, #4]
 23fd8d6:	4602      	mov	r2, r0
 23fd8d8:	4620      	mov	r0, r4
 23fd8da:	f7ff ffd6 	bl	23fd88a <_ZN6String4copyEPKcj>
}
 23fd8de:	4620      	mov	r0, r4
 23fd8e0:	b002      	add	sp, #8
 23fd8e2:	bd10      	pop	{r4, pc}

023fd8e4 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
 23fd8e4:	4288      	cmp	r0, r1
{
 23fd8e6:	b510      	push	{r4, lr}
 23fd8e8:	4604      	mov	r4, r0
    if (this == &rhs) {
 23fd8ea:	d005      	beq.n	23fd8f8 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
 23fd8ec:	680b      	ldr	r3, [r1, #0]
 23fd8ee:	b12b      	cbz	r3, 23fd8fc <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
 23fd8f0:	688a      	ldr	r2, [r1, #8]
 23fd8f2:	4619      	mov	r1, r3
 23fd8f4:	f7ff ffc9 	bl	23fd88a <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
 23fd8f8:	4620      	mov	r0, r4
 23fd8fa:	bd10      	pop	{r4, pc}
        invalidate();
 23fd8fc:	f7ff ff9a 	bl	23fd834 <_ZN6String10invalidateEv>
 23fd900:	e7fa      	b.n	23fd8f8 <_ZN6StringaSERKS_+0x14>

023fd902 <_ZN6StringC1ERKS_>:
    buffer = nullptr;
 23fd902:	2300      	movs	r3, #0
String::String(const String &value)
 23fd904:	b510      	push	{r4, lr}
 23fd906:	4604      	mov	r4, r0
    capacity_ = 0;
 23fd908:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fd90c:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fd90e:	7303      	strb	r3, [r0, #12]
    *this = value;
 23fd910:	f7ff ffe8 	bl	23fd8e4 <_ZN6StringaSERKS_>
}
 23fd914:	4620      	mov	r0, r4
 23fd916:	bd10      	pop	{r4, pc}

023fd918 <_ZN6StringaSEPKc>:
    return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 23fd918:	b513      	push	{r0, r1, r4, lr}
 23fd91a:	4604      	mov	r4, r0
    if (cstr) {
 23fd91c:	b159      	cbz	r1, 23fd936 <_ZN6StringaSEPKc+0x1e>
        copy(cstr, strlen(cstr));
 23fd91e:	4608      	mov	r0, r1
 23fd920:	9101      	str	r1, [sp, #4]
 23fd922:	f7fc fe4f 	bl	23fa5c4 <strlen>
 23fd926:	9901      	ldr	r1, [sp, #4]
 23fd928:	4602      	mov	r2, r0
 23fd92a:	4620      	mov	r0, r4
 23fd92c:	f7ff ffad 	bl	23fd88a <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
 23fd930:	4620      	mov	r0, r4
 23fd932:	b002      	add	sp, #8
 23fd934:	bd10      	pop	{r4, pc}
        invalidate();
 23fd936:	f7ff ff7d 	bl	23fd834 <_ZN6String10invalidateEv>
 23fd93a:	e7f9      	b.n	23fd930 <_ZN6StringaSEPKc+0x18>

023fd93c <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 23fd93c:	b570      	push	{r4, r5, r6, lr}
 23fd93e:	460d      	mov	r5, r1
    buffer = nullptr;
 23fd940:	2100      	movs	r1, #0
String::String(int value, unsigned char base)
 23fd942:	4616      	mov	r6, r2
 23fd944:	4604      	mov	r4, r0
 23fd946:	b08a      	sub	sp, #40	; 0x28
    capacity_ = 0;
 23fd948:	e9c0 1100 	strd	r1, r1, [r0]
    len = 0;
 23fd94c:	6081      	str	r1, [r0, #8]
    flags = 0;
 23fd94e:	7301      	strb	r1, [r0, #12]
    char buf[34] = {};
 23fd950:	221e      	movs	r2, #30
 23fd952:	a802      	add	r0, sp, #8
 23fd954:	9101      	str	r1, [sp, #4]
 23fd956:	f001 faf2 	bl	23fef3e <memset>
    itoa(value, buf, base);
 23fd95a:	4632      	mov	r2, r6
 23fd95c:	a901      	add	r1, sp, #4
 23fd95e:	4628      	mov	r0, r5
 23fd960:	f7ff ff4c 	bl	23fd7fc <itoa>
    *this = buf;
 23fd964:	4620      	mov	r0, r4
 23fd966:	a901      	add	r1, sp, #4
 23fd968:	f7ff ffd6 	bl	23fd918 <_ZN6StringaSEPKc>
}
 23fd96c:	4620      	mov	r0, r4
 23fd96e:	b00a      	add	sp, #40	; 0x28
 23fd970:	bd70      	pop	{r4, r5, r6, pc}

023fd972 <_ZN6String6concatEPKcj>:
{
    return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 23fd972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd974:	4604      	mov	r4, r0
 23fd976:	4616      	mov	r6, r2
    unsigned int newlen = len + length;
    if (!cstr) {
 23fd978:	460f      	mov	r7, r1
 23fd97a:	b909      	cbnz	r1, 23fd980 <_ZN6String6concatEPKcj+0xe>
        return 0;
 23fd97c:	2000      	movs	r0, #0
    }
    memcpy(buffer + len, cstr, length);
    buffer[newlen] = 0;
    len = newlen;
    return 1;
}
 23fd97e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (length == 0) {
 23fd980:	b18a      	cbz	r2, 23fd9a6 <_ZN6String6concatEPKcj+0x34>
    unsigned int newlen = len + length;
 23fd982:	6885      	ldr	r5, [r0, #8]
 23fd984:	4415      	add	r5, r2
    if (!reserve(newlen)) {
 23fd986:	4629      	mov	r1, r5
 23fd988:	f7ff ff6b 	bl	23fd862 <_ZN6String7reserveEj>
 23fd98c:	2800      	cmp	r0, #0
 23fd98e:	d0f5      	beq.n	23fd97c <_ZN6String6concatEPKcj+0xa>
    memcpy(buffer + len, cstr, length);
 23fd990:	68a3      	ldr	r3, [r4, #8]
 23fd992:	6820      	ldr	r0, [r4, #0]
 23fd994:	4632      	mov	r2, r6
 23fd996:	4418      	add	r0, r3
 23fd998:	4639      	mov	r1, r7
 23fd99a:	f001 fac3 	bl	23fef24 <memcpy>
    buffer[newlen] = 0;
 23fd99e:	2200      	movs	r2, #0
 23fd9a0:	6823      	ldr	r3, [r4, #0]
 23fd9a2:	555a      	strb	r2, [r3, r5]
    len = newlen;
 23fd9a4:	60a5      	str	r5, [r4, #8]
        return 1;
 23fd9a6:	2001      	movs	r0, #1
 23fd9a8:	e7e9      	b.n	23fd97e <_ZN6String6concatEPKcj+0xc>

023fd9aa <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
 23fd9aa:	b513      	push	{r0, r1, r4, lr}
 23fd9ac:	4604      	mov	r4, r0
    if (!cstr) {
        return 0;
    }
    return concat(cstr, strlen(cstr));
}
 23fd9ae:	4608      	mov	r0, r1
    if (!cstr) {
 23fd9b0:	b151      	cbz	r1, 23fd9c8 <_ZN6String6concatEPKc+0x1e>
    return concat(cstr, strlen(cstr));
 23fd9b2:	9101      	str	r1, [sp, #4]
 23fd9b4:	f7fc fe06 	bl	23fa5c4 <strlen>
 23fd9b8:	4602      	mov	r2, r0
 23fd9ba:	4620      	mov	r0, r4
 23fd9bc:	9901      	ldr	r1, [sp, #4]
}
 23fd9be:	b002      	add	sp, #8
 23fd9c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return concat(cstr, strlen(cstr));
 23fd9c4:	f7ff bfd5 	b.w	23fd972 <_ZN6String6concatEPKcj>
}
 23fd9c8:	b002      	add	sp, #8
 23fd9ca:	bd10      	pop	{r4, pc}

023fd9cc <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 23fd9cc:	b510      	push	{r4, lr}
    StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    if (!a.concat(rhs.buffer, rhs.len)) {
 23fd9ce:	688a      	ldr	r2, [r1, #8]
 23fd9d0:	6809      	ldr	r1, [r1, #0]
{
 23fd9d2:	4604      	mov	r4, r0
    if (!a.concat(rhs.buffer, rhs.len)) {
 23fd9d4:	f7ff ffcd 	bl	23fd972 <_ZN6String6concatEPKcj>
 23fd9d8:	b910      	cbnz	r0, 23fd9e0 <_ZplRK15StringSumHelperRK6String+0x14>
        a.invalidate();
 23fd9da:	4620      	mov	r0, r4
 23fd9dc:	f7ff ff2a 	bl	23fd834 <_ZN6String10invalidateEv>
    }
    return a;
}
 23fd9e0:	4620      	mov	r0, r4
 23fd9e2:	bd10      	pop	{r4, pc}

023fd9e4 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 23fd9e4:	b513      	push	{r0, r1, r4, lr}
 23fd9e6:	4604      	mov	r4, r0
    StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    if (!cstr || !a.concat(cstr, strlen(cstr))) {
 23fd9e8:	b929      	cbnz	r1, 23fd9f6 <_ZplRK15StringSumHelperPKc+0x12>
        a.invalidate();
 23fd9ea:	4620      	mov	r0, r4
 23fd9ec:	f7ff ff22 	bl	23fd834 <_ZN6String10invalidateEv>
    }
    return a;
}
 23fd9f0:	4620      	mov	r0, r4
 23fd9f2:	b002      	add	sp, #8
 23fd9f4:	bd10      	pop	{r4, pc}
    if (!cstr || !a.concat(cstr, strlen(cstr))) {
 23fd9f6:	4608      	mov	r0, r1
 23fd9f8:	9101      	str	r1, [sp, #4]
 23fd9fa:	f7fc fde3 	bl	23fa5c4 <strlen>
 23fd9fe:	9901      	ldr	r1, [sp, #4]
 23fda00:	4602      	mov	r2, r0
 23fda02:	4620      	mov	r0, r4
 23fda04:	f7ff ffb5 	bl	23fd972 <_ZN6String6concatEPKcj>
 23fda08:	2800      	cmp	r0, #0
 23fda0a:	d0ee      	beq.n	23fd9ea <_ZplRK15StringSumHelperPKc+0x6>
 23fda0c:	e7f0      	b.n	23fd9f0 <_ZplRK15StringSumHelperPKc+0xc>
	...

023fda10 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fda10:	2300      	movs	r3, #0
 23fda12:	4802      	ldr	r0, [pc, #8]	; (23fda1c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fda14:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fda16:	f7ff b875 	b.w	23fcb04 <os_mutex_recursive_create>
 23fda1a:	bf00      	nop
 23fda1c:	1007ae34 	.word	0x1007ae34

023fda20 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fda20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fda22:	4606      	mov	r6, r0
 23fda24:	460d      	mov	r5, r1
  size_t n = 0;
 23fda26:	2400      	movs	r4, #0
 23fda28:	188f      	adds	r7, r1, r2
  while (size--) {
 23fda2a:	42bd      	cmp	r5, r7
 23fda2c:	d00c      	beq.n	23fda48 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fda2e:	6833      	ldr	r3, [r6, #0]
 23fda30:	4630      	mov	r0, r6
 23fda32:	689b      	ldr	r3, [r3, #8]
 23fda34:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fda38:	4798      	blx	r3
     if (chunk>=0)
 23fda3a:	1e03      	subs	r3, r0, #0
 23fda3c:	db01      	blt.n	23fda42 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fda3e:	441c      	add	r4, r3
  while (size--) {
 23fda40:	e7f3      	b.n	23fda2a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fda42:	2c00      	cmp	r4, #0
 23fda44:	bf08      	it	eq
 23fda46:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fda48:	4620      	mov	r0, r4
 23fda4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fda4c <_ZN5Print5writeEPKc>:

    int getWriteError() const { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 23fda4c:	b513      	push	{r0, r1, r4, lr}
 23fda4e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
 23fda50:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fda52:	b159      	cbz	r1, 23fda6c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fda54:	9101      	str	r1, [sp, #4]
 23fda56:	f7fc fdb5 	bl	23fa5c4 <strlen>
 23fda5a:	4602      	mov	r2, r0
 23fda5c:	4620      	mov	r0, r4
 23fda5e:	6823      	ldr	r3, [r4, #0]
 23fda60:	9901      	ldr	r1, [sp, #4]
 23fda62:	68db      	ldr	r3, [r3, #12]
    }
 23fda64:	b002      	add	sp, #8
 23fda66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fda6a:	4718      	bx	r3
    }
 23fda6c:	b002      	add	sp, #8
 23fda6e:	bd10      	pop	{r4, pc}

023fda70 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 23fda70:	b508      	push	{r3, lr}
  return write(str);
 23fda72:	f7ff ffeb 	bl	23fda4c <_ZN5Print5writeEPKc>
}
 23fda76:	bd08      	pop	{r3, pc}

023fda78 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 23fda78:	6803      	ldr	r3, [r0, #0]
 23fda7a:	689b      	ldr	r3, [r3, #8]
 23fda7c:	4718      	bx	r3

023fda7e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 23fda7e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 23fda80:	210d      	movs	r1, #13
{
 23fda82:	4605      	mov	r5, r0
  size_t n = print('\r');
 23fda84:	f7ff fff8 	bl	23fda78 <_ZN5Print5printEc>
  n += print('\n');
 23fda88:	210a      	movs	r1, #10
  size_t n = print('\r');
 23fda8a:	4604      	mov	r4, r0
  n += print('\n');
 23fda8c:	4628      	mov	r0, r5
 23fda8e:	f7ff fff3 	bl	23fda78 <_ZN5Print5printEc>
  return n;
}
 23fda92:	4420      	add	r0, r4
 23fda94:	bd38      	pop	{r3, r4, r5, pc}

023fda96 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 23fda96:	b538      	push	{r3, r4, r5, lr}
 23fda98:	4605      	mov	r5, r0
  return write(str);
 23fda9a:	f7ff ffd7 	bl	23fda4c <_ZN5Print5writeEPKc>
 23fda9e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 23fdaa0:	4628      	mov	r0, r5
 23fdaa2:	f7ff ffec 	bl	23fda7e <_ZN5Print7printlnEv>
  return n;
}
 23fdaa6:	4420      	add	r0, r4
 23fdaa8:	bd38      	pop	{r3, r4, r5, pc}

023fdaaa <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fdaaa:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fdaac:	2a01      	cmp	r2, #1
 23fdaae:	bf98      	it	ls
 23fdab0:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fdab2:	b530      	push	{r4, r5, lr}
 23fdab4:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fdab6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fdaba:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fdabc:	460d      	mov	r5, r1
 23fdabe:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fdac2:	fb01 5312 	mls	r3, r1, r2, r5
 23fdac6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fdaca:	2b09      	cmp	r3, #9
 23fdacc:	bf94      	ite	ls
 23fdace:	3330      	addls	r3, #48	; 0x30
 23fdad0:	3337      	addhi	r3, #55	; 0x37
 23fdad2:	b2db      	uxtb	r3, r3
  } while(n);
 23fdad4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fdad6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fdada:	d9ef      	bls.n	23fdabc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fdadc:	4621      	mov	r1, r4
 23fdade:	f7ff ffb5 	bl	23fda4c <_ZN5Print5writeEPKc>
}
 23fdae2:	b00b      	add	sp, #44	; 0x2c
 23fdae4:	bd30      	pop	{r4, r5, pc}

023fdae6 <_ZN5Print7vprintfEbPKcSt9__va_list>:
    writeVariant(var, writer);
    return writer.bytesWritten();
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 23fdae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fdaea:	b086      	sub	sp, #24
 23fdaec:	af00      	add	r7, sp, #0
 23fdaee:	4605      	mov	r5, r0
 23fdaf0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 23fdaf2:	1d38      	adds	r0, r7, #4
 23fdaf4:	2114      	movs	r1, #20
{
 23fdaf6:	4614      	mov	r4, r2
    va_copy(args2, args);
 23fdaf8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 23fdafa:	f7ff fc63 	bl	23fd3c4 <vsnprintf>

    if (n<bufsize)
 23fdafe:	2813      	cmp	r0, #19
 23fdb00:	d80e      	bhi.n	23fdb20 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 23fdb02:	4628      	mov	r0, r5
 23fdb04:	1d39      	adds	r1, r7, #4
 23fdb06:	f7ff ffa1 	bl	23fda4c <_ZN5Print5writeEPKc>
 23fdb0a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 23fdb0c:	b11e      	cbz	r6, 23fdb16 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 23fdb0e:	4628      	mov	r0, r5
 23fdb10:	f7ff ffb5 	bl	23fda7e <_ZN5Print7printlnEv>
 23fdb14:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 23fdb16:	4620      	mov	r0, r4
 23fdb18:	3718      	adds	r7, #24
 23fdb1a:	46bd      	mov	sp, r7
 23fdb1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 23fdb20:	f100 0308 	add.w	r3, r0, #8
 23fdb24:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 23fdb28:	46e8      	mov	r8, sp
        char bigger[n+1];
 23fdb2a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 23fdb2e:	4622      	mov	r2, r4
 23fdb30:	1c41      	adds	r1, r0, #1
 23fdb32:	683b      	ldr	r3, [r7, #0]
 23fdb34:	4668      	mov	r0, sp
 23fdb36:	f7ff fc45 	bl	23fd3c4 <vsnprintf>
  return write(str);
 23fdb3a:	4669      	mov	r1, sp
 23fdb3c:	4628      	mov	r0, r5
 23fdb3e:	f7ff ff85 	bl	23fda4c <_ZN5Print5writeEPKc>
 23fdb42:	4604      	mov	r4, r0
 23fdb44:	46c5      	mov	sp, r8
 23fdb46:	e7e1      	b.n	23fdb0c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

023fdb48 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 23fdb48:	b510      	push	{r4, lr}
 23fdb4a:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fdb4c:	f7fe ffbe 	bl	23fcacc <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 23fdb50:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 23fdb52:	6823      	ldr	r3, [r4, #0]
 23fdb54:	4620      	mov	r0, r4
 23fdb56:	695b      	ldr	r3, [r3, #20]
 23fdb58:	4798      	blx	r3
    if (c >= 0) return c;
 23fdb5a:	2800      	cmp	r0, #0
 23fdb5c:	da08      	bge.n	23fdb70 <_ZN6Stream9timedReadEv+0x28>
 23fdb5e:	f7fe ffb5 	bl	23fcacc <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
 23fdb62:	68e3      	ldr	r3, [r4, #12]
 23fdb64:	1ac0      	subs	r0, r0, r3
 23fdb66:	68a3      	ldr	r3, [r4, #8]
 23fdb68:	4298      	cmp	r0, r3
 23fdb6a:	d3f2      	bcc.n	23fdb52 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
 23fdb6c:	f04f 30ff 	mov.w	r0, #4294967295
}
 23fdb70:	bd10      	pop	{r4, pc}

023fdb72 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 23fdb72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fdb76:	4607      	mov	r7, r0
 23fdb78:	460c      	mov	r4, r1
 23fdb7a:	460d      	mov	r5, r1
 23fdb7c:	188e      	adds	r6, r1, r2
  size_t count = 0;
  while (count < length) {
 23fdb7e:	42b5      	cmp	r5, r6
 23fdb80:	eba5 0804 	sub.w	r8, r5, r4
 23fdb84:	d007      	beq.n	23fdb96 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
 23fdb86:	4638      	mov	r0, r7
 23fdb88:	f7ff ffde 	bl	23fdb48 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
 23fdb8c:	1e03      	subs	r3, r0, #0
 23fdb8e:	db02      	blt.n	23fdb96 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
 23fdb90:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
 23fdb94:	e7f3      	b.n	23fdb7e <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
 23fdb96:	4640      	mov	r0, r8
 23fdb98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fdb9c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 23fdb9c:	4b01      	ldr	r3, [pc, #4]	; (23fdba4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fdb9e:	4a02      	ldr	r2, [pc, #8]	; (23fdba8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fdba0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fdba2:	4770      	bx	lr
 23fdba4:	1007ae38 	.word	0x1007ae38
 23fdba8:	023ffc64 	.word	0x023ffc64

023fdbac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fdbac:	4b02      	ldr	r3, [pc, #8]	; (23fdbb8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fdbae:	681a      	ldr	r2, [r3, #0]
 23fdbb0:	4b02      	ldr	r3, [pc, #8]	; (23fdbbc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fdbb2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fdbb4:	4770      	bx	lr
 23fdbb6:	bf00      	nop
 23fdbb8:	1007ac0c 	.word	0x1007ac0c
 23fdbbc:	1007ae3c 	.word	0x1007ae3c

023fdbc0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fdbc0:	2100      	movs	r1, #0
 23fdbc2:	f7ff baaf 	b.w	23fd124 <system_delay_ms>
	...

023fdbc8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23fdbc8:	2200      	movs	r2, #0
 23fdbca:	4b01      	ldr	r3, [pc, #4]	; (23fdbd0 <_GLOBAL__sub_I_RGB+0x8>)
 23fdbcc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fdbce:	4770      	bx	lr
 23fdbd0:	1007ae40 	.word	0x1007ae40

023fdbd4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fdbd4:	4b01      	ldr	r3, [pc, #4]	; (23fdbdc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fdbd6:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fdbd8:	4770      	bx	lr
 23fdbda:	bf00      	nop
 23fdbdc:	1007ac10 	.word	0x1007ac10

023fdbe0 <serialEventRun>:
{
 23fdbe0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fdbe2:	4b0f      	ldr	r3, [pc, #60]	; (23fdc20 <serialEventRun+0x40>)
 23fdbe4:	b143      	cbz	r3, 23fdbf8 <serialEventRun+0x18>
 23fdbe6:	f000 f98d 	bl	23fdf04 <_Z16_fetch_usbserialv>
 23fdbea:	6803      	ldr	r3, [r0, #0]
 23fdbec:	691b      	ldr	r3, [r3, #16]
 23fdbee:	4798      	blx	r3
 23fdbf0:	2800      	cmp	r0, #0
 23fdbf2:	dd01      	ble.n	23fdbf8 <serialEventRun+0x18>
        serialEvent();
 23fdbf4:	e000      	b.n	23fdbf8 <serialEventRun+0x18>
 23fdbf6:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fdbf8:	4b0a      	ldr	r3, [pc, #40]	; (23fdc24 <serialEventRun+0x44>)
 23fdbfa:	b143      	cbz	r3, 23fdc0e <serialEventRun+0x2e>
 23fdbfc:	f000 ffa4 	bl	23feb48 <_Z22__fetch_global_Serial1v>
 23fdc00:	6803      	ldr	r3, [r0, #0]
 23fdc02:	691b      	ldr	r3, [r3, #16]
 23fdc04:	4798      	blx	r3
 23fdc06:	2800      	cmp	r0, #0
 23fdc08:	dd01      	ble.n	23fdc0e <serialEventRun+0x2e>
        serialEvent1();
 23fdc0a:	e000      	b.n	23fdc0e <serialEventRun+0x2e>
 23fdc0c:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fdc0e:	4b06      	ldr	r3, [pc, #24]	; (23fdc28 <serialEventRun+0x48>)
 23fdc10:	b10b      	cbz	r3, 23fdc16 <serialEventRun+0x36>
 23fdc12:	f000 ffdf 	bl	23febd4 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fdc16:	4b05      	ldr	r3, [pc, #20]	; (23fdc2c <serialEventRun+0x4c>)
 23fdc18:	b10b      	cbz	r3, 23fdc1e <serialEventRun+0x3e>
 23fdc1a:	f001 f811 	bl	23fec40 <_Z15serialEventRun3v>
}
 23fdc1e:	bd08      	pop	{r3, pc}
	...

023fdc30 <_post_loop>:
{
 23fdc30:	b508      	push	{r3, lr}
	serialEventRun();
 23fdc32:	f7ff ffd5 	bl	23fdbe0 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fdc36:	f7fe ff49 	bl	23fcacc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fdc3a:	4b01      	ldr	r3, [pc, #4]	; (23fdc40 <_post_loop+0x10>)
 23fdc3c:	6018      	str	r0, [r3, #0]
}
 23fdc3e:	bd08      	pop	{r3, pc}
 23fdc40:	1007af4c 	.word	0x1007af4c

023fdc44 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fdc44:	4805      	ldr	r0, [pc, #20]	; (23fdc5c <_Z33system_initialize_user_backup_ramv+0x18>)
 23fdc46:	4a06      	ldr	r2, [pc, #24]	; (23fdc60 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fdc48:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fdc4a:	1a12      	subs	r2, r2, r0
 23fdc4c:	4905      	ldr	r1, [pc, #20]	; (23fdc64 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fdc4e:	f001 f969 	bl	23fef24 <memcpy>
    __backup_sram_signature = signature;
 23fdc52:	4b05      	ldr	r3, [pc, #20]	; (23fdc68 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fdc54:	4a05      	ldr	r2, [pc, #20]	; (23fdc6c <_Z33system_initialize_user_backup_ramv+0x28>)
 23fdc56:	601a      	str	r2, [r3, #0]
}
 23fdc58:	bd08      	pop	{r3, pc}
 23fdc5a:	bf00      	nop
 23fdc5c:	1007b400 	.word	0x1007b400
 23fdc60:	1007b404 	.word	0x1007b404
 23fdc64:	085ff918 	.word	0x085ff918
 23fdc68:	1007b400 	.word	0x1007b400
 23fdc6c:	9a271c1e 	.word	0x9a271c1e

023fdc70 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fdc70:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fdc72:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fdc74:	461a      	mov	r2, r3
 23fdc76:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fdc7a:	9300      	str	r3, [sp, #0]
 23fdc7c:	f7ff fa6e 	bl	23fd15c <system_ctrl_set_result>
}
 23fdc80:	b003      	add	sp, #12
 23fdc82:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fdc88 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fdc88:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fdc8a:	8843      	ldrh	r3, [r0, #2]
 23fdc8c:	2b0a      	cmp	r3, #10
 23fdc8e:	d008      	beq.n	23fdca2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fdc90:	2b50      	cmp	r3, #80	; 0x50
 23fdc92:	d10b      	bne.n	23fdcac <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fdc94:	4b09      	ldr	r3, [pc, #36]	; (23fdcbc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fdc96:	681b      	ldr	r3, [r3, #0]
 23fdc98:	b14b      	cbz	r3, 23fdcae <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fdc9a:	b003      	add	sp, #12
 23fdc9c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fdca0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fdca2:	f7ff ffe5 	bl	23fdc70 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fdca6:	b003      	add	sp, #12
 23fdca8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fdcac:	2300      	movs	r3, #0
 23fdcae:	461a      	mov	r2, r3
 23fdcb0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fdcb4:	9300      	str	r3, [sp, #0]
 23fdcb6:	f7ff fa51 	bl	23fd15c <system_ctrl_set_result>
}
 23fdcba:	e7f4      	b.n	23fdca6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fdcbc:	1007ae54 	.word	0x1007ae54

023fdcc0 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fdcc0:	2100      	movs	r1, #0
{
 23fdcc2:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fdcc4:	4811      	ldr	r0, [pc, #68]	; (23fdd0c <module_user_init_hook+0x4c>)
 23fdcc6:	f7ff fbb5 	bl	23fd434 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fdcca:	4b11      	ldr	r3, [pc, #68]	; (23fdd10 <module_user_init_hook+0x50>)
 23fdccc:	681a      	ldr	r2, [r3, #0]
 23fdcce:	4b11      	ldr	r3, [pc, #68]	; (23fdd14 <module_user_init_hook+0x54>)
 23fdcd0:	429a      	cmp	r2, r3
 23fdcd2:	bf0c      	ite	eq
 23fdcd4:	2201      	moveq	r2, #1
 23fdcd6:	2200      	movne	r2, #0
 23fdcd8:	4b0f      	ldr	r3, [pc, #60]	; (23fdd18 <module_user_init_hook+0x58>)
 23fdcda:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fdcdc:	d001      	beq.n	23fdce2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fdcde:	f7ff ffb1 	bl	23fdc44 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fdce2:	f7fe fec9 	bl	23fca78 <HAL_RNG_GetRandomNumber>
 23fdce6:	4604      	mov	r4, r0
    srand(seed);
 23fdce8:	f001 f932 	bl	23fef50 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fdcec:	4b0b      	ldr	r3, [pc, #44]	; (23fdd1c <module_user_init_hook+0x5c>)
 23fdcee:	b113      	cbz	r3, 23fdcf6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fdcf0:	4620      	mov	r0, r4
 23fdcf2:	e000      	b.n	23fdcf6 <module_user_init_hook+0x36>
 23fdcf4:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fdcf6:	2100      	movs	r1, #0
 23fdcf8:	4808      	ldr	r0, [pc, #32]	; (23fdd1c <module_user_init_hook+0x5c>)
 23fdcfa:	f7ff fb2b 	bl	23fd354 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fdcfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fdd02:	2100      	movs	r1, #0
 23fdd04:	4806      	ldr	r0, [pc, #24]	; (23fdd20 <module_user_init_hook+0x60>)
 23fdd06:	f7ff ba1b 	b.w	23fd140 <system_ctrl_set_app_request_handler>
 23fdd0a:	bf00      	nop
 23fdd0c:	023fdbd5 	.word	0x023fdbd5
 23fdd10:	1007b400 	.word	0x1007b400
 23fdd14:	9a271c1e 	.word	0x9a271c1e
 23fdd18:	1007ae50 	.word	0x1007ae50
 23fdd1c:	00000000 	.word	0x00000000
 23fdd20:	023fdc89 	.word	0x023fdc89

023fdd24 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fdd24:	4770      	bx	lr

023fdd26 <_ZN9IPAddressD0Ev>:
 23fdd26:	b510      	push	{r4, lr}
 23fdd28:	4604      	mov	r4, r0
 23fdd2a:	2118      	movs	r1, #24
 23fdd2c:	f7fc fc73 	bl	23fa616 <_ZdlPvj>
 23fdd30:	4620      	mov	r0, r4
 23fdd32:	bd10      	pop	{r4, pc}

023fdd34 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fdd34:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fdd36:	7d03      	ldrb	r3, [r0, #20]
{
 23fdd38:	460e      	mov	r6, r1
	if (address.v==6) {
 23fdd3a:	2b06      	cmp	r3, #6
 23fdd3c:	f04f 0400 	mov.w	r4, #0
{
 23fdd40:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fdd42:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fdd46:	d012      	beq.n	23fdd6e <_ZNK9IPAddress7printToER5Print+0x3a>
 23fdd48:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fdd4c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fdd50:	220a      	movs	r2, #10
 23fdd52:	4630      	mov	r0, r6
 23fdd54:	f7ff fea9 	bl	23fdaaa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fdd58:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fdd5a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fdd5c:	d019      	beq.n	23fdd92 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fdd5e:	2c00      	cmp	r4, #0
 23fdd60:	d0f4      	beq.n	23fdd4c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fdd62:	212e      	movs	r1, #46	; 0x2e
 23fdd64:	4630      	mov	r0, r6
 23fdd66:	f7ff fe87 	bl	23fda78 <_ZN5Print5printEc>
 23fdd6a:	4404      	add	r4, r0
 23fdd6c:	e7ee      	b.n	23fdd4c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fdd6e:	232f      	movs	r3, #47	; 0x2f
 23fdd70:	466a      	mov	r2, sp
 23fdd72:	4639      	mov	r1, r7
 23fdd74:	200a      	movs	r0, #10
		buf[0] = 0;
 23fdd76:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fdd7a:	f7fe fed1 	bl	23fcb20 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fdd7e:	4668      	mov	r0, sp
 23fdd80:	f7fc fc20 	bl	23fa5c4 <strlen>
 23fdd84:	6833      	ldr	r3, [r6, #0]
 23fdd86:	4602      	mov	r2, r0
 23fdd88:	4669      	mov	r1, sp
 23fdd8a:	4630      	mov	r0, r6
 23fdd8c:	68db      	ldr	r3, [r3, #12]
 23fdd8e:	4798      	blx	r3
 23fdd90:	4604      	mov	r4, r0
    }
    return n;
}
 23fdd92:	4620      	mov	r0, r4
 23fdd94:	b00d      	add	sp, #52	; 0x34
 23fdd96:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fdd98 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fdd98:	b510      	push	{r4, lr}
 23fdd9a:	4604      	mov	r4, r0
 23fdd9c:	4b04      	ldr	r3, [pc, #16]	; (23fddb0 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fdd9e:	2211      	movs	r2, #17
 23fdda0:	2100      	movs	r1, #0
 23fdda2:	f840 3b04 	str.w	r3, [r0], #4
 23fdda6:	f001 f8ca 	bl	23fef3e <memset>
}
 23fddaa:	4620      	mov	r0, r4
 23fddac:	bd10      	pop	{r4, pc}
 23fddae:	bf00      	nop
 23fddb0:	023ffc8c 	.word	0x023ffc8c

023fddb4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fddb4:	4603      	mov	r3, r0
 23fddb6:	4a07      	ldr	r2, [pc, #28]	; (23fddd4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fddb8:	b510      	push	{r4, lr}
 23fddba:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fddbe:	f101 0210 	add.w	r2, r1, #16
 23fddc2:	f851 4b04 	ldr.w	r4, [r1], #4
 23fddc6:	4291      	cmp	r1, r2
 23fddc8:	f843 4b04 	str.w	r4, [r3], #4
 23fddcc:	d1f9      	bne.n	23fddc2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fddce:	780a      	ldrb	r2, [r1, #0]
 23fddd0:	701a      	strb	r2, [r3, #0]
}
 23fddd2:	bd10      	pop	{r4, pc}
 23fddd4:	023ffc8c 	.word	0x023ffc8c

023fddd8 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
 23fddd8:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
 23fddda:	2b04      	cmp	r3, #4
 23fdddc:	d104      	bne.n	23fdde8 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
 23fddde:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
 23fdde0:	3800      	subs	r0, #0
 23fdde2:	bf18      	it	ne
 23fdde4:	2001      	movne	r0, #1
 23fdde6:	4770      	bx	lr
    } else if (version() == 6) {
 23fdde8:	2b06      	cmp	r3, #6
 23fddea:	d107      	bne.n	23fddfc <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
 23fddec:	6843      	ldr	r3, [r0, #4]
 23fddee:	b93b      	cbnz	r3, 23fde00 <_ZNK9IPAddresscvbEv+0x28>
 23fddf0:	6883      	ldr	r3, [r0, #8]
 23fddf2:	b92b      	cbnz	r3, 23fde00 <_ZNK9IPAddresscvbEv+0x28>
 23fddf4:	68c3      	ldr	r3, [r0, #12]
 23fddf6:	b91b      	cbnz	r3, 23fde00 <_ZNK9IPAddresscvbEv+0x28>
 23fddf8:	6900      	ldr	r0, [r0, #16]
 23fddfa:	e7f1      	b.n	23fdde0 <_ZNK9IPAddresscvbEv+0x8>
        return false;
 23fddfc:	2000      	movs	r0, #0
 23fddfe:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
 23fde00:	2001      	movs	r0, #1
}
 23fde02:	4770      	bx	lr

023fde04 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fde04:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fde06:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fde0a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fde0e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fde12:	2304      	movs	r3, #4
 23fde14:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fde18:	6041      	str	r1, [r0, #4]
 23fde1a:	7503      	strb	r3, [r0, #20]
}
 23fde1c:	bd10      	pop	{r4, pc}
	...

023fde20 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fde20:	b507      	push	{r0, r1, r2, lr}
 23fde22:	4b06      	ldr	r3, [pc, #24]	; (23fde3c <_ZN9IPAddressC1EPKh+0x1c>)
 23fde24:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fde26:	78cb      	ldrb	r3, [r1, #3]
 23fde28:	9300      	str	r3, [sp, #0]
 23fde2a:	788b      	ldrb	r3, [r1, #2]
 23fde2c:	784a      	ldrb	r2, [r1, #1]
 23fde2e:	7809      	ldrb	r1, [r1, #0]
 23fde30:	f7ff ffe8 	bl	23fde04 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fde34:	b003      	add	sp, #12
 23fde36:	f85d fb04 	ldr.w	pc, [sp], #4
 23fde3a:	bf00      	nop
 23fde3c:	023ffc8c 	.word	0x023ffc8c

023fde40 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fde40:	7441      	strb	r1, [r0, #17]
}
 23fde42:	4770      	bx	lr

023fde44 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fde44:	4770      	bx	lr

023fde46 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fde46:	4770      	bx	lr

023fde48 <_ZN9USBSerial4readEv>:
{
 23fde48:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fde4a:	2100      	movs	r1, #0
 23fde4c:	7c00      	ldrb	r0, [r0, #16]
 23fde4e:	f7ff f8f9 	bl	23fd044 <HAL_USB_USART_Receive_Data>
}
 23fde52:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fde56:	bd08      	pop	{r3, pc}

023fde58 <_ZN9USBSerial4peekEv>:
{
 23fde58:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fde5a:	2101      	movs	r1, #1
 23fde5c:	7c00      	ldrb	r0, [r0, #16]
 23fde5e:	f7ff f8f1 	bl	23fd044 <HAL_USB_USART_Receive_Data>
}
 23fde62:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fde66:	bd08      	pop	{r3, pc}

023fde68 <_ZN9USBSerial17availableForWriteEv>:
{
 23fde68:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fde6a:	7c00      	ldrb	r0, [r0, #16]
 23fde6c:	f7ff f8dc 	bl	23fd028 <HAL_USB_USART_Available_Data_For_Write>
}
 23fde70:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fde74:	bd08      	pop	{r3, pc}

023fde76 <_ZN9USBSerial9availableEv>:
{
 23fde76:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fde78:	7c00      	ldrb	r0, [r0, #16]
 23fde7a:	f7ff f8c7 	bl	23fd00c <HAL_USB_USART_Available_Data>
}
 23fde7e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fde82:	bd08      	pop	{r3, pc}

023fde84 <_ZN9USBSerial5writeEh>:
{
 23fde84:	b513      	push	{r0, r1, r4, lr}
 23fde86:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fde88:	7c00      	ldrb	r0, [r0, #16]
{
 23fde8a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fde8c:	f7ff f8cc 	bl	23fd028 <HAL_USB_USART_Available_Data_For_Write>
 23fde90:	2800      	cmp	r0, #0
 23fde92:	9901      	ldr	r1, [sp, #4]
 23fde94:	dc01      	bgt.n	23fde9a <_ZN9USBSerial5writeEh+0x16>
 23fde96:	7c60      	ldrb	r0, [r4, #17]
 23fde98:	b120      	cbz	r0, 23fdea4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fde9a:	7c20      	ldrb	r0, [r4, #16]
 23fde9c:	f7ff f8e0 	bl	23fd060 <HAL_USB_USART_Send_Data>
 23fdea0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fdea4:	b002      	add	sp, #8
 23fdea6:	bd10      	pop	{r4, pc}

023fdea8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fdea8:	7c00      	ldrb	r0, [r0, #16]
 23fdeaa:	f7ff b8e7 	b.w	23fd07c <HAL_USB_USART_Flush_Data>

023fdeae <_ZN9USBSerialD0Ev>:
 23fdeae:	b510      	push	{r4, lr}
 23fdeb0:	4604      	mov	r4, r0
 23fdeb2:	2114      	movs	r1, #20
 23fdeb4:	f7fc fbaf 	bl	23fa616 <_ZdlPvj>
 23fdeb8:	4620      	mov	r0, r4
 23fdeba:	bd10      	pop	{r4, pc}

023fdebc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fdebc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fdebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fdec2:	4604      	mov	r4, r0
 23fdec4:	4608      	mov	r0, r1
 23fdec6:	2100      	movs	r1, #0
 23fdec8:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fdecc:	4b04      	ldr	r3, [pc, #16]	; (23fdee0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fdece:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fded0:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fded2:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fded4:	4611      	mov	r1, r2
  _blocking = true;
 23fded6:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fded8:	f7ff f87c 	bl	23fcfd4 <HAL_USB_USART_Init>
}
 23fdedc:	4620      	mov	r0, r4
 23fdede:	bd10      	pop	{r4, pc}
 23fdee0:	023ffca0 	.word	0x023ffca0

023fdee4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fdee4:	2200      	movs	r2, #0
 23fdee6:	7c00      	ldrb	r0, [r0, #16]
 23fdee8:	f7ff b882 	b.w	23fcff0 <HAL_USB_USART_Begin>

023fdeec <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
 23fdeec:	7c00      	ldrb	r0, [r0, #16]
 23fdeee:	f7ff b8d3 	b.w	23fd098 <HAL_USB_USART_Is_Connected>

023fdef2 <_Z19acquireSerialBufferv>:
{
 23fdef2:	b510      	push	{r4, lr}
 23fdef4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fdef6:	2214      	movs	r2, #20
 23fdef8:	2100      	movs	r1, #0
 23fdefa:	f001 f820 	bl	23fef3e <memset>
}
 23fdefe:	4620      	mov	r0, r4
 23fdf00:	bd10      	pop	{r4, pc}
	...

023fdf04 <_Z16_fetch_usbserialv>:
{
 23fdf04:	b510      	push	{r4, lr}
 23fdf06:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fdf08:	a803      	add	r0, sp, #12
 23fdf0a:	f7ff fff2 	bl	23fdef2 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fdf0e:	4c0c      	ldr	r4, [pc, #48]	; (23fdf40 <_Z16_fetch_usbserialv+0x3c>)
 23fdf10:	e8d4 1f8f 	ldab	r1, [r4]
 23fdf14:	f011 0101 	ands.w	r1, r1, #1
 23fdf18:	d10f      	bne.n	23fdf3a <_Z16_fetch_usbserialv+0x36>
 23fdf1a:	4620      	mov	r0, r4
 23fdf1c:	9101      	str	r1, [sp, #4]
 23fdf1e:	f7fc fb89 	bl	23fa634 <__cxa_guard_acquire>
 23fdf22:	9901      	ldr	r1, [sp, #4]
 23fdf24:	b148      	cbz	r0, 23fdf3a <_Z16_fetch_usbserialv+0x36>
 23fdf26:	aa03      	add	r2, sp, #12
 23fdf28:	4806      	ldr	r0, [pc, #24]	; (23fdf44 <_Z16_fetch_usbserialv+0x40>)
 23fdf2a:	f7ff ffc7 	bl	23fdebc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fdf2e:	4620      	mov	r0, r4
 23fdf30:	f7fc fb85 	bl	23fa63e <__cxa_guard_release>
 23fdf34:	4804      	ldr	r0, [pc, #16]	; (23fdf48 <_Z16_fetch_usbserialv+0x44>)
 23fdf36:	f000 ffef 	bl	23fef18 <atexit>
	return _usbserial;
}
 23fdf3a:	4802      	ldr	r0, [pc, #8]	; (23fdf44 <_Z16_fetch_usbserialv+0x40>)
 23fdf3c:	b008      	add	sp, #32
 23fdf3e:	bd10      	pop	{r4, pc}
 23fdf40:	1007ae58 	.word	0x1007ae58
 23fdf44:	1007ae5c 	.word	0x1007ae5c
 23fdf48:	023fde45 	.word	0x023fde45

023fdf4c <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 23fdf4c:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
 23fdf4e:	b510      	push	{r4, lr}
 23fdf50:	b90a      	cbnz	r2, 23fdf56 <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
 23fdf52:	f000 fecb 	bl	23fecec <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fdf56:	68c3      	ldr	r3, [r0, #12]
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
 23fdf58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fdf5c:	4718      	bx	r3
	...

023fdf60 <_Z16allocate_handlertRSt8functionIFvvEE>:
{
 23fdf60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
 23fdf62:	4f10      	ldr	r7, [pc, #64]	; (23fdfa4 <_Z16allocate_handlertRSt8functionIFvvEE+0x44>)
{
 23fdf64:	4606      	mov	r6, r0
    delete handlers[pin];
 23fdf66:	f857 4020 	ldr.w	r4, [r7, r0, lsl #2]
{
 23fdf6a:	460d      	mov	r5, r1
    delete handlers[pin];
 23fdf6c:	b134      	cbz	r4, 23fdf7c <_Z16allocate_handlertRSt8functionIFvvEE+0x1c>
    class function<_Res(_ArgTypes...)>
 23fdf6e:	4620      	mov	r0, r4
 23fdf70:	f7ff fbf3 	bl	23fd75a <_ZNSt14_Function_baseD1Ev>
 23fdf74:	2110      	movs	r1, #16
 23fdf76:	4620      	mov	r0, r4
 23fdf78:	f7fc fb4d 	bl	23fa616 <_ZdlPvj>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
 23fdf7c:	2010      	movs	r0, #16
 23fdf7e:	f7fc fb46 	bl	23fa60e <_Znwj>
 23fdf82:	4604      	mov	r4, r0
 23fdf84:	b150      	cbz	r0, 23fdf9c <_Z16allocate_handlertRSt8functionIFvvEE+0x3c>
    _Function_base() : _M_manager(nullptr) { }
 23fdf86:	2300      	movs	r3, #0
 23fdf88:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23fdf8a:	68ab      	ldr	r3, [r5, #8]
      if (static_cast<bool>(__x))
 23fdf8c:	b133      	cbz	r3, 23fdf9c <_Z16allocate_handlertRSt8functionIFvvEE+0x3c>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fdf8e:	2202      	movs	r2, #2
 23fdf90:	4629      	mov	r1, r5
 23fdf92:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fdf94:	68eb      	ldr	r3, [r5, #12]
 23fdf96:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23fdf98:	68ab      	ldr	r3, [r5, #8]
 23fdf9a:	60a3      	str	r3, [r4, #8]
}
 23fdf9c:	4620      	mov	r0, r4
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
 23fdf9e:	f847 4026 	str.w	r4, [r7, r6, lsl #2]
}
 23fdfa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fdfa4:	1007ae70 	.word	0x1007ae70

023fdfa8 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
  }
  return nullptr;
}

bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 23fdfa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fdfaa:	4605      	mov	r5, r0
 23fdfac:	b087      	sub	sp, #28
 23fdfae:	4617      	mov	r7, r2
 23fdfb0:	461e      	mov	r6, r3
 23fdfb2:	9103      	str	r1, [sp, #12]
    hal_interrupt_detach(pin);
 23fdfb4:	f7fe fd28 	bl	23fca08 <hal_interrupt_detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
 23fdfb8:	4628      	mov	r0, r5
 23fdfba:	9903      	ldr	r1, [sp, #12]
 23fdfbc:	f7ff ffd0 	bl	23fdf60 <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
 23fdfc0:	4604      	mov	r4, r0
 23fdfc2:	b1d8      	cbz	r0, 23fdffc <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x54>
        hal_interrupt_extra_configuration_t extra = {};
 23fdfc4:	2100      	movs	r1, #0
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 23fdfc6:	2304      	movs	r3, #4
  if (priority >= 0) {
 23fdfc8:	428e      	cmp	r6, r1
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 23fdfca:	f88d 3010 	strb.w	r3, [sp, #16]
    extra.IRQChannelSubPriority = subpriority;
 23fdfce:	bfa8      	it	ge
 23fdfd0:	f89d 3030 	ldrbge.w	r3, [sp, #48]	; 0x30
        hal_interrupt_extra_configuration_t extra = {};
 23fdfd4:	f8cd 1011 	str.w	r1, [sp, #17]
    return &extra;
 23fdfd8:	bfa4      	itt	ge
 23fdfda:	a904      	addge	r1, sp, #16
    extra.IRQChannelSubPriority = subpriority;
 23fdfdc:	f88d 3012 	strbge.w	r3, [sp, #18]
        if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
 23fdfe0:	4602      	mov	r2, r0
 23fdfe2:	9100      	str	r1, [sp, #0]
 23fdfe4:	463b      	mov	r3, r7
 23fdfe6:	4628      	mov	r0, r5
 23fdfe8:	4906      	ldr	r1, [pc, #24]	; (23fe004 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x5c>)
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 23fdfea:	bfa8      	it	ge
 23fdfec:	f88d 6011 	strbge.w	r6, [sp, #17]
        if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority))) {
 23fdff0:	f7fe fcfc 	bl	23fc9ec <hal_interrupt_attach>
 23fdff4:	b110      	cbz	r0, 23fdffc <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x54>
            return false;
 23fdff6:	2000      	movs	r0, #0
        }
    }
    return handler!=NULL;
}
 23fdff8:	b007      	add	sp, #28
 23fdffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return handler!=NULL;
 23fdffc:	1e20      	subs	r0, r4, #0
 23fdffe:	bf18      	it	ne
 23fe000:	2001      	movne	r0, #1
 23fe002:	e7f9      	b.n	23fdff8 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x50>
 23fe004:	023fdf4d 	.word	0x023fdf4d

023fe008 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  hal_interrupt_disable_all();
 23fe008:	f7fe bd1a 	b.w	23fca40 <hal_interrupt_disable_all>

023fe00c <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  hal_interrupt_enable_all();
 23fe00c:	f7fe bd0a 	b.w	23fca24 <hal_interrupt_enable_all>

023fe010 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fe010:	4770      	bx	lr

023fe012 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fe012:	7441      	strb	r1, [r0, #17]
}
 23fe014:	4770      	bx	lr

023fe016 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fe016:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fe018:	7c00      	ldrb	r0, [r0, #16]
 23fe01a:	f7fe fdff 	bl	23fcc1c <hal_usart_available_data_for_write>
}
 23fe01e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe022:	bd08      	pop	{r3, pc}

023fe024 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fe024:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fe026:	7c00      	ldrb	r0, [r0, #16]
 23fe028:	f7fe fdb2 	bl	23fcb90 <hal_usart_available>
}
 23fe02c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe030:	bd08      	pop	{r3, pc}

023fe032 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fe032:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fe034:	7c00      	ldrb	r0, [r0, #16]
 23fe036:	f7fe fdc7 	bl	23fcbc8 <hal_usart_peek>
}
 23fe03a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe03e:	bd08      	pop	{r3, pc}

023fe040 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fe040:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fe042:	7c00      	ldrb	r0, [r0, #16]
 23fe044:	f7fe fdb2 	bl	23fcbac <hal_usart_read>
}
 23fe048:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe04c:	bd08      	pop	{r3, pc}

023fe04e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fe04e:	7c00      	ldrb	r0, [r0, #16]
 23fe050:	f7fe bdc8 	b.w	23fcbe4 <hal_usart_flush>

023fe054 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fe054:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fe056:	7c45      	ldrb	r5, [r0, #17]
{
 23fe058:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fe05a:	b12d      	cbz	r5, 23fe068 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fe05c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fe05e:	b003      	add	sp, #12
 23fe060:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fe064:	f7fe bd86 	b.w	23fcb74 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fe068:	7c00      	ldrb	r0, [r0, #16]
 23fe06a:	9101      	str	r1, [sp, #4]
 23fe06c:	f7fe fdd6 	bl	23fcc1c <hal_usart_available_data_for_write>
 23fe070:	2800      	cmp	r0, #0
 23fe072:	9901      	ldr	r1, [sp, #4]
 23fe074:	dcf2      	bgt.n	23fe05c <_ZN11USARTSerial5writeEh+0x8>
}
 23fe076:	4628      	mov	r0, r5
 23fe078:	b003      	add	sp, #12
 23fe07a:	bd30      	pop	{r4, r5, pc}

023fe07c <_ZN11USARTSerialD0Ev>:
 23fe07c:	b510      	push	{r4, lr}
 23fe07e:	4604      	mov	r4, r0
 23fe080:	2114      	movs	r1, #20
 23fe082:	f7fc fac8 	bl	23fa616 <_ZdlPvj>
 23fe086:	4620      	mov	r0, r4
 23fe088:	bd10      	pop	{r4, pc}
	...

023fe08c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fe08c:	b510      	push	{r4, lr}
 23fe08e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fe092:	4604      	mov	r4, r0
 23fe094:	4608      	mov	r0, r1
 23fe096:	4611      	mov	r1, r2
 23fe098:	2200      	movs	r2, #0
 23fe09a:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fe09e:	4b04      	ldr	r3, [pc, #16]	; (23fe0b0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fe0a0:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fe0a2:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fe0a4:	2301      	movs	r3, #1
 23fe0a6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fe0a8:	f7fe fdd4 	bl	23fcc54 <hal_usart_init_ex>
}
 23fe0ac:	4620      	mov	r0, r4
 23fe0ae:	bd10      	pop	{r4, pc}
 23fe0b0:	023ffcd4 	.word	0x023ffcd4

023fe0b4 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23fe0b4:	2300      	movs	r3, #0
 23fe0b6:	7c00      	ldrb	r0, [r0, #16]
 23fe0b8:	f7fe bdbe 	b.w	23fcc38 <hal_usart_begin_config>

023fe0bc <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23fe0bc:	2200      	movs	r2, #0
 23fe0be:	f7ff bff9 	b.w	23fe0b4 <_ZN11USARTSerial5beginEmm>

023fe0c2 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fe0c2:	7c00      	ldrb	r0, [r0, #16]
 23fe0c4:	f7fe bd9c 	b.w	23fcc00 <hal_usart_is_enabled>

023fe0c8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fe0c8:	4770      	bx	lr

023fe0ca <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fe0ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe0cc:	4606      	mov	r6, r0
 23fe0ce:	4615      	mov	r5, r2
 23fe0d0:	460c      	mov	r4, r1
 23fe0d2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fe0d4:	42bc      	cmp	r4, r7
 23fe0d6:	d006      	beq.n	23fe0e6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fe0d8:	6833      	ldr	r3, [r6, #0]
 23fe0da:	4630      	mov	r0, r6
 23fe0dc:	689b      	ldr	r3, [r3, #8]
 23fe0de:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fe0e2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fe0e4:	e7f6      	b.n	23fe0d4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fe0e6:	4628      	mov	r0, r5
 23fe0e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe0ea <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fe0ea:	2200      	movs	r2, #0
 23fe0ec:	7c00      	ldrb	r0, [r0, #16]
 23fe0ee:	f7fe bde9 	b.w	23fccc4 <hal_i2c_write>

023fe0f2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fe0f2:	2100      	movs	r1, #0
 23fe0f4:	7c00      	ldrb	r0, [r0, #16]
 23fe0f6:	f7fe bdf3 	b.w	23fcce0 <hal_i2c_available>

023fe0fa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fe0fa:	2100      	movs	r1, #0
 23fe0fc:	7c00      	ldrb	r0, [r0, #16]
 23fe0fe:	f7fe bdfd 	b.w	23fccfc <hal_i2c_read>

023fe102 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fe102:	2100      	movs	r1, #0
 23fe104:	7c00      	ldrb	r0, [r0, #16]
 23fe106:	f7fe be07 	b.w	23fcd18 <hal_i2c_peek>

023fe10a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fe10a:	2100      	movs	r1, #0
 23fe10c:	7c00      	ldrb	r0, [r0, #16]
 23fe10e:	f7fe be11 	b.w	23fcd34 <hal_i2c_flush>

023fe112 <_ZN7TwoWireD0Ev>:
 23fe112:	b510      	push	{r4, lr}
 23fe114:	4604      	mov	r4, r0
 23fe116:	2114      	movs	r1, #20
 23fe118:	f7fc fa7d 	bl	23fa616 <_ZdlPvj>
 23fe11c:	4620      	mov	r0, r4
 23fe11e:	bd10      	pop	{r4, pc}

023fe120 <_ZNK16WireTransmission9halConfigEv>:
    hal_i2c_transmission_config_t conf = {
 23fe120:	2200      	movs	r2, #0
 23fe122:	e9c0 2200 	strd	r2, r2, [r0]
 23fe126:	2218      	movs	r2, #24
 23fe128:	8002      	strh	r2, [r0, #0]
    };
 23fe12a:	780a      	ldrb	r2, [r1, #0]
 23fe12c:	7102      	strb	r2, [r0, #4]
 23fe12e:	684a      	ldr	r2, [r1, #4]
 23fe130:	6082      	str	r2, [r0, #8]
 23fe132:	68ca      	ldr	r2, [r1, #12]
 23fe134:	60c2      	str	r2, [r0, #12]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0),
 23fe136:	7a0a      	ldrb	r2, [r1, #8]
 23fe138:	6102      	str	r2, [r0, #16]
    };
 23fe13a:	690a      	ldr	r2, [r1, #16]
 23fe13c:	6142      	str	r2, [r0, #20]
  }
 23fe13e:	4770      	bx	lr

023fe140 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fe140:	b538      	push	{r3, r4, r5, lr}
 23fe142:	4604      	mov	r4, r0
 23fe144:	4615      	mov	r5, r2
 23fe146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fe14a:	2200      	movs	r2, #0
 23fe14c:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fe150:	4b09      	ldr	r3, [pc, #36]	; (23fe178 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fe152:	4608      	mov	r0, r1
  _i2c = i2c;
 23fe154:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fe156:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fe158:	4629      	mov	r1, r5
 23fe15a:	f7fe fe07 	bl	23fcd6c <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fe15e:	30bf      	adds	r0, #191	; 0xbf
 23fe160:	d108      	bne.n	23fe174 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fe162:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fe164:	07db      	lsls	r3, r3, #31
 23fe166:	d505      	bpl.n	23fe174 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fe168:	6868      	ldr	r0, [r5, #4]
 23fe16a:	f7ff f90f 	bl	23fd38c <free>
    free(conf.tx_buffer);
 23fe16e:	68e8      	ldr	r0, [r5, #12]
 23fe170:	f7ff f90c 	bl	23fd38c <free>
}
 23fe174:	4620      	mov	r0, r4
 23fe176:	bd38      	pop	{r3, r4, r5, pc}
 23fe178:	023ffd08 	.word	0x023ffd08

023fe17c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 23fe17c:	2300      	movs	r3, #0
 23fe17e:	7c00      	ldrb	r0, [r0, #16]
 23fe180:	461a      	mov	r2, r3
 23fe182:	4619      	mov	r1, r3
 23fe184:	f7fe bd74 	b.w	23fcc70 <hal_i2c_begin>

023fe188 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 23fe188:	b510      	push	{r4, lr}
 23fe18a:	4604      	mov	r4, r0
 23fe18c:	b086      	sub	sp, #24
  auto conf = transfer.halConfig();
 23fe18e:	4668      	mov	r0, sp
 23fe190:	f7ff ffc6 	bl	23fe120 <_ZNK16WireTransmission9halConfigEv>
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 23fe194:	2200      	movs	r2, #0
 23fe196:	4669      	mov	r1, sp
 23fe198:	7c20      	ldrb	r0, [r4, #16]
 23fe19a:	f7fe fdf5 	bl	23fcd88 <hal_i2c_request_ex>
}
 23fe19e:	b006      	add	sp, #24
 23fe1a0:	bd10      	pop	{r4, pc}

023fe1a2 <_ZN7TwoWire11requestFromEhjh>:
{
 23fe1a2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        buffer_(nullptr) {
 23fe1a4:	f88d 1004 	strb.w	r1, [sp, #4]
 23fe1a8:	2100      	movs	r1, #0
 23fe1aa:	f04f 0c64 	mov.w	ip, #100	; 0x64
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 23fe1ae:	1a5b      	subs	r3, r3, r1
 23fe1b0:	bf18      	it	ne
 23fe1b2:	2301      	movne	r3, #1
 23fe1b4:	e9cd c104 	strd	ip, r1, [sp, #16]
 23fe1b8:	a901      	add	r1, sp, #4
    size_ = size;
 23fe1ba:	9202      	str	r2, [sp, #8]
 23fe1bc:	f88d 300c 	strb.w	r3, [sp, #12]
 23fe1c0:	f7ff ffe2 	bl	23fe188 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 23fe1c4:	b007      	add	sp, #28
 23fe1c6:	f85d fb04 	ldr.w	pc, [sp], #4

023fe1ca <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 23fe1ca:	2301      	movs	r3, #1
 23fe1cc:	f7ff bfe9 	b.w	23fe1a2 <_ZN7TwoWire11requestFromEhjh>

023fe1d0 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23fe1d0:	2200      	movs	r2, #0
 23fe1d2:	7c00      	ldrb	r0, [r0, #16]
 23fe1d4:	f7fe bd5a 	b.w	23fcc8c <hal_i2c_begin_transmission>

023fe1d8 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 23fe1d8:	b2c9      	uxtb	r1, r1
 23fe1da:	f7ff bff9 	b.w	23fe1d0 <_ZN7TwoWire17beginTransmissionEh>

023fe1de <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23fe1de:	2200      	movs	r2, #0
 23fe1e0:	7c00      	ldrb	r0, [r0, #16]
 23fe1e2:	f7fe bd61 	b.w	23fcca8 <hal_i2c_end_transmission>

023fe1e6 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 23fe1e6:	2101      	movs	r1, #1
 23fe1e8:	f7ff bff9 	b.w	23fe1de <_ZN7TwoWire15endTransmissionEh>

023fe1ec <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t>:
        buffer_(nullptr) {
 23fe1ec:	21ff      	movs	r1, #255	; 0xff
 23fe1ee:	2200      	movs	r2, #0
      : address_{address},
 23fe1f0:	4b04      	ldr	r3, [pc, #16]	; (23fe204 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t+0x18>)
        buffer_(nullptr) {
 23fe1f2:	2001      	movs	r0, #1
 23fe1f4:	e9c3 1200 	strd	r1, r2, [r3]
 23fe1f8:	2164      	movs	r1, #100	; 0x64
 23fe1fa:	611a      	str	r2, [r3, #16]
 23fe1fc:	e9c3 0102 	strd	r0, r1, [r3, #8]

namespace particle {
namespace detail {
const WireTransmission WIRE_INVALID_TRANSMISSION(0xff);
} // detail
} // particle
 23fe200:	4770      	bx	lr
 23fe202:	bf00      	nop
 23fe204:	1007aee0 	.word	0x1007aee0

023fe208 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
 23fe208:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
 23fe20a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
 23fe20c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
 23fe210:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 23fe212:	2201      	movs	r2, #1
 23fe214:	f04f 33ff 	mov.w	r3, #4294967295
 23fe218:	f10d 0107 	add.w	r1, sp, #7
 23fe21c:	47a0      	blx	r4
}
 23fe21e:	b002      	add	sp, #8
 23fe220:	bd10      	pop	{r4, pc}

023fe222 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
 23fe222:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
 23fe224:	6803      	ldr	r3, [r0, #0]
 23fe226:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 23fe228:	f04f 33ff 	mov.w	r3, #4294967295
 23fe22c:	46a4      	mov	ip, r4
}
 23fe22e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
 23fe232:	4760      	bx	ip

023fe234 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
 23fe234:	b513      	push	{r0, r1, r4, lr}
 23fe236:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
 23fe238:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
 23fe23a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
 23fe23e:	6c14      	ldr	r4, [r2, #64]	; 0x40
 23fe240:	f10d 0107 	add.w	r1, sp, #7
 23fe244:	2201      	movs	r2, #1
 23fe246:	47a0      	blx	r4
}
 23fe248:	b002      	add	sp, #8
 23fe24a:	bd10      	pop	{r4, pc}

023fe24c <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
 23fe24c:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 23fe24e:	6943      	ldr	r3, [r0, #20]
 23fe250:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 23fe252:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23fe256:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 23fe25a:	429a      	cmp	r2, r3
 23fe25c:	d008      	beq.n	23fe270 <_ZN9TCPClient4readEv+0x24>
 23fe25e:	6963      	ldr	r3, [r4, #20]
 23fe260:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 23fe264:	1c51      	adds	r1, r2, #1
 23fe266:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
 23fe26a:	4413      	add	r3, r2
 23fe26c:	7918      	ldrb	r0, [r3, #4]
}
 23fe26e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 23fe270:	6803      	ldr	r3, [r0, #0]
 23fe272:	691b      	ldr	r3, [r3, #16]
 23fe274:	4798      	blx	r3
 23fe276:	2800      	cmp	r0, #0
 23fe278:	d1f1      	bne.n	23fe25e <_ZN9TCPClient4readEv+0x12>
 23fe27a:	f04f 30ff 	mov.w	r0, #4294967295
 23fe27e:	e7f6      	b.n	23fe26e <_ZN9TCPClient4readEv+0x22>

023fe280 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
 23fe280:	4770      	bx	lr

023fe282 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
 23fe282:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
 23fe284:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
 23fe286:	43c0      	mvns	r0, r0
 23fe288:	0fc0      	lsrs	r0, r0, #31
 23fe28a:	4770      	bx	lr

023fe28c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fe28c:	4770      	bx	lr
	...

023fe290 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
 23fe290:	4b06      	ldr	r3, [pc, #24]	; (23fe2ac <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23fe292:	b510      	push	{r4, lr}
	    ||
 23fe294:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 23fe296:	f100 040c 	add.w	r4, r0, #12
 23fe29a:	d005      	beq.n	23fe2a8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
 23fe29c:	4608      	mov	r0, r1
 23fe29e:	f000 fd29 	bl	23fecf4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 23fe2a2:	2800      	cmp	r0, #0
 23fe2a4:	bf08      	it	eq
 23fe2a6:	2400      	moveq	r4, #0
      }
 23fe2a8:	4620      	mov	r0, r4
 23fe2aa:	bd10      	pop	{r4, pc}
 23fe2ac:	023ffc5c 	.word	0x023ffc5c

023fe2b0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fe2b0:	b510      	push	{r4, lr}
 23fe2b2:	4604      	mov	r4, r0
 23fe2b4:	21ac      	movs	r1, #172	; 0xac
 23fe2b6:	f7fc f9ae 	bl	23fa616 <_ZdlPvj>
 23fe2ba:	4620      	mov	r0, r4
 23fe2bc:	bd10      	pop	{r4, pc}

023fe2be <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 23fe2be:	21ac      	movs	r1, #172	; 0xac
 23fe2c0:	f7fc b9a9 	b.w	23fa616 <_ZdlPvj>

023fe2c4 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
 23fe2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
 23fe2c8:	f04f 0800 	mov.w	r8, #0
 23fe2cc:	461c      	mov	r4, r3
 23fe2ce:	b086      	sub	sp, #24
 23fe2d0:	f8c0 8004 	str.w	r8, [r0, #4]
 23fe2d4:	4605      	mov	r5, r0
 23fe2d6:	460e      	mov	r6, r1
 23fe2d8:	4617      	mov	r7, r2
    struct timeval tv = {};
 23fe2da:	4641      	mov	r1, r8
 23fe2dc:	2210      	movs	r2, #16
 23fe2de:	a802      	add	r0, sp, #8
 23fe2e0:	f000 fe2d 	bl	23fef3e <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
 23fe2e4:	1c63      	adds	r3, r4, #1
 23fe2e6:	d009      	beq.n	23fe2fc <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
 23fe2e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fe2ec:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
 23fe2f0:	fb03 4412 	mls	r4, r3, r2, r4
 23fe2f4:	435c      	muls	r4, r3
        tv.tv_sec = timeout / 1000;
 23fe2f6:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
 23fe2fa:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
 23fe2fc:	2310      	movs	r3, #16
 23fe2fe:	6968      	ldr	r0, [r5, #20]
 23fe300:	9300      	str	r3, [sp, #0]
 23fe302:	f241 0205 	movw	r2, #4101	; 0x1005
 23fe306:	f640 71ff 	movw	r1, #4095	; 0xfff
 23fe30a:	6800      	ldr	r0, [r0, #0]
 23fe30c:	ab02      	add	r3, sp, #8
 23fe30e:	f7fe fd49 	bl	23fcda4 <sock_setsockopt>
    if (ret < 0) {
 23fe312:	2800      	cmp	r0, #0
 23fe314:	da07      	bge.n	23fe326 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
 23fe316:	f7ff f871 	bl	23fd3fc <__errno>
 23fe31a:	6803      	ldr	r3, [r0, #0]
        return 0;
 23fe31c:	2000      	movs	r0, #0
 23fe31e:	606b      	str	r3, [r5, #4]
}
 23fe320:	b006      	add	sp, #24
 23fe322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
 23fe326:	6968      	ldr	r0, [r5, #20]
 23fe328:	2300      	movs	r3, #0
 23fe32a:	463a      	mov	r2, r7
 23fe32c:	4631      	mov	r1, r6
 23fe32e:	6800      	ldr	r0, [r0, #0]
 23fe330:	f7fe fd70 	bl	23fce14 <sock_send>
    if (ret < 0) {
 23fe334:	1e03      	subs	r3, r0, #0
 23fe336:	dbee      	blt.n	23fe316 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
 23fe338:	4618      	mov	r0, r3
 23fe33a:	e7f1      	b.n	23fe320 <_ZN9TCPClient5writeEPKhjm+0x5c>

023fe33c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
 23fe33c:	b530      	push	{r4, r5, lr}
 23fe33e:	4604      	mov	r4, r0
 23fe340:	b087      	sub	sp, #28
        return *this = IPAddress(address);
 23fe342:	4668      	mov	r0, sp
 23fe344:	f7ff fd6c 	bl	23fde20 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fe348:	ad01      	add	r5, sp, #4
 23fe34a:	3404      	adds	r4, #4
 23fe34c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe34e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe350:	682b      	ldr	r3, [r5, #0]
 23fe352:	7023      	strb	r3, [r4, #0]
    }
 23fe354:	b007      	add	sp, #28
 23fe356:	bd30      	pop	{r4, r5, pc}

023fe358 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
 23fe358:	b570      	push	{r4, r5, r6, lr}
class IPAddress : public Printable {
 23fe35a:	4604      	mov	r4, r0
 23fe35c:	4606      	mov	r6, r0
      { return _M_ptr; }
 23fe35e:	694d      	ldr	r5, [r1, #20]
 23fe360:	4b04      	ldr	r3, [pc, #16]	; (23fe374 <_ZN9TCPClient8remoteIPEv+0x1c>)
 23fe362:	358c      	adds	r5, #140	; 0x8c
 23fe364:	f844 3b04 	str.w	r3, [r4], #4
 23fe368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe36a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe36c:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 23fe36e:	4630      	mov	r0, r6
 23fe370:	7023      	strb	r3, [r4, #0]
 23fe372:	bd70      	pop	{r4, r5, r6, pc}
 23fe374:	023ffc8c 	.word	0x023ffc8c

023fe378 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
 23fe378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe37c:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
 23fe37e:	2400      	movs	r4, #0
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
 23fe380:	4698      	mov	r8, r3
    stop();
 23fe382:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
 23fe384:	b093      	sub	sp, #76	; 0x4c
    stop();
 23fe386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
 23fe388:	4606      	mov	r6, r0
 23fe38a:	4617      	mov	r7, r2
    stop();
 23fe38c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
 23fe38e:	4628      	mov	r0, r5
 23fe390:	466b      	mov	r3, sp
 23fe392:	4622      	mov	r2, r4
 23fe394:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
 23fe396:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
 23fe398:	f7fe fad4 	bl	23fc944 <netdb_getaddrinfo>
 23fe39c:	4605      	mov	r5, r0
 23fe39e:	2800      	cmp	r0, #0
 23fe3a0:	d163      	bne.n	23fe46a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
 23fe3a2:	9b00      	ldr	r3, [sp, #0]
 23fe3a4:	2b00      	cmp	r3, #0
 23fe3a6:	d04b      	beq.n	23fe440 <_ZN9TCPClient7connectEPKctm+0xc8>
 23fe3a8:	695b      	ldr	r3, [r3, #20]
 23fe3aa:	2b00      	cmp	r3, #0
 23fe3ac:	d048      	beq.n	23fe440 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
 23fe3ae:	a806      	add	r0, sp, #24
 23fe3b0:	f7ff fcf2 	bl	23fdd98 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
 23fe3b4:	9b00      	ldr	r3, [sp, #0]
 23fe3b6:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
 23fe3b8:	7863      	ldrb	r3, [r4, #1]
 23fe3ba:	2b02      	cmp	r3, #2
 23fe3bc:	d104      	bne.n	23fe3c8 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
 23fe3be:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
 23fe3c0:	a806      	add	r0, sp, #24
 23fe3c2:	f7ff ffbb 	bl	23fe33c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
 23fe3c6:	e026      	b.n	23fe416 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
 23fe3c8:	2b0a      	cmp	r3, #10
 23fe3ca:	d124      	bne.n	23fe416 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
 23fe3cc:	2211      	movs	r2, #17
 23fe3ce:	4629      	mov	r1, r5
 23fe3d0:	a801      	add	r0, sp, #4
 23fe3d2:	f000 fdb4 	bl	23fef3e <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
 23fe3d6:	68a3      	ldr	r3, [r4, #8]
 23fe3d8:	2b00      	cmp	r3, #0
 23fe3da:	d038      	beq.n	23fe44e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fe3dc:	f104 0308 	add.w	r3, r4, #8
 23fe3e0:	f10d 0c04 	add.w	ip, sp, #4
 23fe3e4:	3418      	adds	r4, #24
 23fe3e6:	4662      	mov	r2, ip
 23fe3e8:	6818      	ldr	r0, [r3, #0]
 23fe3ea:	6859      	ldr	r1, [r3, #4]
 23fe3ec:	3308      	adds	r3, #8
 23fe3ee:	c203      	stmia	r2!, {r0, r1}
 23fe3f0:	42a3      	cmp	r3, r4
 23fe3f2:	4694      	mov	ip, r2
 23fe3f4:	d1f7      	bne.n	23fe3e6 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
 23fe3f6:	2306      	movs	r3, #6
            addr = IPAddress(a);
 23fe3f8:	a901      	add	r1, sp, #4
 23fe3fa:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
 23fe3fc:	f88d 3014 	strb.w	r3, [sp, #20]
 23fe400:	ac07      	add	r4, sp, #28
            addr = IPAddress(a);
 23fe402:	f7ff fcd7 	bl	23fddb4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fe406:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 23fe40a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 23fe40e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe410:	f8dc 3000 	ldr.w	r3, [ip]
 23fe414:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
 23fe416:	a806      	add	r0, sp, #24
 23fe418:	f7ff fcde 	bl	23fddd8 <_ZNK9IPAddresscvbEv>
        if (addr) {
 23fe41c:	b180      	cbz	r0, 23fe440 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
 23fe41e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
 23fe420:	ac0d      	add	r4, sp, #52	; 0x34
 23fe422:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
 23fe426:	4b12      	ldr	r3, [pc, #72]	; (23fe470 <_ZN9TCPClient7connectEPKctm+0xf8>)
 23fe428:	ad07      	add	r5, sp, #28
 23fe42a:	930c      	str	r3, [sp, #48]	; 0x30
 23fe42c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe42e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe430:	682b      	ldr	r3, [r5, #0]
 23fe432:	463a      	mov	r2, r7
 23fe434:	7023      	strb	r3, [r4, #0]
 23fe436:	4630      	mov	r0, r6
 23fe438:	4643      	mov	r3, r8
 23fe43a:	a90c      	add	r1, sp, #48	; 0x30
 23fe43c:	47c8      	blx	r9
 23fe43e:	4605      	mov	r5, r0
    SCOPE_GUARD({
 23fe440:	9800      	ldr	r0, [sp, #0]
 23fe442:	f7fe fa71 	bl	23fc928 <netdb_freeaddrinfo>
}
 23fe446:	4628      	mov	r0, r5
 23fe448:	b013      	add	sp, #76	; 0x4c
 23fe44a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
 23fe44e:	68e3      	ldr	r3, [r4, #12]
 23fe450:	2b00      	cmp	r3, #0
 23fe452:	d1c3      	bne.n	23fe3dc <_ZN9TCPClient7connectEPKctm+0x64>
 23fe454:	f64f 70ff 	movw	r0, #65535	; 0xffff
 23fe458:	f8d4 9010 	ldr.w	r9, [r4, #16]
 23fe45c:	f7fe fb6e 	bl	23fcb3c <inet_htonl>
 23fe460:	4581      	cmp	r9, r0
 23fe462:	d1bb      	bne.n	23fe3dc <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
 23fe464:	f104 0114 	add.w	r1, r4, #20
 23fe468:	e7aa      	b.n	23fe3c0 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
 23fe46a:	4625      	mov	r5, r4
 23fe46c:	e7e8      	b.n	23fe440 <_ZN9TCPClient7connectEPKctm+0xc8>
 23fe46e:	bf00      	nop
 23fe470:	023ffc8c 	.word	0x023ffc8c

023fe474 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
 23fe474:	b538      	push	{r3, r4, r5, lr}
 23fe476:	6943      	ldr	r3, [r0, #20]
 23fe478:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
 23fe47a:	681a      	ldr	r2, [r3, #0]
 23fe47c:	2a00      	cmp	r2, #0
 23fe47e:	da10      	bge.n	23fe4a2 <_ZN9TCPClient9connectedEv+0x2e>
 23fe480:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23fe484:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 23fe488:	429a      	cmp	r2, r3
 23fe48a:	d10a      	bne.n	23fe4a2 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
 23fe48c:	6803      	ldr	r3, [r0, #0]
 23fe48e:	691b      	ldr	r3, [r3, #16]
 23fe490:	4798      	blx	r3
        if (!rv) {
 23fe492:	4604      	mov	r4, r0
 23fe494:	b928      	cbnz	r0, 23fe4a2 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
 23fe496:	682b      	ldr	r3, [r5, #0]
 23fe498:	4628      	mov	r0, r5
 23fe49a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fe49c:	4798      	blx	r3
        rv = available();
 23fe49e:	4620      	mov	r0, r4
}
 23fe4a0:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
 23fe4a2:	2001      	movs	r0, #1
 23fe4a4:	e7fc      	b.n	23fe4a0 <_ZN9TCPClient9connectedEv+0x2c>

023fe4a6 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
 23fe4a6:	b510      	push	{r4, lr}
 23fe4a8:	6943      	ldr	r3, [r0, #20]
 23fe4aa:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 23fe4ac:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23fe4b0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 23fe4b4:	429a      	cmp	r2, r3
 23fe4b6:	d005      	beq.n	23fe4c4 <_ZN9TCPClient4peekEv+0x1e>
 23fe4b8:	6963      	ldr	r3, [r4, #20]
 23fe4ba:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 23fe4be:	4413      	add	r3, r2
 23fe4c0:	7918      	ldrb	r0, [r3, #4]
}
 23fe4c2:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 23fe4c4:	6803      	ldr	r3, [r0, #0]
 23fe4c6:	691b      	ldr	r3, [r3, #16]
 23fe4c8:	4798      	blx	r3
 23fe4ca:	2800      	cmp	r0, #0
 23fe4cc:	d1f4      	bne.n	23fe4b8 <_ZN9TCPClient4peekEv+0x12>
 23fe4ce:	f04f 30ff 	mov.w	r0, #4294967295
 23fe4d2:	e7f6      	b.n	23fe4c2 <_ZN9TCPClient4peekEv+0x1c>

023fe4d4 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
 23fe4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe4d6:	6943      	ldr	r3, [r0, #20]
 23fe4d8:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
 23fe4da:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23fe4de:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
int TCPClient::read(uint8_t *buffer, size_t size) {
 23fe4e2:	4605      	mov	r5, r0
    if (bufferCount() || available()) {
 23fe4e4:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
 23fe4e6:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
 23fe4e8:	d016      	beq.n	23fe518 <_ZN9TCPClient4readEPhj+0x44>
 23fe4ea:	6969      	ldr	r1, [r5, #20]
        memcpy(buffer, &d_->buffer[d_->offset], read);
 23fe4ec:	4630      	mov	r0, r6
    return d_->total - d_->offset;
 23fe4ee:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 23fe4f2:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
 23fe4f6:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 23fe4f8:	42bc      	cmp	r4, r7
 23fe4fa:	bf28      	it	cs
 23fe4fc:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
 23fe4fe:	3304      	adds	r3, #4
 23fe500:	4622      	mov	r2, r4
 23fe502:	4419      	add	r1, r3
 23fe504:	f000 fd0e 	bl	23fef24 <memcpy>
 23fe508:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
 23fe50a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 23fe50e:	4423      	add	r3, r4
 23fe510:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
 23fe514:	4620      	mov	r0, r4
 23fe516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
 23fe518:	6803      	ldr	r3, [r0, #0]
 23fe51a:	691b      	ldr	r3, [r3, #16]
 23fe51c:	4798      	blx	r3
 23fe51e:	2800      	cmp	r0, #0
 23fe520:	d1e3      	bne.n	23fe4ea <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
 23fe522:	f04f 34ff 	mov.w	r4, #4294967295
 23fe526:	e7f5      	b.n	23fe514 <_ZN9TCPClient4readEPhj+0x40>

023fe528 <_ZN9TCPClient12flush_bufferEv>:
    d_->offset = 0;
 23fe528:	2300      	movs	r3, #0
 23fe52a:	6942      	ldr	r2, [r0, #20]
 23fe52c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 23fe530:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
 23fe532:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
 23fe536:	4770      	bx	lr

023fe538 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
 23fe538:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe53a:	460c      	mov	r4, r1
 23fe53c:	461f      	mov	r7, r3
    stop();
 23fe53e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
 23fe540:	b08b      	sub	sp, #44	; 0x2c
    stop();
 23fe542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
 23fe544:	4605      	mov	r5, r0
 23fe546:	4616      	mov	r6, r2
    stop();
 23fe548:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
 23fe54a:	7d23      	ldrb	r3, [r4, #20]
 23fe54c:	2206      	movs	r2, #6
 23fe54e:	2b04      	cmp	r3, #4
 23fe550:	bf0c      	ite	eq
 23fe552:	2002      	moveq	r0, #2
 23fe554:	200a      	movne	r0, #10
 23fe556:	2101      	movs	r1, #1
 23fe558:	f7fe fc6a 	bl	23fce30 <sock_socket>
 23fe55c:	696b      	ldr	r3, [r5, #20]
 23fe55e:	6018      	str	r0, [r3, #0]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
 23fe560:	696b      	ldr	r3, [r5, #20]
 23fe562:	681b      	ldr	r3, [r3, #0]
 23fe564:	2b00      	cmp	r3, #0
 23fe566:	da07      	bge.n	23fe578 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
    NAMED_SCOPE_GUARD(done, {
 23fe568:	682b      	ldr	r3, [r5, #0]
 23fe56a:	4628      	mov	r0, r5
 23fe56c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
 23fe56e:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
 23fe570:	4798      	blx	r3
}
 23fe572:	4620      	mov	r0, r4
 23fe574:	b00b      	add	sp, #44	; 0x2c
 23fe576:	bdf0      	pop	{r4, r5, r6, r7, pc}
    flush_buffer();
 23fe578:	4628      	mov	r0, r5
 23fe57a:	f7ff ffd5 	bl	23fe528 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
 23fe57e:	b1b7      	cbz	r7, 23fe5ae <_ZN9TCPClient7connectE9IPAddresstm+0x76>
        struct ifreq ifr = {};
 23fe580:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
 23fe582:	a903      	add	r1, sp, #12
 23fe584:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
 23fe586:	9303      	str	r3, [sp, #12]
 23fe588:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
 23fe58c:	f7fe fa66 	bl	23fca5c <if_index_to_name>
 23fe590:	2800      	cmp	r0, #0
 23fe592:	d1e9      	bne.n	23fe568 <_ZN9TCPClient7connectE9IPAddresstm+0x30>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
 23fe594:	2306      	movs	r3, #6
 23fe596:	6968      	ldr	r0, [r5, #20]
 23fe598:	9300      	str	r3, [sp, #0]
 23fe59a:	f241 020b 	movw	r2, #4107	; 0x100b
 23fe59e:	f640 71ff 	movw	r1, #4095	; 0xfff
 23fe5a2:	6800      	ldr	r0, [r0, #0]
 23fe5a4:	ab03      	add	r3, sp, #12
 23fe5a6:	f7fe fbfd 	bl	23fcda4 <sock_setsockopt>
 23fe5aa:	2800      	cmp	r0, #0
 23fe5ac:	d1dc      	bne.n	23fe568 <_ZN9TCPClient7connectE9IPAddresstm+0x30>
    sockaddr_storage saddr = {};
 23fe5ae:	221c      	movs	r2, #28
 23fe5b0:	2100      	movs	r1, #0
 23fe5b2:	a803      	add	r0, sp, #12
 23fe5b4:	f000 fcc3 	bl	23fef3e <memset>
    if (ip.version() == 4) {
 23fe5b8:	7d23      	ldrb	r3, [r4, #20]
 23fe5ba:	2b04      	cmp	r3, #4
 23fe5bc:	d11d      	bne.n	23fe5fa <_ZN9TCPClient7connectE9IPAddresstm+0xc2>
        s->sin_len = sizeof(saddr);
 23fe5be:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
 23fe5c2:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
 23fe5c4:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
 23fe5c8:	f7fe fac6 	bl	23fcb58 <inet_htons>
 23fe5cc:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
 23fe5d0:	6860      	ldr	r0, [r4, #4]
 23fe5d2:	f7fe fab3 	bl	23fcb3c <inet_htonl>
 23fe5d6:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
 23fe5d8:	696b      	ldr	r3, [r5, #20]
 23fe5da:	221c      	movs	r2, #28
 23fe5dc:	6818      	ldr	r0, [r3, #0]
 23fe5de:	a903      	add	r1, sp, #12
 23fe5e0:	f7fe fbfc 	bl	23fcddc <sock_connect>
 23fe5e4:	2800      	cmp	r0, #0
 23fe5e6:	d1bf      	bne.n	23fe568 <_ZN9TCPClient7connectE9IPAddresstm+0x30>
 23fe5e8:	696d      	ldr	r5, [r5, #20]
 23fe5ea:	3404      	adds	r4, #4
 23fe5ec:	358c      	adds	r5, #140	; 0x8c
 23fe5ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23fe5f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23fe5f2:	6823      	ldr	r3, [r4, #0]
    return 1; // success
 23fe5f4:	2401      	movs	r4, #1
 23fe5f6:	702b      	strb	r3, [r5, #0]
 23fe5f8:	e7bb      	b.n	23fe572 <_ZN9TCPClient7connectE9IPAddresstm+0x3a>
        s->sin6_len = sizeof(saddr);
 23fe5fa:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
 23fe5fe:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
 23fe600:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
 23fe604:	f7fe faa8 	bl	23fcb58 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
 23fe608:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
 23fe60a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
 23fe60e:	1d23      	adds	r3, r4, #4
 23fe610:	f104 0714 	add.w	r7, r4, #20
 23fe614:	4632      	mov	r2, r6
 23fe616:	6818      	ldr	r0, [r3, #0]
 23fe618:	6859      	ldr	r1, [r3, #4]
 23fe61a:	3308      	adds	r3, #8
 23fe61c:	c203      	stmia	r2!, {r0, r1}
 23fe61e:	42bb      	cmp	r3, r7
 23fe620:	4616      	mov	r6, r2
 23fe622:	d1f7      	bne.n	23fe614 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>
 23fe624:	e7d8      	b.n	23fe5d8 <_ZN9TCPClient7connectE9IPAddresstm+0xa0>
	...

023fe628 <_ZN9TCPClient9availableEv>:
{
 23fe628:	b530      	push	{r4, r5, lr}
 23fe62a:	6942      	ldr	r2, [r0, #20]
 23fe62c:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
 23fe62e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
 23fe632:	b08b      	sub	sp, #44	; 0x2c
    if (d_->total && (d_->offset == d_->total)) {
 23fe634:	b12b      	cbz	r3, 23fe642 <_ZN9TCPClient9availableEv+0x1a>
 23fe636:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 23fe63a:	429a      	cmp	r2, r3
 23fe63c:	d101      	bne.n	23fe642 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
 23fe63e:	f7ff ff73 	bl	23fe528 <_ZN9TCPClient12flush_bufferEv>
 23fe642:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
 23fe644:	6808      	ldr	r0, [r1, #0]
 23fe646:	2800      	cmp	r0, #0
 23fe648:	db18      	blt.n	23fe67c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
 23fe64a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
 23fe64e:	2d7f      	cmp	r5, #127	; 0x7f
 23fe650:	d814      	bhi.n	23fe67c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
 23fe652:	3104      	adds	r1, #4
 23fe654:	2308      	movs	r3, #8
 23fe656:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
 23fe65a:	4429      	add	r1, r5
 23fe65c:	f7fe fbcc 	bl	23fcdf8 <sock_recv>
            if (ret > 0) {
 23fe660:	2800      	cmp	r0, #0
 23fe662:	dd13      	ble.n	23fe68c <_ZN9TCPClient9availableEv+0x64>
 23fe664:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
 23fe666:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23fe66a:	b90a      	cbnz	r2, 23fe670 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
 23fe66c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 23fe670:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
 23fe672:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 23fe676:	4410      	add	r0, r2
 23fe678:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
 23fe67c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
 23fe67e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
 23fe682:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 23fe686:	1ac0      	subs	r0, r0, r3
 23fe688:	b00b      	add	sp, #44	; 0x2c
 23fe68a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
 23fe68c:	f7fe feb6 	bl	23fd3fc <__errno>
 23fe690:	6803      	ldr	r3, [r0, #0]
 23fe692:	2b0b      	cmp	r3, #11
 23fe694:	d0f2      	beq.n	23fe67c <_ZN9TCPClient9availableEv+0x54>
 23fe696:	f7fe feb1 	bl	23fd3fc <__errno>
 23fe69a:	6803      	ldr	r3, [r0, #0]
 23fe69c:	2b0b      	cmp	r3, #11
 23fe69e:	d0ed      	beq.n	23fe67c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
 23fe6a0:	2320      	movs	r3, #32
 23fe6a2:	2500      	movs	r5, #0
 23fe6a4:	e9cd 3502 	strd	r3, r5, [sp, #8]
 23fe6a8:	f7fe fea8 	bl	23fd3fc <__errno>
 23fe6ac:	6803      	ldr	r3, [r0, #0]
 23fe6ae:	aa02      	add	r2, sp, #8
 23fe6b0:	9301      	str	r3, [sp, #4]
 23fe6b2:	4b08      	ldr	r3, [pc, #32]	; (23fe6d4 <_ZN9TCPClient9availableEv+0xac>)
 23fe6b4:	2032      	movs	r0, #50	; 0x32
 23fe6b6:	4908      	ldr	r1, [pc, #32]	; (23fe6d8 <_ZN9TCPClient9availableEv+0xb0>)
 23fe6b8:	9300      	str	r3, [sp, #0]
 23fe6ba:	462b      	mov	r3, r5
 23fe6bc:	f7fe fd08 	bl	23fd0d0 <log_message>
                    sock_close(d_->sock);
 23fe6c0:	6963      	ldr	r3, [r4, #20]
 23fe6c2:	6818      	ldr	r0, [r3, #0]
 23fe6c4:	f7fe fb7c 	bl	23fcdc0 <sock_close>
                    d_->sock = -1;
 23fe6c8:	f04f 32ff 	mov.w	r2, #4294967295
 23fe6cc:	6963      	ldr	r3, [r4, #20]
 23fe6ce:	601a      	str	r2, [r3, #0]
 23fe6d0:	e7d4      	b.n	23fe67c <_ZN9TCPClient9availableEv+0x54>
 23fe6d2:	bf00      	nop
 23fe6d4:	023ffd33 	.word	0x023ffd33
 23fe6d8:	023ffd2c 	.word	0x023ffd2c

023fe6dc <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
 23fe6dc:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
 23fe6de:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
 23fe6e0:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
 23fe6e2:	6818      	ldr	r0, [r3, #0]
 23fe6e4:	2800      	cmp	r0, #0
 23fe6e6:	db01      	blt.n	23fe6ec <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
 23fe6e8:	f7fe fb6a 	bl	23fcdc0 <sock_close>
    d_->sock = -1;
 23fe6ec:	f04f 32ff 	mov.w	r2, #4294967295
 23fe6f0:	6963      	ldr	r3, [r4, #20]
    void clear() { memset(&address, 0, sizeof (address)); }
 23fe6f2:	2100      	movs	r1, #0
 23fe6f4:	601a      	str	r2, [r3, #0]
 23fe6f6:	6960      	ldr	r0, [r4, #20]
 23fe6f8:	2211      	movs	r2, #17
 23fe6fa:	308c      	adds	r0, #140	; 0x8c
 23fe6fc:	f000 fc1f 	bl	23fef3e <memset>
    flush_buffer();
 23fe700:	4620      	mov	r0, r4
}
 23fe702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
 23fe706:	f7ff bf0f 	b.w	23fe528 <_ZN9TCPClient12flush_bufferEv>

023fe70a <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
        : sock(sock),
          offset(0),
          total(0) {
 23fe70a:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
 23fe70c:	b510      	push	{r4, lr}
 23fe70e:	4604      	mov	r4, r0
          total(0) {
 23fe710:	6001      	str	r1, [r0, #0]
 23fe712:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 23fe716:	3088      	adds	r0, #136	; 0x88
 23fe718:	f7ff fb3e 	bl	23fdd98 <_ZN9IPAddressC1Ev>
}
 23fe71c:	4620      	mov	r0, r4
 23fe71e:	bd10      	pop	{r4, pc}

023fe720 <_ZN9TCPClientC1Ei>:
 23fe720:	2300      	movs	r3, #0
 23fe722:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
TCPClient::TCPClient(sock_handle_t sock)
 23fe726:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fe728:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
 23fe72c:	4a0e      	ldr	r2, [pc, #56]	; (23fe768 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 23fe72e:	6103      	str	r3, [r0, #16]
 23fe730:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23fe732:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
 23fe734:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 23fe736:	20ac      	movs	r0, #172	; 0xac
 23fe738:	9101      	str	r1, [sp, #4]
 23fe73a:	f7fb ff68 	bl	23fa60e <_Znwj>
	  auto __pi = ::new (__mem)
 23fe73e:	1e05      	subs	r5, r0, #0
 23fe740:	f105 060c 	add.w	r6, r5, #12
 23fe744:	d008      	beq.n	23fe758 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
 23fe746:	2301      	movs	r3, #1
 23fe748:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
 23fe74c:	4b07      	ldr	r3, [pc, #28]	; (23fe76c <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 23fe74e:	4630      	mov	r0, r6
 23fe750:	9901      	ldr	r1, [sp, #4]
 23fe752:	602b      	str	r3, [r5, #0]
 23fe754:	f7ff ffd9 	bl	23fe70a <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
 23fe758:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
 23fe75a:	e9c4 6505 	strd	r6, r5, [r4, #20]
 23fe75e:	f7ff fee3 	bl	23fe528 <_ZN9TCPClient12flush_bufferEv>
}
 23fe762:	b002      	add	sp, #8
 23fe764:	bd70      	pop	{r4, r5, r6, pc}
 23fe766:	bf00      	nop
 23fe768:	023ffd68 	.word	0x023ffd68
 23fe76c:	023ffd4c 	.word	0x023ffd4c

023fe770 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
 23fe770:	b510      	push	{r4, lr}
 23fe772:	4604      	mov	r4, r0
        : TCPClient(-1) {
 23fe774:	f04f 31ff 	mov.w	r1, #4294967295
 23fe778:	f7ff ffd2 	bl	23fe720 <_ZN9TCPClientC1Ei>
}
 23fe77c:	4620      	mov	r0, r4
 23fe77e:	bd10      	pop	{r4, pc}

023fe780 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
 23fe780:	b510      	push	{r4, lr}
 23fe782:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 23fe784:	6800      	ldr	r0, [r0, #0]
 23fe786:	2800      	cmp	r0, #0
 23fe788:	db01      	blt.n	23fe78e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
 23fe78a:	f7fe fb19 	bl	23fcdc0 <sock_close>
    }
}
 23fe78e:	4620      	mov	r0, r4
 23fe790:	bd10      	pop	{r4, pc}

023fe792 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 23fe792:	300c      	adds	r0, #12
 23fe794:	f7ff bff4 	b.w	23fe780 <_ZN9TCPClient4DataD1Ev>

023fe798 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fe798:	2200      	movs	r2, #0
 23fe79a:	6840      	ldr	r0, [r0, #4]
 23fe79c:	4611      	mov	r1, r2
 23fe79e:	f7fe bd15 	b.w	23fd1cc <network_ready>

023fe7a2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fe7a2:	2200      	movs	r2, #0
 23fe7a4:	6840      	ldr	r0, [r0, #4]
 23fe7a6:	4611      	mov	r1, r2
 23fe7a8:	f7fe bd48 	b.w	23fd23c <network_listening>

023fe7ac <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fe7ac:	2200      	movs	r2, #0
 23fe7ae:	6840      	ldr	r0, [r0, #4]
 23fe7b0:	4611      	mov	r1, r2
 23fe7b2:	f7fe bd7b 	b.w	23fd2ac <network_get_listen_timeout>

023fe7b6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fe7b6:	2200      	movs	r2, #0
 23fe7b8:	6840      	ldr	r0, [r0, #4]
 23fe7ba:	f7fe bd69 	b.w	23fd290 <network_set_listen_timeout>

023fe7be <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fe7be:	2200      	movs	r2, #0
 23fe7c0:	6840      	ldr	r0, [r0, #4]
 23fe7c2:	f081 0101 	eor.w	r1, r1, #1
 23fe7c6:	f7fe bd2b 	b.w	23fd220 <network_listen>

023fe7ca <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fe7ca:	2300      	movs	r3, #0
 23fe7cc:	6840      	ldr	r0, [r0, #4]
 23fe7ce:	461a      	mov	r2, r3
 23fe7d0:	4619      	mov	r1, r3
 23fe7d2:	f7fe bd17 	b.w	23fd204 <network_off>

023fe7d6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fe7d6:	2300      	movs	r3, #0
 23fe7d8:	6840      	ldr	r0, [r0, #4]
 23fe7da:	461a      	mov	r2, r3
 23fe7dc:	4619      	mov	r1, r3
 23fe7de:	f7fe bd03 	b.w	23fd1e8 <network_on>

023fe7e2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fe7e2:	2200      	movs	r2, #0
 23fe7e4:	6840      	ldr	r0, [r0, #4]
 23fe7e6:	4611      	mov	r1, r2
 23fe7e8:	f7fe bcd4 	b.w	23fd194 <network_connecting>

023fe7ec <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fe7ec:	2200      	movs	r2, #0
 23fe7ee:	2102      	movs	r1, #2
 23fe7f0:	6840      	ldr	r0, [r0, #4]
 23fe7f2:	f7fe bcdd 	b.w	23fd1b0 <network_disconnect>

023fe7f6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fe7f6:	2300      	movs	r3, #0
 23fe7f8:	6840      	ldr	r0, [r0, #4]
 23fe7fa:	461a      	mov	r2, r3
 23fe7fc:	f7fe bcbc 	b.w	23fd178 <network_connect>

023fe800 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fe800:	2204      	movs	r2, #4
 23fe802:	4b02      	ldr	r3, [pc, #8]	; (23fe80c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fe804:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fe806:	4a02      	ldr	r2, [pc, #8]	; (23fe810 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fe808:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fe80a:	4770      	bx	lr
 23fe80c:	1007aef4 	.word	0x1007aef4
 23fe810:	023ffdb8 	.word	0x023ffdb8

023fe814 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fe814:	2300      	movs	r3, #0
 23fe816:	6840      	ldr	r0, [r0, #4]
 23fe818:	461a      	mov	r2, r3
 23fe81a:	f7fe bcad 	b.w	23fd178 <network_connect>

023fe81e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fe81e:	2200      	movs	r2, #0
 23fe820:	2102      	movs	r1, #2
 23fe822:	6840      	ldr	r0, [r0, #4]
 23fe824:	f7fe bcc4 	b.w	23fd1b0 <network_disconnect>

023fe828 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fe828:	2200      	movs	r2, #0
 23fe82a:	6840      	ldr	r0, [r0, #4]
 23fe82c:	4611      	mov	r1, r2
 23fe82e:	f7fe bcb1 	b.w	23fd194 <network_connecting>

023fe832 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fe832:	2200      	movs	r2, #0
 23fe834:	6840      	ldr	r0, [r0, #4]
 23fe836:	4611      	mov	r1, r2
 23fe838:	f7fe bcc8 	b.w	23fd1cc <network_ready>

023fe83c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fe83c:	2300      	movs	r3, #0
 23fe83e:	6840      	ldr	r0, [r0, #4]
 23fe840:	461a      	mov	r2, r3
 23fe842:	4619      	mov	r1, r3
 23fe844:	f7fe bcd0 	b.w	23fd1e8 <network_on>

023fe848 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fe848:	2300      	movs	r3, #0
 23fe84a:	6840      	ldr	r0, [r0, #4]
 23fe84c:	461a      	mov	r2, r3
 23fe84e:	4619      	mov	r1, r3
 23fe850:	f7fe bcd8 	b.w	23fd204 <network_off>

023fe854 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fe854:	2100      	movs	r1, #0
 23fe856:	6840      	ldr	r0, [r0, #4]
 23fe858:	f7fe bd36 	b.w	23fd2c8 <network_is_on>

023fe85c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fe85c:	2100      	movs	r1, #0
 23fe85e:	6840      	ldr	r0, [r0, #4]
 23fe860:	f7fe bd40 	b.w	23fd2e4 <network_is_off>

023fe864 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fe864:	2200      	movs	r2, #0
 23fe866:	6840      	ldr	r0, [r0, #4]
 23fe868:	f081 0101 	eor.w	r1, r1, #1
 23fe86c:	f7fe bcd8 	b.w	23fd220 <network_listen>

023fe870 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fe870:	2200      	movs	r2, #0
 23fe872:	6840      	ldr	r0, [r0, #4]
 23fe874:	f7fe bd0c 	b.w	23fd290 <network_set_listen_timeout>

023fe878 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fe878:	2200      	movs	r2, #0
 23fe87a:	6840      	ldr	r0, [r0, #4]
 23fe87c:	4611      	mov	r1, r2
 23fe87e:	f7fe bd15 	b.w	23fd2ac <network_get_listen_timeout>

023fe882 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fe882:	2200      	movs	r2, #0
 23fe884:	6840      	ldr	r0, [r0, #4]
 23fe886:	4611      	mov	r1, r2
 23fe888:	f7fe bcd8 	b.w	23fd23c <network_listening>

023fe88c <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
 23fe88c:	2100      	movs	r1, #0
 23fe88e:	6840      	ldr	r0, [r0, #4]
 23fe890:	f7fe bd44 	b.w	23fd31c <network_is_preferred>

023fe894 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fe894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe898:	b095      	sub	sp, #84	; 0x54
 23fe89a:	4614      	mov	r4, r2
 23fe89c:	460d      	mov	r5, r1
 23fe89e:	4607      	mov	r7, r0
    IPAddress addr;
 23fe8a0:	f7ff fa7a 	bl	23fdd98 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fe8a4:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fe8a6:	221c      	movs	r2, #28
 23fe8a8:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fe8aa:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fe8ac:	f000 fb47 	bl	23fef3e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fe8b0:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fe8b2:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fe8b4:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fe8b6:	2100      	movs	r1, #0
 23fe8b8:	466b      	mov	r3, sp
 23fe8ba:	aa0c      	add	r2, sp, #48	; 0x30
 23fe8bc:	f7fe f842 	bl	23fc944 <netdb_getaddrinfo>
    if (!r) {
 23fe8c0:	4604      	mov	r4, r0
 23fe8c2:	2800      	cmp	r0, #0
 23fe8c4:	d14b      	bne.n	23fe95e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fe8c6:	4602      	mov	r2, r0
 23fe8c8:	2101      	movs	r1, #1
 23fe8ca:	6868      	ldr	r0, [r5, #4]
 23fe8cc:	f7fe fc7e 	bl	23fd1cc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fe8d0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fe8d2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fe8d4:	4622      	mov	r2, r4
 23fe8d6:	6868      	ldr	r0, [r5, #4]
 23fe8d8:	f7fe fc78 	bl	23fd1cc <network_ready>
        bool ok = false;
 23fe8dc:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fe8de:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fe8e0:	9e00      	ldr	r6, [sp, #0]
 23fe8e2:	2e00      	cmp	r6, #0
 23fe8e4:	d03b      	beq.n	23fe95e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fe8e6:	2900      	cmp	r1, #0
 23fe8e8:	d139      	bne.n	23fe95e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fe8ea:	6873      	ldr	r3, [r6, #4]
 23fe8ec:	2b02      	cmp	r3, #2
 23fe8ee:	d003      	beq.n	23fe8f8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fe8f0:	2b0a      	cmp	r3, #10
 23fe8f2:	d011      	beq.n	23fe918 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fe8f4:	69f6      	ldr	r6, [r6, #28]
 23fe8f6:	e7f4      	b.n	23fe8e2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fe8f8:	f1b8 0f00 	cmp.w	r8, #0
 23fe8fc:	d0fa      	beq.n	23fe8f4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fe8fe:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fe900:	a806      	add	r0, sp, #24
 23fe902:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fe904:	1d3c      	adds	r4, r7, #4
 23fe906:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fe908:	f7ff fa8a 	bl	23fde20 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fe90c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe90e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe910:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fe912:	4641      	mov	r1, r8
 23fe914:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fe916:	e7ed      	b.n	23fe8f4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fe918:	f1b9 0f00 	cmp.w	r9, #0
 23fe91c:	d0ea      	beq.n	23fe8f4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fe91e:	2210      	movs	r2, #16
 23fe920:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fe922:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fe924:	f000 fb0b 	bl	23fef3e <memset>
                    a.v = 6;
 23fe928:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fe92a:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fe92c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fe930:	f104 0308 	add.w	r3, r4, #8
 23fe934:	3418      	adds	r4, #24
 23fe936:	462a      	mov	r2, r5
 23fe938:	6818      	ldr	r0, [r3, #0]
 23fe93a:	6859      	ldr	r1, [r3, #4]
 23fe93c:	3308      	adds	r3, #8
 23fe93e:	c203      	stmia	r2!, {r0, r1}
 23fe940:	42a3      	cmp	r3, r4
 23fe942:	4615      	mov	r5, r2
 23fe944:	d1f7      	bne.n	23fe936 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fe946:	a901      	add	r1, sp, #4
 23fe948:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fe94a:	1d3c      	adds	r4, r7, #4
 23fe94c:	ad07      	add	r5, sp, #28
 23fe94e:	f7ff fa31 	bl	23fddb4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fe952:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe954:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe956:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fe958:	4649      	mov	r1, r9
 23fe95a:	7023      	strb	r3, [r4, #0]
                    break;
 23fe95c:	e7ca      	b.n	23fe8f4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fe95e:	9800      	ldr	r0, [sp, #0]
 23fe960:	f7fd ffe2 	bl	23fc928 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fe964:	4638      	mov	r0, r7
 23fe966:	b015      	add	sp, #84	; 0x54
 23fe968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fe96c <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
 23fe96c:	3803      	subs	r0, #3
 23fe96e:	2802      	cmp	r0, #2
 23fe970:	bf9a      	itte	ls
 23fe972:	4b02      	ldrls	r3, [pc, #8]	; (23fe97c <_ZN5spark12NetworkClass4fromEm+0x10>)
 23fe974:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
 23fe978:	4801      	ldrhi	r0, [pc, #4]	; (23fe980 <_ZN5spark12NetworkClass4fromEm+0x14>)
}
 23fe97a:	4770      	bx	lr
 23fe97c:	023ffdf4 	.word	0x023ffdf4
 23fe980:	1007aefc 	.word	0x1007aefc

023fe984 <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
 23fe984:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
 23fe986:	2200      	movs	r2, #0
 23fe988:	6840      	ldr	r0, [r0, #4]
 23fe98a:	f7fe fcb9 	bl	23fd300 <network_prefer>
}
 23fe98e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
 23fe992:	f7ff bfeb 	b.w	23fe96c <_ZN5spark12NetworkClass4fromEm>
	...

023fe998 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fe998:	4b02      	ldr	r3, [pc, #8]	; (23fe9a4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fe99a:	4a03      	ldr	r2, [pc, #12]	; (23fe9a8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fe99c:	601a      	str	r2, [r3, #0]
 23fe99e:	2200      	movs	r2, #0
 23fe9a0:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fe9a2:	4770      	bx	lr
 23fe9a4:	1007aefc 	.word	0x1007aefc
 23fe9a8:	023ffe08 	.word	0x023ffe08

023fe9ac <getPinMode>:
 * AN_OUTPUT = 7
 * PIN_MODE_NONE = 255
 */
PinMode getPinMode(uint16_t pin)
{
  return hal_gpio_get_mode(pin);
 23fe9ac:	f7fd bff4 	b.w	23fc998 <hal_gpio_get_mode>

023fe9b0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23fe9b0:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23fe9b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe9b4:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23fe9b6:	d902      	bls.n	23fe9be <pinAvailable+0xe>
    return false;
 23fe9b8:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23fe9ba:	b003      	add	sp, #12
 23fe9bc:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fe9be:	f1a0 030f 	sub.w	r3, r0, #15
 23fe9c2:	2b02      	cmp	r3, #2
 23fe9c4:	d90b      	bls.n	23fe9de <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23fe9c6:	2801      	cmp	r0, #1
 23fe9c8:	d821      	bhi.n	23fea0e <pinAvailable+0x5e>
 23fe9ca:	f000 f969 	bl	23feca0 <_Z19__fetch_global_Wirev>
 23fe9ce:	2100      	movs	r1, #0
 23fe9d0:	7c00      	ldrb	r0, [r0, #16]
 23fe9d2:	f7fe f9bd 	bl	23fcd50 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fe9d6:	f080 0001 	eor.w	r0, r0, #1
 23fe9da:	b2c0      	uxtb	r0, r0
 23fe9dc:	e7ed      	b.n	23fe9ba <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fe9de:	4d11      	ldr	r5, [pc, #68]	; (23fea24 <pinAvailable+0x74>)
 23fe9e0:	e8d5 1f8f 	ldab	r1, [r5]
 23fe9e4:	f011 0101 	ands.w	r1, r1, #1
 23fe9e8:	d10b      	bne.n	23fea02 <pinAvailable+0x52>
 23fe9ea:	4628      	mov	r0, r5
 23fe9ec:	9101      	str	r1, [sp, #4]
 23fe9ee:	f7fb fe21 	bl	23fa634 <__cxa_guard_acquire>
 23fe9f2:	9901      	ldr	r1, [sp, #4]
 23fe9f4:	b128      	cbz	r0, 23fea02 <pinAvailable+0x52>
 23fe9f6:	480c      	ldr	r0, [pc, #48]	; (23fea28 <pinAvailable+0x78>)
 23fe9f8:	f7fe fd6e 	bl	23fd4d8 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fe9fc:	4628      	mov	r0, r5
 23fe9fe:	f7fb fe1e 	bl	23fa63e <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fea02:	4b09      	ldr	r3, [pc, #36]	; (23fea28 <pinAvailable+0x78>)
 23fea04:	7818      	ldrb	r0, [r3, #0]
 23fea06:	f7fe fa75 	bl	23fcef4 <hal_spi_is_enabled>
 23fea0a:	2800      	cmp	r0, #0
 23fea0c:	d1d4      	bne.n	23fe9b8 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fea0e:	3c08      	subs	r4, #8
 23fea10:	2c01      	cmp	r4, #1
 23fea12:	d805      	bhi.n	23fea20 <pinAvailable+0x70>
 23fea14:	f000 f898 	bl	23feb48 <_Z22__fetch_global_Serial1v>
 23fea18:	7c00      	ldrb	r0, [r0, #16]
 23fea1a:	f7fe f8f1 	bl	23fcc00 <hal_usart_is_enabled>
 23fea1e:	e7da      	b.n	23fe9d6 <pinAvailable+0x26>
  return true; // 'pin' is available
 23fea20:	2001      	movs	r0, #1
 23fea22:	e7ca      	b.n	23fe9ba <pinAvailable+0xa>
 23fea24:	1007ae10 	.word	0x1007ae10
 23fea28:	1007ae14 	.word	0x1007ae14

023fea2c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fea2c:	281b      	cmp	r0, #27
{
 23fea2e:	b538      	push	{r3, r4, r5, lr}
 23fea30:	4604      	mov	r4, r0
 23fea32:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fea34:	d80a      	bhi.n	23fea4c <pinMode+0x20>
 23fea36:	29ff      	cmp	r1, #255	; 0xff
 23fea38:	d008      	beq.n	23fea4c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23fea3a:	f7ff ffb9 	bl	23fe9b0 <pinAvailable>
 23fea3e:	b128      	cbz	r0, 23fea4c <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23fea40:	4629      	mov	r1, r5
 23fea42:	4620      	mov	r0, r4
}
 23fea44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23fea48:	f7fd bf98 	b.w	23fc97c <hal_gpio_mode>
}
 23fea4c:	bd38      	pop	{r3, r4, r5, pc}

023fea4e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23fea4e:	b538      	push	{r3, r4, r5, lr}
 23fea50:	4604      	mov	r4, r0
 23fea52:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23fea54:	f7fd ffa0 	bl	23fc998 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23fea58:	28ff      	cmp	r0, #255	; 0xff
 23fea5a:	d010      	beq.n	23fea7e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23fea5c:	2806      	cmp	r0, #6
 23fea5e:	d804      	bhi.n	23fea6a <digitalWrite+0x1c>
 23fea60:	234d      	movs	r3, #77	; 0x4d
 23fea62:	fa23 f000 	lsr.w	r0, r3, r0
 23fea66:	07c3      	lsls	r3, r0, #31
 23fea68:	d409      	bmi.n	23fea7e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23fea6a:	4620      	mov	r0, r4
 23fea6c:	f7ff ffa0 	bl	23fe9b0 <pinAvailable>
 23fea70:	b128      	cbz	r0, 23fea7e <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23fea72:	4629      	mov	r1, r5
 23fea74:	4620      	mov	r0, r4
}
 23fea76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23fea7a:	f7fd bf9b 	b.w	23fc9b4 <hal_gpio_write>
}
 23fea7e:	bd38      	pop	{r3, r4, r5, pc}

023fea80 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
 23fea80:	b510      	push	{r4, lr}
 23fea82:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
 23fea84:	f7fd ff88 	bl	23fc998 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 23fea88:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 23fea8a:	b2db      	uxtb	r3, r3
 23fea8c:	2b01      	cmp	r3, #1
 23fea8e:	d908      	bls.n	23feaa2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 23fea90:	4620      	mov	r0, r4
 23fea92:	f7ff ff8d 	bl	23fe9b0 <pinAvailable>
 23fea96:	b120      	cbz	r0, 23feaa2 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
 23fea98:	4620      	mov	r0, r4
}
 23fea9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
 23fea9e:	f7fd bf97 	b.w	23fc9d0 <hal_gpio_read>
}
 23feaa2:	2000      	movs	r0, #0
 23feaa4:	bd10      	pop	{r4, pc}

023feaa6 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
 23feaa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23feaaa:	4690      	mov	r8, r2
 23feaac:	461f      	mov	r7, r3
 23feaae:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
 23feab0:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
 23feab2:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
 23feab4:	f1c4 0107 	rsb	r1, r4, #7
 23feab8:	f1b8 0f00 	cmp.w	r8, #0
 23feabc:	d112      	bne.n	23feae4 <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
 23feabe:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
 23feac2:	4630      	mov	r0, r6
 23feac4:	f001 0101 	and.w	r1, r1, #1
 23feac8:	f7ff ffc1 	bl	23fea4e <digitalWrite>
    digitalWrite(clockPin, HIGH);
 23feacc:	2101      	movs	r1, #1
 23feace:	4628      	mov	r0, r5
 23fead0:	f7ff ffbd 	bl	23fea4e <digitalWrite>
    digitalWrite(clockPin, LOW);
 23fead4:	2100      	movs	r1, #0
 23fead6:	4628      	mov	r0, r5
 23fead8:	f7ff ffb9 	bl	23fea4e <digitalWrite>
  for (i = 0; i < 8; i++)  {
 23feadc:	3c01      	subs	r4, #1
 23feade:	d2e9      	bcs.n	23feab4 <shiftOut+0xe>
  }
}
 23feae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
 23feae4:	fa47 f104 	asr.w	r1, r7, r4
 23feae8:	e7eb      	b.n	23feac2 <shiftOut+0x1c>

023feaea <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23feaea:	4770      	bx	lr

023feaec <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23feaec:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23feaee:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23feaf0:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23feaf2:	462a      	mov	r2, r5
 23feaf4:	2100      	movs	r1, #0
 23feaf6:	f000 fa22 	bl	23fef3e <memset>
 23feafa:	8025      	strh	r5, [r4, #0]
 23feafc:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23feafe:	4907      	ldr	r1, [pc, #28]	; (23feb1c <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23feb00:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23feb02:	8125      	strh	r5, [r4, #8]
 23feb04:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23feb06:	f000 f8ef 	bl	23fece8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23feb0a:	4904      	ldr	r1, [pc, #16]	; (23feb1c <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23feb0c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23feb0e:	4628      	mov	r0, r5
 23feb10:	f000 f8ea 	bl	23fece8 <_ZnajRKSt9nothrow_t>
    };
 23feb14:	60e0      	str	r0, [r4, #12]
}
 23feb16:	4620      	mov	r0, r4
 23feb18:	bd38      	pop	{r3, r4, r5, pc}
 23feb1a:	bf00      	nop
 23feb1c:	023ffe44 	.word	0x023ffe44

023feb20 <__tcf_2>:
 23feb20:	4770      	bx	lr

023feb22 <__tcf_1>:
 23feb22:	4770      	bx	lr

023feb24 <_Z20acquireSerial1Bufferv>:
{
 23feb24:	b510      	push	{r4, lr}
 23feb26:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23feb28:	f7ff ffe0 	bl	23feaec <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23feb2c:	4620      	mov	r0, r4
 23feb2e:	bd10      	pop	{r4, pc}

023feb30 <_Z20acquireSerial2Bufferv>:
 23feb30:	b510      	push	{r4, lr}
 23feb32:	4604      	mov	r4, r0
 23feb34:	f7ff ffda 	bl	23feaec <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23feb38:	4620      	mov	r0, r4
 23feb3a:	bd10      	pop	{r4, pc}

023feb3c <_Z20acquireSerial3Bufferv>:
 23feb3c:	b510      	push	{r4, lr}
 23feb3e:	4604      	mov	r4, r0
 23feb40:	f7ff ffd4 	bl	23feaec <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23feb44:	4620      	mov	r0, r4
 23feb46:	bd10      	pop	{r4, pc}

023feb48 <_Z22__fetch_global_Serial1v>:
{
 23feb48:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23feb4a:	4d0e      	ldr	r5, [pc, #56]	; (23feb84 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23feb4c:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23feb4e:	e8d5 1f8f 	ldab	r1, [r5]
 23feb52:	f011 0401 	ands.w	r4, r1, #1
 23feb56:	d111      	bne.n	23feb7c <_Z22__fetch_global_Serial1v+0x34>
 23feb58:	4628      	mov	r0, r5
 23feb5a:	f7fb fd6b 	bl	23fa634 <__cxa_guard_acquire>
 23feb5e:	b168      	cbz	r0, 23feb7c <_Z22__fetch_global_Serial1v+0x34>
 23feb60:	a801      	add	r0, sp, #4
 23feb62:	f7ff ffdf 	bl	23feb24 <_Z20acquireSerial1Bufferv>
 23feb66:	4621      	mov	r1, r4
 23feb68:	aa01      	add	r2, sp, #4
 23feb6a:	4807      	ldr	r0, [pc, #28]	; (23feb88 <_Z22__fetch_global_Serial1v+0x40>)
 23feb6c:	f7ff fa8e 	bl	23fe08c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23feb70:	4628      	mov	r0, r5
 23feb72:	f7fb fd64 	bl	23fa63e <__cxa_guard_release>
 23feb76:	4805      	ldr	r0, [pc, #20]	; (23feb8c <_Z22__fetch_global_Serial1v+0x44>)
 23feb78:	f000 f9ce 	bl	23fef18 <atexit>
    return serial1;
}
 23feb7c:	4802      	ldr	r0, [pc, #8]	; (23feb88 <_Z22__fetch_global_Serial1v+0x40>)
 23feb7e:	b007      	add	sp, #28
 23feb80:	bd30      	pop	{r4, r5, pc}
 23feb82:	bf00      	nop
 23feb84:	1007af04 	.word	0x1007af04
 23feb88:	1007af10 	.word	0x1007af10
 23feb8c:	023feaeb 	.word	0x023feaeb

023feb90 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23feb90:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23feb92:	4c0d      	ldr	r4, [pc, #52]	; (23febc8 <_Z22__fetch_global_Serial2v+0x38>)
{
 23feb94:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23feb96:	e8d4 3f8f 	ldab	r3, [r4]
 23feb9a:	07db      	lsls	r3, r3, #31
 23feb9c:	d411      	bmi.n	23febc2 <_Z22__fetch_global_Serial2v+0x32>
 23feb9e:	4620      	mov	r0, r4
 23feba0:	f7fb fd48 	bl	23fa634 <__cxa_guard_acquire>
 23feba4:	b168      	cbz	r0, 23febc2 <_Z22__fetch_global_Serial2v+0x32>
 23feba6:	a801      	add	r0, sp, #4
 23feba8:	f7ff ffc2 	bl	23feb30 <_Z20acquireSerial2Bufferv>
 23febac:	2101      	movs	r1, #1
 23febae:	aa01      	add	r2, sp, #4
 23febb0:	4806      	ldr	r0, [pc, #24]	; (23febcc <_Z22__fetch_global_Serial2v+0x3c>)
 23febb2:	f7ff fa6b 	bl	23fe08c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23febb6:	4620      	mov	r0, r4
 23febb8:	f7fb fd41 	bl	23fa63e <__cxa_guard_release>
 23febbc:	4804      	ldr	r0, [pc, #16]	; (23febd0 <_Z22__fetch_global_Serial2v+0x40>)
 23febbe:	f000 f9ab 	bl	23fef18 <atexit>
	return serial2;
}
 23febc2:	4802      	ldr	r0, [pc, #8]	; (23febcc <_Z22__fetch_global_Serial2v+0x3c>)
 23febc4:	b006      	add	sp, #24
 23febc6:	bd10      	pop	{r4, pc}
 23febc8:	1007af08 	.word	0x1007af08
 23febcc:	1007af24 	.word	0x1007af24
 23febd0:	023feb23 	.word	0x023feb23

023febd4 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23febd4:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23febd6:	f7ff ffdb 	bl	23feb90 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23febda:	4b07      	ldr	r3, [pc, #28]	; (23febf8 <_Z15serialEventRun2v+0x24>)
 23febdc:	4604      	mov	r4, r0
 23febde:	b153      	cbz	r3, 23febf6 <_Z15serialEventRun2v+0x22>
 23febe0:	f7ff fa6f 	bl	23fe0c2 <_ZN11USARTSerial9isEnabledEv>
 23febe4:	b138      	cbz	r0, 23febf6 <_Z15serialEventRun2v+0x22>
 23febe6:	6823      	ldr	r3, [r4, #0]
 23febe8:	4620      	mov	r0, r4
 23febea:	691b      	ldr	r3, [r3, #16]
 23febec:	4798      	blx	r3
 23febee:	2800      	cmp	r0, #0
 23febf0:	dd01      	ble.n	23febf6 <_Z15serialEventRun2v+0x22>
        handler();
 23febf2:	e000      	b.n	23febf6 <_Z15serialEventRun2v+0x22>
 23febf4:	bf00      	nop
}
 23febf6:	bd10      	pop	{r4, pc}
 23febf8:	00000000 	.word	0x00000000

023febfc <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23febfc:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23febfe:	4c0d      	ldr	r4, [pc, #52]	; (23fec34 <_Z22__fetch_global_Serial3v+0x38>)
{
 23fec00:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fec02:	e8d4 3f8f 	ldab	r3, [r4]
 23fec06:	07db      	lsls	r3, r3, #31
 23fec08:	d411      	bmi.n	23fec2e <_Z22__fetch_global_Serial3v+0x32>
 23fec0a:	4620      	mov	r0, r4
 23fec0c:	f7fb fd12 	bl	23fa634 <__cxa_guard_acquire>
 23fec10:	b168      	cbz	r0, 23fec2e <_Z22__fetch_global_Serial3v+0x32>
 23fec12:	a801      	add	r0, sp, #4
 23fec14:	f7ff ff92 	bl	23feb3c <_Z20acquireSerial3Bufferv>
 23fec18:	2102      	movs	r1, #2
 23fec1a:	aa01      	add	r2, sp, #4
 23fec1c:	4806      	ldr	r0, [pc, #24]	; (23fec38 <_Z22__fetch_global_Serial3v+0x3c>)
 23fec1e:	f7ff fa35 	bl	23fe08c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fec22:	4620      	mov	r0, r4
 23fec24:	f7fb fd0b 	bl	23fa63e <__cxa_guard_release>
 23fec28:	4804      	ldr	r0, [pc, #16]	; (23fec3c <_Z22__fetch_global_Serial3v+0x40>)
 23fec2a:	f000 f975 	bl	23fef18 <atexit>
	return serial3;
}
 23fec2e:	4802      	ldr	r0, [pc, #8]	; (23fec38 <_Z22__fetch_global_Serial3v+0x3c>)
 23fec30:	b006      	add	sp, #24
 23fec32:	bd10      	pop	{r4, pc}
 23fec34:	1007af0c 	.word	0x1007af0c
 23fec38:	1007af38 	.word	0x1007af38
 23fec3c:	023feb21 	.word	0x023feb21

023fec40 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23fec40:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23fec42:	f7ff ffdb 	bl	23febfc <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23fec46:	4b07      	ldr	r3, [pc, #28]	; (23fec64 <_Z15serialEventRun3v+0x24>)
 23fec48:	4604      	mov	r4, r0
 23fec4a:	b153      	cbz	r3, 23fec62 <_Z15serialEventRun3v+0x22>
 23fec4c:	f7ff fa39 	bl	23fe0c2 <_ZN11USARTSerial9isEnabledEv>
 23fec50:	b138      	cbz	r0, 23fec62 <_Z15serialEventRun3v+0x22>
 23fec52:	6823      	ldr	r3, [r4, #0]
 23fec54:	4620      	mov	r0, r4
 23fec56:	691b      	ldr	r3, [r3, #16]
 23fec58:	4798      	blx	r3
 23fec5a:	2800      	cmp	r0, #0
 23fec5c:	dd01      	ble.n	23fec62 <_Z15serialEventRun3v+0x22>
        handler();
 23fec5e:	e000      	b.n	23fec62 <_Z15serialEventRun3v+0x22>
 23fec60:	bf00      	nop
}
 23fec62:	bd10      	pop	{r4, pc}
 23fec64:	00000000 	.word	0x00000000

023fec68 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fec68:	4770      	bx	lr
	...

023fec6c <_Z17acquireWireBufferv>:
{
 23fec6c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23fec6e:	4b0a      	ldr	r3, [pc, #40]	; (23fec98 <_Z17acquireWireBufferv+0x2c>)
{
 23fec70:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23fec72:	6003      	str	r3, [r0, #0]
 23fec74:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fec76:	4909      	ldr	r1, [pc, #36]	; (23fec9c <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23fec78:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fec7a:	2020      	movs	r0, #32
 23fec7c:	f000 f834 	bl	23fece8 <_ZnajRKSt9nothrow_t>
	};
 23fec80:	2520      	movs	r5, #32
 23fec82:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fec84:	4905      	ldr	r1, [pc, #20]	; (23fec9c <_Z17acquireWireBufferv+0x30>)
 23fec86:	4628      	mov	r0, r5
	};
 23fec88:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fec8a:	f000 f82d 	bl	23fece8 <_ZnajRKSt9nothrow_t>
	};
 23fec8e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23fec92:	4620      	mov	r0, r4
 23fec94:	bd38      	pop	{r3, r4, r5, pc}
 23fec96:	bf00      	nop
 23fec98:	00010018 	.word	0x00010018
 23fec9c:	023ffe44 	.word	0x023ffe44

023feca0 <_Z19__fetch_global_Wirev>:
{
 23feca0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23feca2:	4d0e      	ldr	r5, [pc, #56]	; (23fecdc <_Z19__fetch_global_Wirev+0x3c>)
{
 23feca4:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23feca6:	e8d5 1f8f 	ldab	r1, [r5]
 23fecaa:	f011 0401 	ands.w	r4, r1, #1
 23fecae:	d111      	bne.n	23fecd4 <_Z19__fetch_global_Wirev+0x34>
 23fecb0:	4628      	mov	r0, r5
 23fecb2:	f7fb fcbf 	bl	23fa634 <__cxa_guard_acquire>
 23fecb6:	b168      	cbz	r0, 23fecd4 <_Z19__fetch_global_Wirev+0x34>
 23fecb8:	4668      	mov	r0, sp
 23fecba:	f7ff ffd7 	bl	23fec6c <_Z17acquireWireBufferv>
 23fecbe:	466a      	mov	r2, sp
 23fecc0:	4621      	mov	r1, r4
 23fecc2:	4807      	ldr	r0, [pc, #28]	; (23fece0 <_Z19__fetch_global_Wirev+0x40>)
 23fecc4:	f7ff fa3c 	bl	23fe140 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23fecc8:	4628      	mov	r0, r5
 23fecca:	f7fb fcb8 	bl	23fa63e <__cxa_guard_release>
 23fecce:	4805      	ldr	r0, [pc, #20]	; (23fece4 <_Z19__fetch_global_Wirev+0x44>)
 23fecd0:	f000 f922 	bl	23fef18 <atexit>
	return wire;
}
 23fecd4:	4802      	ldr	r0, [pc, #8]	; (23fece0 <_Z19__fetch_global_Wirev+0x40>)
 23fecd6:	b007      	add	sp, #28
 23fecd8:	bd30      	pop	{r4, r5, pc}
 23fecda:	bf00      	nop
 23fecdc:	1007af50 	.word	0x1007af50
 23fece0:	1007af54 	.word	0x1007af54
 23fece4:	023fec69 	.word	0x023fec69

023fece8 <_ZnajRKSt9nothrow_t>:
 23fece8:	f7fb bc93 	b.w	23fa612 <_Znaj>

023fecec <_ZSt25__throw_bad_function_callv>:
 23fecec:	b508      	push	{r3, lr}
 23fecee:	f7fe fb77 	bl	23fd3e0 <abort>
	...

023fecf4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 23fecf4:	4901      	ldr	r1, [pc, #4]	; (23fecfc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 23fecf6:	f000 b8f9 	b.w	23feeec <_ZNKSt9type_infoeqERKS_>
 23fecfa:	bf00      	nop
 23fecfc:	023ffe60 	.word	0x023ffe60

023fed00 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 23fed00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23fed02:	2400      	movs	r4, #0
 23fed04:	2310      	movs	r3, #16
 23fed06:	4615      	mov	r5, r2
 23fed08:	6812      	ldr	r2, [r2, #0]
 23fed0a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 23fed0e:	6803      	ldr	r3, [r0, #0]
 23fed10:	e9cd 4400 	strd	r4, r4, [sp]
 23fed14:	699e      	ldr	r6, [r3, #24]
 23fed16:	466b      	mov	r3, sp
 23fed18:	47b0      	blx	r6
 23fed1a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23fed1e:	f003 0306 	and.w	r3, r3, #6
 23fed22:	2b06      	cmp	r3, #6
 23fed24:	bf05      	ittet	eq
 23fed26:	9b00      	ldreq	r3, [sp, #0]
 23fed28:	2001      	moveq	r0, #1
 23fed2a:	4620      	movne	r0, r4
 23fed2c:	602b      	streq	r3, [r5, #0]
 23fed2e:	b004      	add	sp, #16
 23fed30:	bd70      	pop	{r4, r5, r6, pc}

023fed32 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 23fed32:	9800      	ldr	r0, [sp, #0]
 23fed34:	4290      	cmp	r0, r2
 23fed36:	bf14      	ite	ne
 23fed38:	2001      	movne	r0, #1
 23fed3a:	2006      	moveq	r0, #6
 23fed3c:	4770      	bx	lr
	...

023fed40 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 23fed40:	4b03      	ldr	r3, [pc, #12]	; (23fed50 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 23fed42:	b510      	push	{r4, lr}
 23fed44:	4604      	mov	r4, r0
 23fed46:	6003      	str	r3, [r0, #0]
 23fed48:	f000 f8cd 	bl	23feee6 <_ZNSt9type_infoD1Ev>
 23fed4c:	4620      	mov	r0, r4
 23fed4e:	bd10      	pop	{r4, pc}
 23fed50:	023ffea0 	.word	0x023ffea0

023fed54 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 23fed54:	b510      	push	{r4, lr}
 23fed56:	4604      	mov	r4, r0
 23fed58:	f7ff fff2 	bl	23fed40 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23fed5c:	2108      	movs	r1, #8
 23fed5e:	4620      	mov	r0, r4
 23fed60:	f7fb fc59 	bl	23fa616 <_ZdlPvj>
 23fed64:	4620      	mov	r0, r4
 23fed66:	bd10      	pop	{r4, pc}

023fed68 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 23fed68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fed6c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 23fed70:	461f      	mov	r7, r3
 23fed72:	4606      	mov	r6, r0
 23fed74:	4615      	mov	r5, r2
 23fed76:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 23fed7a:	4598      	cmp	r8, r3
 23fed7c:	d107      	bne.n	23fed8e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23fed7e:	9907      	ldr	r1, [sp, #28]
 23fed80:	f000 f8b4 	bl	23feeec <_ZNKSt9type_infoeqERKS_>
 23fed84:	b118      	cbz	r0, 23fed8e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23fed86:	7165      	strb	r5, [r4, #5]
 23fed88:	2000      	movs	r0, #0
 23fed8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fed8e:	4639      	mov	r1, r7
 23fed90:	4630      	mov	r0, r6
 23fed92:	f000 f8ab 	bl	23feeec <_ZNKSt9type_infoeqERKS_>
 23fed96:	2800      	cmp	r0, #0
 23fed98:	d0f6      	beq.n	23fed88 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 23fed9a:	2301      	movs	r3, #1
 23fed9c:	f8c4 8000 	str.w	r8, [r4]
 23feda0:	7125      	strb	r5, [r4, #4]
 23feda2:	71a3      	strb	r3, [r4, #6]
 23feda4:	e7f0      	b.n	23fed88 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

023feda6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 23feda6:	b538      	push	{r3, r4, r5, lr}
 23feda8:	4615      	mov	r5, r2
 23fedaa:	461c      	mov	r4, r3
 23fedac:	f000 f89e 	bl	23feeec <_ZNKSt9type_infoeqERKS_>
 23fedb0:	b120      	cbz	r0, 23fedbc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 23fedb2:	2308      	movs	r3, #8
 23fedb4:	6025      	str	r5, [r4, #0]
 23fedb6:	60e3      	str	r3, [r4, #12]
 23fedb8:	2306      	movs	r3, #6
 23fedba:	7123      	strb	r3, [r4, #4]
 23fedbc:	bd38      	pop	{r3, r4, r5, pc}

023fedbe <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 23fedbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fedc0:	4605      	mov	r5, r0
 23fedc2:	460c      	mov	r4, r1
 23fedc4:	461e      	mov	r6, r3
 23fedc6:	9201      	str	r2, [sp, #4]
 23fedc8:	f000 f890 	bl	23feeec <_ZNKSt9type_infoeqERKS_>
 23fedcc:	b950      	cbnz	r0, 23fede4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23fedce:	2e03      	cmp	r6, #3
 23fedd0:	d808      	bhi.n	23fede4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23fedd2:	6823      	ldr	r3, [r4, #0]
 23fedd4:	4629      	mov	r1, r5
 23fedd6:	9a01      	ldr	r2, [sp, #4]
 23fedd8:	4620      	mov	r0, r4
 23fedda:	695b      	ldr	r3, [r3, #20]
 23feddc:	b002      	add	sp, #8
 23fedde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23fede2:	4718      	bx	r3
 23fede4:	b002      	add	sp, #8
 23fede6:	bd70      	pop	{r4, r5, r6, pc}

023fede8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 23fede8:	4b03      	ldr	r3, [pc, #12]	; (23fedf8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 23fedea:	b510      	push	{r4, lr}
 23fedec:	4604      	mov	r4, r0
 23fedee:	6003      	str	r3, [r0, #0]
 23fedf0:	f7ff ffa6 	bl	23fed40 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23fedf4:	4620      	mov	r0, r4
 23fedf6:	bd10      	pop	{r4, pc}
 23fedf8:	023fff00 	.word	0x023fff00

023fedfc <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 23fedfc:	b510      	push	{r4, lr}
 23fedfe:	4604      	mov	r4, r0
 23fee00:	f7ff fff2 	bl	23fede8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 23fee04:	210c      	movs	r1, #12
 23fee06:	4620      	mov	r0, r4
 23fee08:	f7fb fc05 	bl	23fa616 <_ZdlPvj>
 23fee0c:	4620      	mov	r0, r4
 23fee0e:	bd10      	pop	{r4, pc}

023fee10 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 23fee10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23fee12:	9f08      	ldr	r7, [sp, #32]
 23fee14:	4605      	mov	r5, r0
 23fee16:	460e      	mov	r6, r1
 23fee18:	4614      	mov	r4, r2
 23fee1a:	4297      	cmp	r7, r2
 23fee1c:	d00a      	beq.n	23fee34 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 23fee1e:	68a8      	ldr	r0, [r5, #8]
 23fee20:	4631      	mov	r1, r6
 23fee22:	6802      	ldr	r2, [r0, #0]
 23fee24:	9708      	str	r7, [sp, #32]
 23fee26:	6a15      	ldr	r5, [r2, #32]
 23fee28:	4622      	mov	r2, r4
 23fee2a:	46ac      	mov	ip, r5
 23fee2c:	b003      	add	sp, #12
 23fee2e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fee32:	4760      	bx	ip
 23fee34:	4619      	mov	r1, r3
 23fee36:	9301      	str	r3, [sp, #4]
 23fee38:	f000 f858 	bl	23feeec <_ZNKSt9type_infoeqERKS_>
 23fee3c:	9b01      	ldr	r3, [sp, #4]
 23fee3e:	2800      	cmp	r0, #0
 23fee40:	d0ed      	beq.n	23fee1e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 23fee42:	2006      	movs	r0, #6
 23fee44:	b003      	add	sp, #12
 23fee46:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fee48 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 23fee48:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fee4c:	460d      	mov	r5, r1
 23fee4e:	4619      	mov	r1, r3
 23fee50:	4681      	mov	r9, r0
 23fee52:	4617      	mov	r7, r2
 23fee54:	4698      	mov	r8, r3
 23fee56:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 23fee5a:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 23fee5e:	f000 f845 	bl	23feeec <_ZNKSt9type_infoeqERKS_>
 23fee62:	b190      	cbz	r0, 23fee8a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 23fee64:	2d00      	cmp	r5, #0
 23fee66:	6034      	str	r4, [r6, #0]
 23fee68:	7137      	strb	r7, [r6, #4]
 23fee6a:	db09      	blt.n	23fee80 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 23fee6c:	1961      	adds	r1, r4, r5
 23fee6e:	458a      	cmp	sl, r1
 23fee70:	bf0c      	ite	eq
 23fee72:	2106      	moveq	r1, #6
 23fee74:	2101      	movne	r1, #1
 23fee76:	71b1      	strb	r1, [r6, #6]
 23fee78:	2000      	movs	r0, #0
 23fee7a:	b001      	add	sp, #4
 23fee7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fee80:	3502      	adds	r5, #2
 23fee82:	d1f9      	bne.n	23fee78 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23fee84:	2301      	movs	r3, #1
 23fee86:	71b3      	strb	r3, [r6, #6]
 23fee88:	e7f6      	b.n	23fee78 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23fee8a:	4554      	cmp	r4, sl
 23fee8c:	d106      	bne.n	23fee9c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23fee8e:	4659      	mov	r1, fp
 23fee90:	4648      	mov	r0, r9
 23fee92:	f000 f82b 	bl	23feeec <_ZNKSt9type_infoeqERKS_>
 23fee96:	b108      	cbz	r0, 23fee9c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23fee98:	7177      	strb	r7, [r6, #5]
 23fee9a:	e7ed      	b.n	23fee78 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23fee9c:	f8d9 0008 	ldr.w	r0, [r9, #8]
 23feea0:	463a      	mov	r2, r7
 23feea2:	4629      	mov	r1, r5
 23feea4:	6803      	ldr	r3, [r0, #0]
 23feea6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 23feeaa:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 23feeae:	69dc      	ldr	r4, [r3, #28]
 23feeb0:	4643      	mov	r3, r8
 23feeb2:	46a4      	mov	ip, r4
 23feeb4:	b001      	add	sp, #4
 23feeb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23feeba:	4760      	bx	ip

023feebc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 23feebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23feec0:	4607      	mov	r7, r0
 23feec2:	460c      	mov	r4, r1
 23feec4:	4615      	mov	r5, r2
 23feec6:	461e      	mov	r6, r3
 23feec8:	f7ff ff6d 	bl	23feda6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 23feecc:	b948      	cbnz	r0, 23feee2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 23feece:	68b8      	ldr	r0, [r7, #8]
 23feed0:	462a      	mov	r2, r5
 23feed2:	4621      	mov	r1, r4
 23feed4:	6803      	ldr	r3, [r0, #0]
 23feed6:	699f      	ldr	r7, [r3, #24]
 23feed8:	4633      	mov	r3, r6
 23feeda:	46bc      	mov	ip, r7
 23feedc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 23feee0:	4760      	bx	ip
 23feee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023feee6 <_ZNSt9type_infoD1Ev>:
 23feee6:	4770      	bx	lr

023feee8 <_ZNKSt9type_info14__is_pointer_pEv>:
 23feee8:	2000      	movs	r0, #0
 23feeea:	4770      	bx	lr

023feeec <_ZNKSt9type_infoeqERKS_>:
 23feeec:	4281      	cmp	r1, r0
 23feeee:	b508      	push	{r3, lr}
 23feef0:	d00e      	beq.n	23fef10 <_ZNKSt9type_infoeqERKS_+0x24>
 23feef2:	6840      	ldr	r0, [r0, #4]
 23feef4:	7803      	ldrb	r3, [r0, #0]
 23feef6:	2b2a      	cmp	r3, #42	; 0x2a
 23feef8:	d00c      	beq.n	23fef14 <_ZNKSt9type_infoeqERKS_+0x28>
 23feefa:	6849      	ldr	r1, [r1, #4]
 23feefc:	780b      	ldrb	r3, [r1, #0]
 23feefe:	2b2a      	cmp	r3, #42	; 0x2a
 23fef00:	bf08      	it	eq
 23fef02:	3101      	addeq	r1, #1
 23fef04:	f7fb fb54 	bl	23fa5b0 <strcmp>
 23fef08:	fab0 f080 	clz	r0, r0
 23fef0c:	0940      	lsrs	r0, r0, #5
 23fef0e:	bd08      	pop	{r3, pc}
 23fef10:	2001      	movs	r0, #1
 23fef12:	e7fc      	b.n	23fef0e <_ZNKSt9type_infoeqERKS_+0x22>
 23fef14:	2000      	movs	r0, #0
 23fef16:	e7fa      	b.n	23fef0e <_ZNKSt9type_infoeqERKS_+0x22>

023fef18 <atexit>:
 23fef18:	2300      	movs	r3, #0
 23fef1a:	4601      	mov	r1, r0
 23fef1c:	461a      	mov	r2, r3
 23fef1e:	4618      	mov	r0, r3
 23fef20:	f000 b844 	b.w	23fefac <__register_exitproc>

023fef24 <memcpy>:
 23fef24:	440a      	add	r2, r1
 23fef26:	1e43      	subs	r3, r0, #1
 23fef28:	4291      	cmp	r1, r2
 23fef2a:	d100      	bne.n	23fef2e <memcpy+0xa>
 23fef2c:	4770      	bx	lr
 23fef2e:	b510      	push	{r4, lr}
 23fef30:	f811 4b01 	ldrb.w	r4, [r1], #1
 23fef34:	4291      	cmp	r1, r2
 23fef36:	f803 4f01 	strb.w	r4, [r3, #1]!
 23fef3a:	d1f9      	bne.n	23fef30 <memcpy+0xc>
 23fef3c:	bd10      	pop	{r4, pc}

023fef3e <memset>:
 23fef3e:	4402      	add	r2, r0
 23fef40:	4603      	mov	r3, r0
 23fef42:	4293      	cmp	r3, r2
 23fef44:	d100      	bne.n	23fef48 <memset+0xa>
 23fef46:	4770      	bx	lr
 23fef48:	f803 1b01 	strb.w	r1, [r3], #1
 23fef4c:	e7f9      	b.n	23fef42 <memset+0x4>
	...

023fef50 <srand>:
 23fef50:	b538      	push	{r3, r4, r5, lr}
 23fef52:	4b10      	ldr	r3, [pc, #64]	; (23fef94 <srand+0x44>)
 23fef54:	4604      	mov	r4, r0
 23fef56:	681d      	ldr	r5, [r3, #0]
 23fef58:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fef5a:	b9b3      	cbnz	r3, 23fef8a <srand+0x3a>
 23fef5c:	2018      	movs	r0, #24
 23fef5e:	f7fe fa07 	bl	23fd370 <malloc>
 23fef62:	4602      	mov	r2, r0
 23fef64:	63a8      	str	r0, [r5, #56]	; 0x38
 23fef66:	b920      	cbnz	r0, 23fef72 <srand+0x22>
 23fef68:	4b0b      	ldr	r3, [pc, #44]	; (23fef98 <srand+0x48>)
 23fef6a:	2142      	movs	r1, #66	; 0x42
 23fef6c:	480b      	ldr	r0, [pc, #44]	; (23fef9c <srand+0x4c>)
 23fef6e:	f7fe fa53 	bl	23fd418 <__assert_func>
 23fef72:	490b      	ldr	r1, [pc, #44]	; (23fefa0 <srand+0x50>)
 23fef74:	4b0b      	ldr	r3, [pc, #44]	; (23fefa4 <srand+0x54>)
 23fef76:	e9c0 1300 	strd	r1, r3, [r0]
 23fef7a:	4b0b      	ldr	r3, [pc, #44]	; (23fefa8 <srand+0x58>)
 23fef7c:	2100      	movs	r1, #0
 23fef7e:	6083      	str	r3, [r0, #8]
 23fef80:	230b      	movs	r3, #11
 23fef82:	8183      	strh	r3, [r0, #12]
 23fef84:	2001      	movs	r0, #1
 23fef86:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23fef8a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fef8c:	2200      	movs	r2, #0
 23fef8e:	611c      	str	r4, [r3, #16]
 23fef90:	615a      	str	r2, [r3, #20]
 23fef92:	bd38      	pop	{r3, r4, r5, pc}
 23fef94:	1007ac10 	.word	0x1007ac10
 23fef98:	023fff39 	.word	0x023fff39
 23fef9c:	023fff50 	.word	0x023fff50
 23fefa0:	abcd330e 	.word	0xabcd330e
 23fefa4:	e66d1234 	.word	0xe66d1234
 23fefa8:	0005deec 	.word	0x0005deec

023fefac <__register_exitproc>:
 23fefac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fefb0:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ff070 <__register_exitproc+0xc4>
 23fefb4:	4606      	mov	r6, r0
 23fefb6:	461f      	mov	r7, r3
 23fefb8:	460d      	mov	r5, r1
 23fefba:	f8d8 0000 	ldr.w	r0, [r8]
 23fefbe:	4691      	mov	r9, r2
 23fefc0:	f000 f858 	bl	23ff074 <__retarget_lock_acquire_recursive>
 23fefc4:	4b26      	ldr	r3, [pc, #152]	; (23ff060 <__register_exitproc+0xb4>)
 23fefc6:	681c      	ldr	r4, [r3, #0]
 23fefc8:	b934      	cbnz	r4, 23fefd8 <__register_exitproc+0x2c>
 23fefca:	4c26      	ldr	r4, [pc, #152]	; (23ff064 <__register_exitproc+0xb8>)
 23fefcc:	601c      	str	r4, [r3, #0]
 23fefce:	4b26      	ldr	r3, [pc, #152]	; (23ff068 <__register_exitproc+0xbc>)
 23fefd0:	b113      	cbz	r3, 23fefd8 <__register_exitproc+0x2c>
 23fefd2:	681b      	ldr	r3, [r3, #0]
 23fefd4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23fefd8:	6863      	ldr	r3, [r4, #4]
 23fefda:	2b1f      	cmp	r3, #31
 23fefdc:	dd07      	ble.n	23fefee <__register_exitproc+0x42>
 23fefde:	f8d8 0000 	ldr.w	r0, [r8]
 23fefe2:	f000 f849 	bl	23ff078 <__retarget_lock_release_recursive>
 23fefe6:	f04f 30ff 	mov.w	r0, #4294967295
 23fefea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fefee:	b35e      	cbz	r6, 23ff048 <__register_exitproc+0x9c>
 23feff0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23feff4:	b988      	cbnz	r0, 23ff01a <__register_exitproc+0x6e>
 23feff6:	4b1d      	ldr	r3, [pc, #116]	; (23ff06c <__register_exitproc+0xc0>)
 23feff8:	b923      	cbnz	r3, 23ff004 <__register_exitproc+0x58>
 23feffa:	f8d8 0000 	ldr.w	r0, [r8]
 23feffe:	f000 f83a 	bl	23ff076 <__retarget_lock_release>
 23ff002:	e7f0      	b.n	23fefe6 <__register_exitproc+0x3a>
 23ff004:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ff008:	f7fe f9b2 	bl	23fd370 <malloc>
 23ff00c:	2800      	cmp	r0, #0
 23ff00e:	d0f4      	beq.n	23feffa <__register_exitproc+0x4e>
 23ff010:	2300      	movs	r3, #0
 23ff012:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ff016:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ff01a:	6863      	ldr	r3, [r4, #4]
 23ff01c:	2201      	movs	r2, #1
 23ff01e:	2e02      	cmp	r6, #2
 23ff020:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ff024:	fa02 f203 	lsl.w	r2, r2, r3
 23ff028:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ff02c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ff030:	ea43 0302 	orr.w	r3, r3, r2
 23ff034:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ff038:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ff03c:	bf02      	ittt	eq
 23ff03e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ff042:	4313      	orreq	r3, r2
 23ff044:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ff048:	6863      	ldr	r3, [r4, #4]
 23ff04a:	f8d8 0000 	ldr.w	r0, [r8]
 23ff04e:	1c5a      	adds	r2, r3, #1
 23ff050:	3302      	adds	r3, #2
 23ff052:	6062      	str	r2, [r4, #4]
 23ff054:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ff058:	f000 f80e 	bl	23ff078 <__retarget_lock_release_recursive>
 23ff05c:	2000      	movs	r0, #0
 23ff05e:	e7c4      	b.n	23fefea <__register_exitproc+0x3e>
 23ff060:	1007aff4 	.word	0x1007aff4
 23ff064:	1007af68 	.word	0x1007af68
 23ff068:	00000000 	.word	0x00000000
 23ff06c:	023fd371 	.word	0x023fd371
 23ff070:	1007ac74 	.word	0x1007ac74

023ff074 <__retarget_lock_acquire_recursive>:
 23ff074:	4770      	bx	lr

023ff076 <__retarget_lock_release>:
 23ff076:	4770      	bx	lr

023ff078 <__retarget_lock_release_recursive>:
 23ff078:	4770      	bx	lr
	...

023ff07c <link_const_data_start>:
 23ff07c:	ff7e0000 	.word	0xff7e0000
 23ff080:	00010006 	.word	0x00010006
 23ff084:	ef000000 	.word	0xef000000

023ff088 <dynalib_user>:
 23ff088:	023fa5d5 023fa5fd 023fa601 00000000     ..?...?...?.....
 23ff098:	6c6c6143 206e6f20 65727570 72697620     Call on pure vir
 23ff0a8:	6c617574 206f4e00 6e616843 2d206567     tual.No Change -
 23ff0b8:	6e614320 6c6c6563 20676e69 0a444d43      Cancelling CMD.
 23ff0c8:	6f227b00 743a226e 2c657572 74617322     .{"on":true,"sat
 23ff0d8:	2c003a22 69726222 2c003a22 65756822     ":.,"bri":.,"hue
 23ff0e8:	7b003a22 226e6f22 6c61663a 007d6573     ":.{"on":false}.
 23ff0f8:	646e6553 20676e69 6d6d6f43 20646e61     Sending Command 
 23ff108:	48206f74 203a6575 000a7325 20545550     to Hue: %s..PUT 
 23ff118:	6970612f 6c2f002f 74686769 2f002f73     /api/./lights/./
 23ff128:	74617473 54482065 312f5054 4800312e     state HTTP/1.1.H
 23ff138:	3a74736f 6f430020 6e65746e 654c2d74     ost: .Content-Le
 23ff148:	6874676e 4300203a 65746e6f 542d746e     ngth: .Content-T
 23ff158:	3a657079 78657420 6c702f74 3b6e6961     ype: text/plain;
 23ff168:	72616863 3d746573 2d465455 77530038     charset=UTF-8.Sw
 23ff178:	68637469 20676e69 57206e4f 206f6d65     itching On Wemo 
 23ff188:	0a692523 783f3c00 76206c6d 69737265     #%i..<?xml versi
 23ff198:	223d6e6f 22302e31 636e6520 6e69646f     on="1.0" encodin
 23ff1a8:	75223d67 382d6674 3c3e3f22 6e453a73     g="utf-8"?><s:En
 23ff1b8:	6f6c6576 78206570 736e6c6d 223d733a     velope xmlns:s="
 23ff1c8:	70747468 732f2f3a 6d656863 782e7361     http://schemas.x
 23ff1d8:	6f736c6d 6f2e7061 732f6772 2f70616f     mlsoap.org/soap/
 23ff1e8:	65766e65 65706f6c 7320222f 636e653a     envelope/" s:enc
 23ff1f8:	6e69646f 79745367 223d656c 70747468     odingStyle="http
 23ff208:	732f2f3a 6d656863 782e7361 6f736c6d     ://schemas.xmlso
 23ff218:	6f2e7061 732f6772 2f70616f 6f636e65     ap.org/soap/enco
 23ff228:	676e6964 3c3e222f 6f423a73 3c3e7964     ding/"><s:Body><
 23ff238:	65533a75 6e694274 53797261 65746174     u:SetBinaryState
 23ff248:	6c6d7820 753a736e 7275223d 65423a6e      xmlns:u="urn:Be
 23ff258:	6e696b6c 7265733a 65636976 7361623a     lkin:service:bas
 23ff268:	76656369 3a746e65 3c3e2231 616e6942     icevent:1"><Bina
 23ff278:	74537972 3e657461 422f3c31 72616e69     ryState>1</Binar
 23ff288:	61745379 3c3e6574 533a752f 69427465     yState></u:SetBi
 23ff298:	7972616e 74617453 2f3c3e65 6f423a73     naryState></s:Bo
 23ff2a8:	3c3e7964 453a732f 6c65766e 3e65706f     dy></s:Envelope>
 23ff2b8:	534f5000 752f2054 2f706e70 746e6f63     .POST /upnp/cont
 23ff2c8:	2f6c6f72 69736162 65766563 2031746e     rol/basicevent1 
 23ff2d8:	50545448 312e312f 6e6f4300 746e6574     HTTP/1.1.Content
 23ff2e8:	7079542d 74203a65 2f747865 3b6c6d78     -Type: text/xml;
 23ff2f8:	61686320 74657372 6674753d 5300382d      charset=utf-8.S
 23ff308:	4150414f 4f495443 22203a4e 3a6e7275     OAPACTION: "urn:
 23ff318:	6b6c6542 733a6e69 69767265 623a6563     Belkin:service:b
 23ff328:	63697361 6e657665 23313a74 42746553     asicevent:1#SetB
 23ff338:	72616e69 61745379 00226574 6e6e6f43     inaryState".Conn
 23ff348:	69746365 203a6e6f 7065656b 696c612d     ection: keep-ali
 23ff358:	53006576 63746977 676e6968 66664f20     ve.Switching Off
 23ff368:	6d655720 2523206f 000a2069 6d783f3c      Wemo #%i ..<?xm
 23ff378:	6576206c 6f697372 31223d6e 2022302e     l version="1.0" 
 23ff388:	6f636e65 676e6964 7475223d 22382d66     encoding="utf-8"
 23ff398:	733c3e3f 766e453a 706f6c65 6d782065     ?><s:Envelope xm
 23ff3a8:	3a736e6c 68223d73 3a707474 63732f2f     lns:s="http://sc
 23ff3b8:	616d6568 6d782e73 616f736c 726f2e70     hemas.xmlsoap.or
 23ff3c8:	6f732f67 652f7061 6c65766e 2f65706f     g/soap/envelope/
 23ff3d8:	3a732022 6f636e65 676e6964 6c797453     " s:encodingStyl
 23ff3e8:	68223d65 3a707474 63732f2f 616d6568     e="http://schema
 23ff3f8:	6d782e73 616f736c 726f2e70 6f732f67     s.xmlsoap.org/so
 23ff408:	652f7061 646f636e 2f676e69 733c3e22     ap/encoding/"><s
 23ff418:	646f423a 753c3e79 7465533a 616e6942     :Body><u:SetBina
 23ff428:	74537972 20657461 6e6c6d78 3d753a73     ryState xmlns:u=
 23ff438:	6e727522 6c65423a 3a6e696b 76726573     "urn:Belkin:serv
 23ff448:	3a656369 69736162 65766563 313a746e     ice:basicevent:1
 23ff458:	423c3e22 72616e69 61745379 303e6574     "><BinaryState>0
 23ff468:	69422f3c 7972616e 74617453 2f3c3e65     </BinaryState></
 23ff478:	65533a75 6e694274 53797261 65746174     u:SetBinaryState
 23ff488:	732f3c3e 646f423a 2f3c3e79 6e453a73     ></s:Body></s:En
 23ff498:	6f6c6576 003e6570 4e546f49 6f777465     velope>.IoTNetwo
 23ff4a8:	2e006b72 000a0a00 20454d42 61207461     rk......BME at a
 23ff4b8:	65726464 25207373 61662069 64656c69     ddress %i failed
 23ff4c8:	206f7420 72617473 54000a74 3a706d65      to start..Temp:
 23ff4d8:	616e0020 6e69006e 766f0066 61500066      .nan.inf.ovf.Pa
 23ff4e8:	44206170 006b6375 664f6e6f 69252066     pa Duck.onOff %i
 23ff4f8:	6e45000a 65646f63 6f702072 69746973     ..Encoder positi
 23ff508:	25206e6f 54000a69 696e7275 6f20676e     on %i..Turning o
 23ff518:	7548206e 25202365 54000a69 696e7275     n Hue# %i..Turni
 23ff528:	6f20676e 6557206e 20236f6d 000a6925     ng on Wemo# %i..
 23ff538:	6e727554 20676e69 2066666f 6f6d6557     Turning off Wemo
 23ff548:	69252023 3931000a 36312e32 2e312e38     # %i..192.168.1.
 23ff558:	31003033 312e3239 312e3836 0031332e     30.192.168.1.31.
 23ff568:	2e323931 2e383631 32332e31 32393100     192.168.1.32.192
 23ff578:	3836312e 332e312e 39310033 36312e32     .168.1.33.192.16
 23ff588:	2e312e38 31003433 312e3239 312e3836     8.1.34.192.168.1
 23ff598:	0035332e                                .35.

023ff59c <_ZL11hueUsername>:
 23ff59c:	5a6c514d 4f52697a 69615730 4d734d35     MQlZziRO0Wai5MsM
 23ff5ac:	386c6c48 41554178 38777151 72725135     Hll8xAUAQqw85Qrr
 23ff5bc:	334d7438 54334637 00000000              8tM37F3T....

023ff5c8 <_ZL7rainbow>:
 23ff5c8:	00ff0000 00ffa500 00ffff00 00008000     ................
 23ff5d8:	000000ff 004b0082 009400d3              ......K.....

023ff5e4 <_ZL8hueHubIP>:
 23ff5e4:	2e323931 2e383631 00352e31 61666564     192.168.1.5.defa
 23ff5f4:	20746c75 42534d00 42534c00 50533c00     ult .MSB.LSB.<SP
 23ff604:	74655349 676e6974 65642073 6c756166     ISettings defaul
 23ff614:	3c003e74 53495053 69747465 2073676e     t>.<SPISettings 
 23ff624:	75257325 20732520 45444f4d 003e7525     %s%u %s MODE%u>.

023ff634 <_ZTVN8particle11SPISettingsE>:
	...
 23ff63c:	023fb3b9 023fb3a9 023fb3ab 2f495053     ..?...?...?.SPI/
 23ff64c:	31495053 746e6920 61667265 6e206563     SPI1 interface n
 23ff65c:	6420746f 6e696665 00216465 65786950     ot defined!.Pixe
 23ff66c:	7974206c 6e206570 7320746f 6f707075     l type not suppo
 23ff67c:	64657472 00000021 20746f4e 756f6e65     rted!...Not enou
 23ff68c:	6d206867 726f6d65 76612079 616c6961     gh memory availa
 23ff69c:	21656c62 00000000                       ble!....

023ff6a4 <_ZTV16Adafruit_SSD1306>:
	...
 23ff6ac:	023fc1a1 023fc231 023fc89d 023fda21     ..?.1.?...?.!.?.
 23ff6bc:	023fc1a5 023fc5b5 023fc029 023fbeb5     ..?...?.).?...?.
 23ff6cc:	023fc673 023fc711 023fc747 023fc763     s.?...?.G.?.c.?.

023ff6dc <_ZL4font>:
 23ff6dc:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
 23ff6ec:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
 23ff6fc:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
 23ff70c:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
 23ff71c:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
 23ff72c:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
 23ff73c:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
 23ff74c:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
 23ff75c:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
 23ff76c:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
 23ff77c:	00000000 5f000000 07000000 14000700     ......._........
 23ff78c:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
 23ff79c:	00502056 00030708 41221c00 22410000     V P......."A..A"
 23ff7ac:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
 23ff7bc:	08080800 00000808 20006060 02040810     ........``. ....
 23ff7cc:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
 23ff7dc:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
 23ff7ec:	41314949 07091121 49494936 49494636     II1A!...6III6FII
 23ff7fc:	00001e29 00000014 00003440 22140800     ).......@4....."
 23ff80c:	14141441 41001414 02081422 06095901     A......A"....Y..
 23ff81c:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
 23ff82c:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
 23ff83c:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
 23ff84c:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
 23ff85c:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
 23ff86c:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
 23ff87c:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
 23ff88c:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
 23ff89c:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
 23ff8ac:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
 23ff8bc:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
 23ff8cc:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
 23ff8dc:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
 23ff8ec:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
 23ff8fc:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
 23ff90c:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
 23ff91c:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
 23ff92c:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
 23ff93c:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
 23ff94c:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
 23ff95c:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
 23ff96c:	41795555 78545421 54552141 54204078     UUyA!TTxA!UTx@ T
 23ff97c:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
 23ff98c:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
 23ff99c:	45010042 29f0407c f0f02924 f0282528     B..E|@.)$)..(%(.
 23ff9ac:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
 23ff9bc:	32494949 48484832 484a3232 413a3048     III22HHH22JHH0:A
 23ff9cc:	3a7a2141 78204042 a0a09d00 4444397d     A!z:B@ x....}9DD
 23ff9dc:	403d3944 3c3d4040 2424ff24 43497e48     D9=@@@=<$.$$H~IC
 23ff9ec:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
 23ff9fc:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
 23ffa0c:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
 23ffa1c:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
 23ffa2c:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
 23ffa3c:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
 23ffa4c:	005500aa aa55aaaa 0000aa55 1000ff00     ..U...U.U.......
 23ffa5c:	00ff1010 ff141414 ff101000 1010ff00     ................
 23ffa6c:	14f010f0 00fc1414 00f71414 ff0000ff     ................
 23ffa7c:	1414ff00 14fc04f4 1f101714 101f1010     ................
 23ffa8c:	1414141f 1010001f 0000f010 101f0000     ................
 23ffa9c:	1f101010 10101010 000010f0 1010ff00     ................
 23ffaac:	10101010 ff101010 00000010 000014ff     ................
 23ffabc:	00ff00ff 17101f00 04fc0000 171414f4     ................
 23ffacc:	14141710 00f404f4 f700ff00 14141414     ................
 23ffadc:	f7141414 1414f700 10141714 1f101f10     ................
 23ffaec:	f4141414 f0101014 0000f010 001f101f     ................
 23ffafc:	141f0000 fc000000 f0000014 1010f010     ................
 23ffb0c:	14ff10ff 14ff1414 1f101010 00000000     ................
 23ffb1c:	ffff10f0 f0ffffff f0f0f0f0 00ffffff     ................
 23ffb2c:	00000000 0f0fffff 380f0f0f 44384444     ...........8DD8D
 23ffb3c:	3e2a2a7c 02027e14 7e020606 63027e02     |**>.~.....~.~.c
 23ffb4c:	63414955 3c444438 207e4004 0206201e     UIAc8DD<.@~ . ..
 23ffb5c:	9902027e 99a5e7a5 2a492a1c 01724c1c     ~........*I*.Lr.
 23ffb6c:	4a304c72 30304d4d 30487848 465a62bc     rL0JMM00HxH0.bZF
 23ffb7c:	49493e3d 017e0049 2a7e0101 2a2a2a2a     =>III.~...~*****
 23ffb8c:	445f4444 4a514044 44404044 0040514a     DD_DD@QJD@@DJQ@.
 23ffb9c:	0301ff00 00ff80e0 6b080800 1236086b     ...........kk.6.
 23ffbac:	06362436 060f090f 18180000 10000000     6$6.............
 23ffbbc:	40300010 000101ff 1e01011f 171d1900     ..0@............
 23ffbcc:	3c3c0012 00003c3c 00000000              ..<<<<......

023ffbd8 <_ZTV12Adafruit_GFX>:
	...
 23ffbe8:	023fc89d 023fda21 023fa61d 023fc5b5     ..?.!.?...?...?.
 23ffbf8:	023fc6db 023fc6f7 023fc673 023fc711     ..?...?.s.?...?.
 23ffc08:	023fc747 023fc763                       G.?.c.?.

023ffc10 <_ZTVN5spark13EthernetClassE>:
	...
 23ffc18:	023fd4af 023fd4a5 023fd49b 023fd491     ..?...?...?...?.
 23ffc28:	023fd485 023fd479 023fe855 023fe85d     ..?.y.?.U.?.].?.
 23ffc38:	023fd46d 023fd465 023fd45b 023fd451     m.?.e.?.[.?.Q.?.
 23ffc48:	023fe985 023fe88d 023fe895              ..?...?...?.

023ffc54 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 23ffc54:	18100800 38302820                       .... (08

023ffc5c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
 23ffc64:	00707061 252d5925 64252d6d 3a482554     app.%Y-%m-%dT%H:
 23ffc74:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

023ffc84 <_ZTV9IPAddress>:
	...
 23ffc8c:	023fdd35 023fdd25 023fdd27              5.?.%.?.'.?.

023ffc98 <_ZTV9USBSerial>:
	...
 23ffca0:	023fde47 023fdeaf 023fde85 023fda21     G.?...?...?.!.?.
 23ffcb0:	023fde77 023fde49 023fde59 023fdea9     w.?.I.?.Y.?...?.
 23ffcc0:	023fdb73 023fde69 023fde41              s.?.i.?.A.?.

023ffccc <_ZTV11USARTSerial>:
	...
 23ffcd4:	023fe011 023fe07d 023fe055 023fda21     ..?.}.?.U.?.!.?.
 23ffce4:	023fe025 023fe041 023fe033 023fe04f     %.?.A.?.3.?.O.?.
 23ffcf4:	023fdb73 023fe013 023fe017              s.?...?...?.

023ffd00 <_ZTV7TwoWire>:
	...
 23ffd08:	023fe0c9 023fe113 023fe0eb 023fe0cb     ..?...?...?...?.
 23ffd18:	023fe0f3 023fe0fb 023fe103 023fe10b     ..?...?...?...?.
 23ffd28:	023fdb73 69726977 7200676e 20766365     s.?.wiring.recv 
 23ffd38:	6f727265 203d2072 00006425              error = %d..

023ffd44 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffd4c:	023fe28d 023fe2b1 023fe793 023fe2bf     ..?...?...?...?.
 23ffd5c:	023fe291                                ..?.

023ffd60 <_ZTV9TCPClient>:
	...
 23ffd68:	023fa835 023fa869 023fe209 023fe223     5.?.i.?...?.#.?.
 23ffd78:	023fe629 023fe24d 023fe4a7 023fe281     ).?.M.?...?...?.
 23ffd88:	023fdb73 023fe539 023fe379 023fe4d5     s.?.9.?.y.?...?.
 23ffd98:	023fe6dd 023fe475 023fe283 023fe235     ..?.u.?...?.5.?.
 23ffda8:	023fe2c5 023fe359                       ..?.Y.?.

023ffdb0 <_ZTVN5spark9WiFiClassE>:
	...
 23ffdb8:	023fe7f7 023fe7ed 023fe7e3 023fe799     ..?...?...?...?.
 23ffdc8:	023fe7d7 023fe7cb 023fe855 023fe85d     ..?...?.U.?.].?.
 23ffdd8:	023fe7bf 023fe7b7 023fe7ad 023fe7a3     ..?...?...?...?.
 23ffde8:	023fe985 023fe88d 023fe895              ..?...?...?.

023ffdf4 <CSWTCH.109>:
 23ffdf4:	1007ae1c 1007aef4 1007aefc              ............

023ffe00 <_ZTVN5spark12NetworkClassE>:
	...
 23ffe08:	023fe815 023fe81f 023fe829 023fe833     ..?...?.).?.3.?.
 23ffe18:	023fe83d 023fe849 023fe855 023fe85d     =.?.I.?.U.?.].?.
 23ffe28:	023fe865 023fe871 023fe879 023fe883     e.?.q.?.y.?...?.
 23ffe38:	023fe985 023fe88d 023fe895              ..?...?...?.

023ffe44 <_ZSt7nothrow>:
	...

023ffe45 <_ZTSSt19_Sp_make_shared_tag>:
 23ffe45:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
 23ffe55:	5f646572 00676174                        red_tag....

023ffe60 <_ZTISt19_Sp_make_shared_tag>:
 23ffe60:	023ffea0 023ffe45                       ..?.E.?.

023ffe68 <_ZTIN10__cxxabiv117__class_type_infoE>:
 23ffe68:	023fff00 023ffe74 023fff24              ..?.t.?.$.?.

023ffe74 <_ZTSN10__cxxabiv117__class_type_infoE>:
 23ffe74:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 23ffe84:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
 23ffe94:	00000045                                E...

023ffe98 <_ZTVN10__cxxabiv117__class_type_infoE>:
 23ffe98:	00000000 023ffe68 023fed41 023fed55     ....h.?.A.?.U.?.
 23ffea8:	023feee9 023feee9 023fedbf 023fed01     ..?...?...?...?.
 23ffeb8:	023feda7 023fed69 023fed33              ..?.i.?.3.?.

023ffec4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 23ffec4:	023fff00 023ffed0 023ffe68              ..?...?.h.?.

023ffed0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 23ffed0:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
 23ffee0:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
 23ffef0:	456f666e 00000000                       nfoE....

023ffef8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 23ffef8:	00000000 023ffec4 023fede9 023fedfd     ......?...?...?.
 23fff08:	023feee9 023feee9 023fedbf 023fed01     ..?...?...?...?.
 23fff18:	023feebd 023fee49 023fee11              ..?.I.?...?.

023fff24 <_ZTISt9type_info>:
 23fff24:	023ffea0 023fff2c                       ..?.,.?.

023fff2c <_ZTSSt9type_info>:
 23fff2c:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
 23fff3c:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
 23fff4c:	00646564 746e6d2f 726f772f 6170736b     ded./mnt/workspa
 23fff5c:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
 23fff6c:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
 23fff7c:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
 23fff8c:	656e696c 5f38342d 30323032 34323131     line-48_20201124
 23fff9c:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
 23fffac:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
 23fffbc:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
	...

023fffcd <link_const_data_end>:
 23fffcd:	00          	.byte	0x00
	...

023fffd0 <link_constructors_location>:
 23fffd0:	023fb249 	.word	0x023fb249
 23fffd4:	023fd4b9 	.word	0x023fd4b9
 23fffd8:	023fd76d 	.word	0x023fd76d
 23fffdc:	023fda11 	.word	0x023fda11
 23fffe0:	023fdb9d 	.word	0x023fdb9d
 23fffe4:	023fdbad 	.word	0x023fdbad
 23fffe8:	023fdbc9 	.word	0x023fdbc9
 23fffec:	023fe1ed 	.word	0x023fe1ed
 23ffff0:	023fe801 	.word	0x023fe801
 23ffff4:	023fe999 	.word	0x023fe999
