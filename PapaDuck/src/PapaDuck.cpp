/*
 * Project PapaDuck refactored
 * Author: Jamie Dowden-Duarte
 * Date: 10/24/25
 * For comprehensive documentation and examples, please visit:
 * https://docs.particle.io/firmware/best-practices/firmware-template/
 */

#include "Particle.h"
#include "IoTClassroom_CNM.h"
#include "math.h"
#include "neopixel.h"
#include "Adafruit_ssd1306.h"
#include "Adafruit_BME280.h"
#include "Encoder.h"
#include "DFRobotDFPlayerMini.h"

SYSTEM_MODE(MANUAL);

const int PIXELCOUNT = 12, OLED_RESET = -1, HEXADDRESS = 0X76;
const int SEALEVELPRESSURE_HPA = 1013.25, DEG = 0XB0, PERCENT = 0X25;
const int PINA = D4, PINB = D5, PBUTTON = D3, ESWTCH = D15, p2Button = D13;
const int HUE6 = 6, HUE5 = 5, HUE4 = 4, HUE3 = 3, HUE2 = 2, HUE1 = 1;
const int WEMO5 = 5, WEMO4 = 4, WEMO3 = 3, WEMO2 = 2, WEMO1 = 1, WEMO0 = 0;
bool wemowrite, buttonState, switchState, player, status;
unsigned long lastUpdateTime = 0, currentTime;
float temp = 0.0;
int color = rainbow[0], hue = HueRainbow[color % 7];
int i, timer, wemo, hueL;
bool onOff;
int brightness, position, lastPos;
const int SATURATION = 255;
const int MAXENCPOS = 96;
const int MAXBRITE = 255;

/**
 * Made with Marlin Bitmap Converter
 * https://marlinfw.org/tools/u8glib/converter.html
 *
 * This bitmap from the file 'dbb7d79069abd141f4d5e0bb7abff43a (2).jpg'
 */

#define WIDTH 59
#define HEIGHT 64

const unsigned char duckie[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x07, 0xFC, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0C, 0x07, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x30, 0x01, 0x80, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x60, 0x00, 0xC0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x00, 0x60, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x80, 0x00, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x80, 0x00, 0x30, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x06, 0x00, 0x10, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x0F, 0x00, 0x10, 0x00, 0x00, 0x00,
    0x00, 0x03, 0xC7, 0x00, 0x10, 0x00, 0x00, 0x00,
    0x00, 0x06, 0x60, 0x00, 0x10, 0x00, 0x00, 0x00,
    0x00, 0x0C, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00,
    0x00, 0x08, 0x10, 0x00, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x06, 0x60, 0x00, 0x61, 0xC0, 0x00, 0x00,
    0x00, 0x03, 0xE0, 0x00, 0xC3, 0x60, 0x00, 0x00,
    0x00, 0x00, 0x30, 0x01, 0xDE, 0x30, 0x00, 0x00,
    0x00, 0x00, 0x60, 0x03, 0xF0, 0x18, 0x00, 0x00,
    0x00, 0x00, 0xC0, 0x00, 0x00, 0x08, 0x00, 0x00,
    0x00, 0x00, 0x80, 0x00, 0x00, 0x0C, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
    0x00, 0x03, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
    0x00, 0x02, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
    0x00, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
    0x00, 0x0C, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00,
    0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
    0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
    0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
    0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
    0x00, 0x01, 0x80, 0x00, 0x00, 0x30, 0x00, 0x00,
    0x00, 0x00, 0xE0, 0x00, 0x00, 0x60, 0x00, 0x00,
    0x00, 0x00, 0x30, 0x00, 0x03, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x0E, 0x00, 0x1E, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x03, 0xFF, 0xF0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0};

Adafruit_NeoPixel pixel(PIXELCOUNT, SPI1, WS2812B);
Adafruit_SSD1306 display(OLED_RESET);
Adafruit_BME280 bme; // I2C
Button pushButton(PBUTTON);
Button encoderSwitch(ESWTCH);
Encoder encoder(PINA, PINB);
DFRobotDFPlayerMini myMp3Player;

void setup()
{
  Serial.begin(9600);
  waitFor(Serial.isConnected, 1000);
  Serial1.begin(9600);

  WiFi.on();
  WiFi.clearCredentials();
  WiFi.setCredentials("IoTNetwork");

  WiFi.connect();
  while (WiFi.connecting())
  {
    Serial.printf(".");
  }
  Serial.printf("\n\n");

  pixel.begin();
  pixel.setBrightness(10);
  pixel.show();

  status = bme.begin(HEXADDRESS);
  if (!status)
  {
    Serial.printf("BME at address %i failed to start\n", HEXADDRESS);
  }

  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.drawBitmap(icons[f][XPOS], icons[f][YPOS], duckie, WIDTH, HEIGHT, WHITE);
}

void loop()
{
  currentTime = millis();

  // Update temperature every minute
  // if (currentTime >= 60000){
  lastUpdateTime = currentTime;
  temp = bme.readTemperature();

  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(10, 0);
  display.print("Temp: ");
  display.print(temp);
  display.print(DEG);
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(12, 28);
  display.println("Papa Duck");
  display.display();
  // }

  // Cycle through colors on NeoPixels

  for (int i = 0; i < PIXELCOUNT; i++)
  {
    color = i % 7;
    pixel.setPixelColor(i, rainbow[color]);
    pixel.show();
    color++;
  }

  if (pushButton.isClicked())
  {
    onOff = !onOff;
    setHue(HUE1, onOff, HueRainbow[color % 7], brightness, SATURATION);
    Serial.printf("onOff %i\n", onOff);
  }

  position = encoder.read(); // 0-96 encoder positions, 0-255 brightness

  if (encoder.read() > 95)
  {
    encoder.write(position = 95);
  }
  if (encoder.read() < 0)
  {
    encoder.write(position = 0);
  }

  if (position != lastPos)
  {
    Serial.printf("Encoder position %i\n", position);
    brightness = position * (MAXBRITE / MAXENCPOS);
    Serial.printf("Turning on Hue# %i\n", HUE1);
    setHue(HUE1, onOff, HueRainbow[color % 7], brightness, SATURATION);
    lastPos = position;
  }

  if (pushButton.isClicked())
  {
    color++;
    setHue(HUE1, onOff, HueRainbow[color % 7], brightness, SATURATION);
  }

  if (p2Button.isClicked())
  {
    onOff = !onOff;
    Serial.printf("onOff %i\n", onOff);

    if (onOff)
    {
      Serial.printf("Turning on Wemo# %i\n", WEMO2);
      wemoWrite(WEMO2, HIGH);
    }

    else
    {
      Serial.printf("Turning off Wemo# %i\n", WEMO2);
      wemoWrite(WEMO2, LOW);
    }
  }
}

// Serial.printf("DFRobot DFPlayer Mini Demo\n");
// Serial.printf("Initializing DFPlayer ... (May take 3~5 seconds)\n");

// if (!myMp3Player.begin(Serial1)){ // Use softwareSerial to communicate with mp3.
//   Serial.printf("Unable to begin:\n");
//   Serial.printf("1.Please recheck the connection!\n");
//   Serial.printf("2.Please insert the SD card!\n");
//   while (true);
// }

// Serial.printf("DFPlayer Mini online.\n");
// Serial.println("Ready to go");
// Serial.printf("DFRobot DFPlayer Mini Demo \nInitializing DFPlayer ... (May take 3~5 seconds)\n");

// status = myMp3Player.begin(Serial1, false);
// Serial.printf("Status = %i\n", status);

// if (!status){
//     Serial.printf("Unable to begin:\n");
//     Serial.printf("1.Please recheck the connection!\n");
//     Serial.printf("2.Please insert the SD card!\n");
//     while (true);
// }
// Serial.printf("DFPlayer Mini online.\n");